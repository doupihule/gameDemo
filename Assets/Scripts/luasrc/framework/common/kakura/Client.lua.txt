Client = class('Client')

Client.temDirtList = {};
function Client:ctor()
    self._requestId = 0;
    self._baseUnqiueRequestId = 0;
    self.OPCODE_KAKURA_INIT = 1000;
    self.OPCODE_KAKURA_HEARTBEAT = 1001;
    self.OPCODE_KAKURA_REAUTH = 1014;
    self.OPCODE_BACKEND_REQUEST = 100001;
    self.heartBeatInterval = 60;
    self.PUBLIC_KEY = "ilo24wEFS*^^*2Ewilo24wEFS*^^*2Ew";
    self._token = "";
    self._gs_token = "";
    self._url = "";
    self._version = "";
    self._upgrade = "";
    self._hashMap = HashMap.new();
    self.hasLoginComplete = false;
    self.RELOGIN_INTVERL_TIME = 60;
    self.SWITCH_RELOGIN_INTVERL_TIME = "SWITCH_RELOGIN_INTVERL_TIME";
    self.lastLoginTime = 0;
    self._loginState = 0;
    self._defaultExpandParams = { forceConnect = false };
    self._serverTime = 0
end

function Client.getInstance()
    if not Client._instance then
        Client._instance = Client.new()
    end
    return Client._instance
end

function Client:checkConnect()
    KakuraClient.getInstance():aginConnect()
end

function Client:sendInit(token, userInfo, callback, thisObj, invitedBy, shareInfo)
end

function Client:initResult(result)
end

function Client:sendHeart(method, param, callback, thisObj, addParam)
end

function Client:send(method, param, callback, thisObj, opcode, isWait, addParam, expandParams)

end

function Client:onResult(result, isPush)

end

function Client:onDirtyList(baseData)
    if not baseData then
        return
    end
    if baseData.d then
        self:deleteBaseData(baseData.d)
    end
    if baseData.u then
        self:updateBaseData(baseData.u)
    end
end

function Client:updateBaseData(upData)
end

function Client:deleteBaseData(delData)

end

function Client:getUserData(data)

    return data
end

function Client:pushResult(result)
end

function Client:onConnectBack(isFirstInit)

end

function Client:doDummyServerBack(data, u, d)

end

function Client:relogin()
end

function Client:reloginBack(result)
end

function Client:getServerTime()
end

function Client:getMiniServerTime()
end

function Client:getRequestId()
    if self._requestId >= 0 then
        self._requestId = self._requestId + 1
    end
    return self._requestId
end

function Client:getUniqueRequestId(requestId)
    if requestId == nil then
        requestId = ""
    end
    self._baseUnqiueRequestId = self._baseUnqiueRequestId + 1
    local rid = 1
    local timestamp = (Date()):getTime()
    return "h5_" .. rid .. "_" .. timestamp .. "_" .. self._baseUnqiueRequestId .. "_"
end



function Client:getRid()
    return self._rid
end

function Client:getWebSocketConnet()
    return KakuraClient.getInstance():getWebSocketConnet()
end

function Client:testClose()
    KakuraClient.getInstance():testClose()
end

function Client:saveDataToCloud(params, callback, thisObj, addParam, expandParams)
    if addParam == nil then
        addParam = nil
    end
    if expandParams == nil then
        expandParams = nil
    end
    local token = self.globalLoginBackData.loginToken or ""
    if not params.token then
        params.token = token
    end
    LogsManager.echo("krma. cloud authenticate token=" .. token .. "body=" .. TableUtils.safelyJsonStringfy(params.clientDirty) .. "sendTime=" .. params.sendTime)
    self:startRequestCloud(MethodCommon.cloudStorage_setByUser, params, callback, thisObj, addParam, expandParams)
end

function Client:getCloudGlobalData(params, callback, thisObj, addParam)
    if callback == nil then
        callback = nil
    end
    if thisObj == nil then
        thisObj = nil
    end
    if addParam == nil then
        addParam = nil
    end
    if not self.hasLoginComplete then
        if callback then
            doJsCallFunc(callback, thisObj, { error = { code = ErrorCode.nologin } }, addParam)
        end
        return
    end
    local token = self.globalLoginBackData.loginToken
    if not token then
        if callback then
            doJsCallFunc(callback, thisObj, { error = { code = ErrorCode.nologin } }, addParam)
        end
        return
    end
    if not params.token then
        params.token = token
    end
    self:startRequestCloud(MethodCommon.cloudStorage_getGlobalData, params, callback, thisObj, addParam)
end

function Client:sendSubscribeMessage(params, callback, thisObj, addParam)
    if callback == nil then
        callback = nil
    end
    if thisObj == nil then
        thisObj = nil
    end
    if addParam == nil then
        addParam = nil
    end
    self:startRequestCloud(MethodCommon.saveSubscribeMsg, params, callback, thisObj, addParam)
end

function Client:setCloudGlobalData(params, callback, thisObj, addParam)
    if callback == nil then
        callback = nil
    end
    if thisObj == nil then
        thisObj = nil
    end
    if addParam == nil then
        addParam = nil
    end
    local token = self.globalLoginBackData.loginToken or ""
    if not params.token then
        params.token = token
    end
    self:startRequestCloud(MethodCommon.cloudStorage_setGlobalData, params, callback, thisObj, addParam)
end

function Client:startRequestCloud(method, params, callback, thisObj, addParam, expandParams)
    if callback == nil then
        callback = nil
    end
    if thisObj == nil then
        thisObj = nil
    end
    if addParam == nil then
        addParam = nil
    end
    if expandParams == nil then
        expandParams = nil
    end
    if not self.hasLoginComplete then
        self:startRelogin()
        if callback then
            doJsCallFunc(callback, thisObj, { error = { code = ErrorCode.nologin } }, addParam)
        end
        return
    end
    expandParams = expandParams or self._defaultExpandParams
    local url = Global.global_url
    params.sendTime = self.serverTime
    local thisValue = self
    local onErrorBack = function(error)
        if type(error) == "object" and error.code then
            local errorCode = tostring(error.code)
            if errorCode == "10038" or errorCode == "10003" then
                thisValue:startRelogin()
            end
        end
        LogsManager.echo("_errorBack;")
        if callback then
            doJsCallFunc(callback, thisObj, error, addParam)
        end
        Client.getInstance().lastLoginTime = Client.getInstance():getServerTime()
    end

    local onHttpBack = function(backData)
        if backData[0 + 1] then
            backData = backData[0 + 1]
        end
        if (backData.result and backData.result.serverInfo) and backData.result.serverInfo.serverTime then
            thisValue._reqBackTime = backData.result.serverInfo.serverTime
            thisValue._serverTime = thisValue._reqBackTime - cs.GameUtils.CommonUtil.GetTimeMiniStamp()
        end
        if backData.error then
            onErrorBack(backData.error)
            return
        end
        if callback then
            doJsCallFunc(callback, thisObj, backData, addParam)
        end
        Client.getInstance().lastLoginTime = Client.getInstance():getServerTime()
    end

    local sendData = { method = method, params = params }
    local webParams = { errorCall = onErrorBack }
    if UserInfo.isUseHttpServer and expandParams.forceConnect then
        webParams.url = url
        expandParams.url = Global.global_url
        GameHttpControler.getInstance():sendRequest(method, params, callback, thisObj, true, false, addParam, expandParams)
    else
        HttpMessage.getInstance():send(url, sendData, onHttpBack, self, "post", webParams)
    end
end

function Client:startRelogin()
    if not self:checkCanRelogin() then
        return
    end
    if self._loginState ~= 0 then
        return
    end
    LogsManager.echo("xd_ 开始重登-")
    self._loginState = 1
    self.hasLoginComplete = false
    UserInfo.platform:getWxInfo()
end

function Client:onReloginBack(data, isError)
    if isError == nil then
        isError = false
    end
    self._loginState = 0
    LogsManager.echo("xd_重登回来,重置状态")
end

function Client:checkCanRelogin()
    if self.serverTime - self.lastLoginTime < self:getReloginIntverlTime() then
        return false
    end
    return true
end

function Client:getReloginIntverlTime()
    local state = GameSwitch.getSwitchState(self.SWITCH_RELOGIN_INTVERL_TIME)
    if not state then
        state = self.RELOGIN_INTVERL_TIME
    end
    return state
end
