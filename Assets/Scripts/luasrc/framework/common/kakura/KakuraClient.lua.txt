KakuraClient = class('KakuraClient')

KakuraClient.method_heartBeat = "heartBeat";
KakuraClient.timeOutMiniSecond = 5000;
KakuraClient.timeOutResendTimes = 1;
function KakuraClient:ctor()
    self._isInit = false;
    self._aginCon = 0;
    self._timeCode = 0;
    self._timeCount = 0;
    self._reconnectCount = 0;
    self.autoConnectCount = 1;
    self._defaultAesKey = "ilo24wEFS*^^*2Ewilo24wEFS*^^*2Ew";
    self._isoffline = false;
    self._callback = nil;
    self._thisObj = nil;
    self._pushCallback = nil;
    self._pushThisObj = nil;
    self._webSocketConnet = false;
    self._isServerInit = false;
    self.hasGetUserInfo = false;
    self._hasRegistHeartBeat = false;
    self._requestId = 1;
    self._hasOnClose = false;
    self._connectCacheArr = {}
    KakuraMessage.getInstance():setMessageType(KakuraMessage.MESSAGE_FIX_ENC_NO_COMPRESS)
end

function KakuraClient.getInstance()
    if not KakuraClient._instance then
        KakuraClient._instance = KakuraClient.new()
    end
    return KakuraClient._instance
end

function KakuraClient:aginConnect()
    self._hasOnClose = false
    LogsManager.echo("kakura _again connect")
    WaitManager.getInstance():remove(MsgCMD.ROLL_ANI)
    self:registConnectEvent()
end

function KakuraClient:init(url, ver, caFilePath, pushCallback, pushThisObj, callback, thisObj)
    if pushCallback == nil then
        pushCallback = nil
    end
    if pushThisObj == nil then
        pushThisObj = nil
    end
    if callback == nil then
        callback = nil
    end
    if thisObj == nil then
        thisObj = nil
    end
    self._url = url
    if pushCallback then
        self._pushCallback = pushCallback
    end
    if pushThisObj then
        self._pushThisObj = pushThisObj
    end
    self._callback = callback
    self._thisObj = thisObj
    self:registConnectEvent()
end

function KakuraClient:registConnectEvent()
    self._aesKey = self._defaultAesKey
    LogsManager.echo(">>>>>>>>connectByUrl>>>>>>>>>>", self._url)
    self:clearInitRequest()
    self:destorySocket()
    if not self.hasGetUserInfo or not Global.checkIsSingleMode() then
        WaitManager.getInstance():add(MsgCMD.ROLL_ANI)
    end

    self._websocket:connectByUrl(self._url)
end

function KakuraClient:destorySocket()
    if self._websocket then
        self._websocket:offAll()
        self._websocket:close()
        self._websocket = nil
    end
    self._webSocketConnet = false
end

function KakuraClient:sendRequest(opcode, method, params, callback, thisObj, isWait, isInsert, addParams)

end

function KakuraClient:requestSocket(con)
end

function KakuraClient:doRequest()
end

function KakuraClient:timerHandler()
end

function KakuraClient:resendCurrentConnLater()
    if self._currentConn then
        local currentConn = self._currentConn
        TimerManager.getInstance():setTimeout(function()
            self:requestSocket(currentConn)
        end
        , self, 100)
    end
end

function KakuraClient:onReceiveMessage(evt)

end

function KakuraClient:excuetOneResponce(jsonData)
end

function KakuraClient:onSocketOpen()
end

function KakuraClient:onSocketClose(e, isFromError)

end

function KakuraClient:registHeartBeat()
    if self._hasRegistHeartBeat then
        return
    end
    if Global.checkIsSingleMode() then
        return
    end
    self._hasRegistHeartBeat = true
    TimerManager.getInstance():add(function()
        if Client.getInstance().webSocketConnet then
            Client.getInstance():sendHeart("heartBeat", nil, nil, nil, "id_1")
        end
    end
    , self, Client.getInstance().heartBeatInterval * 1000)
end

function KakuraClient:onSocketError()
end

function KakuraClient:getWebSocketConnet()
    return self._webSocketConnet
end

function KakuraClient:getUniqueRequestId(requestId)
    if requestId == nil then
        requestId = ""
    end
    local rid = Client.getInstance():getRid()
    local timestamp = (Date()):getTime()
    return "uniqueId_" .. rid .. "_" .. timestamp .. "_" .. self._requestId
end

function KakuraClient:turnRequestToSave(opcode, method, params, cb, tobj, isWait, addParams)
    return ConnectObj(opcode, method, params, cb, tobj, isWait, addParams)
end

function KakuraClient:checkHasMethod(method)
    local obj = self:getMethodObj(method)
    if obj then
        return true
    else
        return false
    end
end

function KakuraClient:getMethodObj(method)
    local len = #self._connectCacheArr
    if self._currentConn then
        if self._currentConn.method == method then
            return self._currentConn
        end
    end
    local i = 0
    repeat
        local con = self._connectCacheArr[i + 1]
        if con.method == method then
            return con
        end
        i = i + 1
    until not (i < len)
    return nil
end

function KakuraClient:clearOneMethod(method)
end

function KakuraClient:checkRequestId()
end

function KakuraClient:clearInitRequest()
end

function KakuraClient:checkIsInitMethod(method)
    if method == MethodCommon.User_kakuraInit or method == MethodCommon.User_kakuraReauth then
        return true
    end
    return false
end

function KakuraClient:checkServerSysError(code)
    if code == ErrorCode.duplicate_login then
        self._isoffline = true
        return true
    end
    return false
end

function KakuraClient:checkIsHeartBeat(method)
    if method == KakuraClient.method_heartBeat then
        return true
    end
    return false
end

function KakuraClient:testClose()
end
