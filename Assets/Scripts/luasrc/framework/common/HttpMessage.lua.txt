HttpMessage = class('HttpMessage')

HttpMessage.URLLoaderDataFormat = {TEXT="text", TEXTURE="texture", BINARY="binary"};
function HttpMessage:ctor()
  self._connectCacheArr = nil;
  self.reqsId = 0;
  self.isReqs = false;
  self.sTime = 0;
  self.reqTime = 0;
  self.key = "";
  self.errCount = 0;
  self._reconnectCount = 0;
  self.autoConnectCount = 0;
  self._connectCacheArr = {}
end

function HttpMessage.__getters.instance()
  if not HttpMessage._instance then
    HttpMessage._instance = HttpMessage.new()
  end
  return HttpMessage._instance
end

function HttpMessage:send(url, params, callBack, thisObject, method, webParams)
  
end

function HttpMessage:doRequest()
  
end

function HttpMessage:sureSend(data)
  
end

function HttpMessage:turnShortLogs(targetStr)
  if LogsManager.isOpenLogsDebug then
    return targetStr
  end
  if PackConfigManager.ins.platform.platform == "dev" or PackConfigManager.ins.platform.platform == "test" then
    return targetStr
  end
  if #targetStr < 1000 then
    return targetStr
  end
  return targetStr:slice(0, 1000)
end

function HttpMessage:sendOtherHttpRequest(url, params, callBack, thisObject, method, webParams, sendCount, addParams)
  
end

function HttpMessage:onHttpSuccess(data)
  
end

function HttpMessage:onHttpError(err)
end

function HttpMessage:reSendRequest()
  self:sureSend(self._currentConn)
end

function HttpMessage:objectToUrlParam(data)
  local retStr = ""
  if type(data) == "string" then
    return data
  end
  for key in pairs(data) do
    -- [ts2lua]data下标访问可能不正确
    local value = data[key]
    if value ~= nil and value ~= undefined then
      if value.constructor == Array or value.constructor == Object then
        retStr = retStr .. key .. "=" .. TableUtils.safelyJsonStringfy(value) .. "&"
      else
        retStr = retStr .. key .. "=" .. value .. "&"
      end
    else
      retStr = retStr .. key .. "=&"
    end
  end
  if #retStr > 0 then
    retStr = retStr:substring(0, #retStr - 1)
  end
  return retStr
end
