










































WXGamePlatform = class('WXGamePlatform',GamePlatform)

function WXGamePlatform:ctor()
  WXGamePlatform.super.ctor(self)
  self._hasCheckUpdateListener = false;
  self._subPackErrorCount = 0;
  WXGamePlatform.instance = self
  self._isSubPackage = true
  self.listenTime = cs.GameUtils.CommonUtil.GetTimeMiniStamp()
  LogsManager.echo('构造platform')
end

function WXGamePlatform:initPlatform()
  self:addListener()
  self:setVersionCheckResult(0)
  self:setUserComeFrom()
  self:setSystemInfo()
  self:registerRecord()
  self:setKeeyScreenOn()
  self:initCityName()
end

function WXGamePlatform:setKeeyScreenOn()
  if 'function' == type(self:getWX().setKeepScreenOn) then
    self:getWX():setKeepScreenOn({keepScreenOn=true})
  end
end

function WXGamePlatform:setSystemInfo()
  local myThis = self
  if "function" == type(self:getWX().getSystemInfo) then
    self:getWX():getSystemInfo({success=function(systemInfo)
      LogsManager.echo('>>getSystemInfo成功回调', JSON:stringify(systemInfo))
      myThis:initSystemInfoData(systemInfo)
    end
    , fail=function(err)
      LogsManager.echo('>>getSystemInfo失败回调', JSON:stringify(err))
      local data = myThis:getWX():getSystemInfoSync()
      LogsManager.echo('>>getSystemInfo失败回调 重新同步拉取', JSON:stringify(data))
      if data then
        myThis:initSystemInfoData(data)
      end
    end
    })
  end
end

function WXGamePlatform:initSystemInfoData(systemInfo, isDelay)
  if isDelay == nil then
    isDelay=false
  end
  if systemInfo ~= undefined then
    if not systemInfo.windowWidth then
      systemInfo.windowWidth = systemInfo.screenWidth
    end
    if not systemInfo.windowHeight then
      systemInfo.windowHeight = systemInfo.screenHeight
    end
    self.systemInfo = systemInfo
    ScreenAdapterTools.setPhoneSys(systemInfo)
    if not isDelay then
      TimerManager.instance:add(self._delayCheckSystemInfo, self, 3000, 3)
      TimerManager.instance:add(self._delayCheckSystemInfo, self, 1000, 1)
    end
  end
end

function WXGamePlatform:_delayCheckSystemInfo()
  local systemInfo = self:getWX():getSystemInfoSync()
  LogsManager.echo("xd _delayCheckSystemInfo:", self.systemInfo.windowHeight, systemInfo.windowHeight)
  if systemInfo.windowHeight and systemInfo.windowHeight > self.systemInfo.windowHeight then
    self:initSystemInfoData(systemInfo, true)
  end
end

function WXGamePlatform:getSystemInfo()
  if not self.systemInfo and "function" == type(self:getWX().getSystemInfoSync) then
    local systemInfo = self:getWX():getSystemInfoSync()
    self:initSystemInfoData(systemInfo)
  end
  return self.systemInfo
end

function WXGamePlatform:getWxInfo()
  local myThis = self
  self:reCheckBar()
  local data = {success=function(res)
    LogsManager.echo('>>login成功回调>>', res)
    myThis:setLaunchOptions()
    if res ~= undefined then
      local gParams = {}
      local noCode = false
      if UserInfo.isWX() or UserInfo.isQQGame() then
        if not res.code then
          noCode = true
        end
      elseif UserInfo.isTT() then
        if not res.anonymousCode and not res.code then
          noCode = true
        end
      end
      if noCode then
        myThis:retryGetWxInfo()
        return
      end
      if UserInfo.isWX() then
        gParams = {method=MethodCommon.global_Account_loginWx, params={js_code=res.code, device=Global.deviceModel, comeFrom=UserInfo.LoginSceneInfo, sceneId=tostring(Global.sceneId)}}
      elseif UserInfo.isQQGame() then
        gParams = {method=MethodCommon.global_Account_loginQQ, params={js_code=res.code, device=Global.deviceModel, comeFrom=UserInfo.LoginSceneInfo}}
      elseif UserInfo.isTT() then
        gParams = {method=Method.global_Account_loginTT, params={code=res.code, anonymous_code=res.anonymousCode, device=Global.deviceModel, comeFrom=UserInfo.LoginSceneInfo}}
      elseif UserInfo.isOppo() then
        gParams = {method=MethodCommon.global_Account_loginOppo, params={token=res.data.token, device=Global.deviceModel, comeFrom=UserInfo.LoginSceneInfo}}
      elseif UserInfo.isVivo() then
        gParams = {method=MethodCommon.global_Account_loginVivo, params={token=res.token, device=Global.deviceModel, comeFrom=UserInfo.LoginSceneInfo}}
      elseif UserInfo.isUC() then
        gParams = {method=MethodCommon.global_Account_loginUC, params={code=res.code, device=Global.deviceModel, comeFrom=UserInfo.LoginSceneInfo}}
      end
      myThis:reqGlobal(gParams)
    end
  end
  , fail=function(err)
    LogsManager.echo('>>login失败回调>>', JSON:stringify(err))
    myThis:retryGetWxInfo()
  end
  , complete=function() end}
  if UserInfo.isTT() then
    -- [ts2lua]data下标访问可能不正确
    data["force"] = false
  end
  self:getWX():login(data)
end

function WXGamePlatform:retryGetWxInfo()
  self.curReqGlobalCount=self.curReqGlobalCount+1
  if self.curReqGlobalCount >= self.maxReqGlobalCount then
    LogsManager.warn(".login未获取到code超过五次", LogsManager.errorTag_gameError)
    WindowManager.setPopupTip(1, "登陆失败，请重试！", function()
      self:getWxInfo()
    end
    , self)
  else
    self:getWxInfo()
  end
  return
end

function WXGamePlatform:setLaunchOptions()
  if self.isDoWxThings then
    return
  end
  if (UserInfo.isOppo() or UserInfo.isVivo()) or UserInfo.isUC() then
    LogsManager.echo('Oppo Vivo 无 getLaunchOptions接口')
    return
  end
  self.isDoWxThings = true
  local myThis = self
  local launchRes = self:getLaunchOptions()
  if not launchRes then
    return
  end
  LogsManager.echo("yrc getLaunchOptions", JSON:stringify(launchRes))
  if not Global.sceneId then
    Global.sceneId = launchRes.scene
  end
  Global.currentSceneId = launchRes.scene
  local queryData = launchRes.query
  if queryData then
    myThis.inviteBy = queryData.inviterRid
    myThis.shareInfo = queryData.shareInfo
    if queryData.imgId then
      StatisticsManager.ins:onEvent(StatisticsCommonConst.SHARE_ENTER_GAME, {imgId=queryData.imgId, inviteBy=queryData.inviterRid})
    end
    myThis.shareLinkParams = queryData
  end
end

function WXGamePlatform:reCheckBar()
  if type(self:getWX().getMenuButtonBoundingClientRect) == 'function' then
    try_catch{
      main = function()
        local menuInfo = self:getWX():getMenuButtonBoundingClientRect()
        LogsManager.echo('hlx menuInfo:', JSON:stringify(menuInfo))
        ScreenAdapterTools.reCheckBar(menuInfo)
      end,
      catch = function(e)
        LogsManager.echo('getMenuButtonBoundingClientRect 方法报错:', JSON:stringify(e))
      end
    }
  else
    LogsManager.echo('无 getMenuButtonBoundingClientRect 方法')
  end
end

function WXGamePlatform:addListener()
  local thisObj = self
  if UserInfo.isUC() then
    LogsManager.echo("UC平台无全局事件注册")
    return
  end
  if self:getWX().onError then
    self:getWX():onError(function(res)
      LogsManager.systemError("onError!!!!!!!!!!!!", JSON:stringify(res))
    end
    )
  end
  if self:getWX().onMemoryWarning then
    self:getWX():onMemoryWarning(function(res)
      local errContent = "内存警告"
      if res then
        errContent = errContent + JSON:stringify(res)
      end
    end
    )
  else
    LogsManager.warn("没有找到onMemoryWarning这个接口")
  end
  self:addOnShowListener()
end

function WXGamePlatform:getLoginResult()
  self:changeLeftTask(-1, "getLoginResult")
end

function WXGamePlatform:getUserInfoAndReq()
  local myThis = self
  myThis.platformUserInfo = {}
  self:getWX():getSetting({success=function(res)
    LogsManager.echo("yrc wx getSetting success", JSON:stringify(res))
    -- [ts2lua]res.authSetting下标访问可能不正确
    if res.authSetting['scope.userInfo'] then
      LogsManager.echo("yrc wx start getUserInfo")
      myThis:getWX():getUserInfo({withCredentials=true, lang="", success=function(res)
        LogsManager.echo("yrc wx getUserInfo success", JSON:stringify(res))
        if UserInfo.isBaidu() then
          LogsManager.echo("xd 百度不处理授权数据")
          return
        end
        myThis.userInfoData = res
        local userInfo = res.userInfo
        myThis:turnChannelUserInfo(userInfo)
        if UserInfo.isQQGame() then
          myThis:sendKakuraInit()
        end
      end
      , fail=function(err)
        LogsManager.echo("yrc getUserInfo fail", JSON:stringify(err))
      end
      , complete=function(res)
        LogsManager.echo("yrc getUserInfo complete", JSON:stringify(res))
        if not UserInfo.isQQGame() then
          myThis:sendKakuraInit()
        end
      end
      })
    else
      myThis:sendKakuraInit()
    end
  end
  , fail=function()
    LogsManager.echo("yrc getSetting ==fail===")
    myThis:sendKakuraInit()
  end
  , complete=function()
    LogsManager.echo("yrc getSetting ==complete===")
  end
  })
end

function WXGamePlatform:createLoginButton(callBack, thisObject)
  local designWidth = 640
  local designHeight = 1136
  local button = self:getWX():createUserInfoButton({type='image', text='   点击获取微信授权    ', image='common/loading_bt_jinruyouxi.png', style={left=designWidth - 233 * 0.5 / designWidth * UserInfo.platform:getSystemInfo().windowWidth, top=3 * 0.25 * UserInfo.platform:getSystemInfo().windowHeight, width=233 / designWidth * UserInfo.platform:getSystemInfo().windowWidth, height=70 / designHeight * UserInfo.platform:getSystemInfo().windowHeight, backgroundColor='#00000033', color='#ff0000', textAlign='center'}})
  button:onTap(function(res)
    if res.errMsg == "getUserInfo:ok" then
      LogsManager.echo('>>createLoginButton成功回调>>', JSON:stringify(res))
      LogsManager.echo("yrc wx authorize success", JSON:stringify(res))
      callBack and callBack:call(thisObject)
      button:hide()
      button:destroy()
    else
      LogsManager.echo("拒绝授权 wx GetUserInfo 数据：" .. JSON:stringify(res))
      button:hide()
      button:destroy()
      callBack and callBack:call(thisObject)
    end
  end
  )
end

function WXGamePlatform:createSpeLoginBtn(posX, posY, btnW, btnH, callBack, thisObject)
  local left = posX / ScreenAdapterTools.width * ScreenAdapterTools.windowWidth
  local top = posY / ScreenAdapterTools.height * ScreenAdapterTools.windowHeight
  local width = btnW / ScreenAdapterTools.width * ScreenAdapterTools.windowWidth
  local height = btnH / ScreenAdapterTools.height * ScreenAdapterTools.windowHeight
  self:removeLoginBtn()
  local button = self:getWX():createUserInfoButton({type='image', image='open/res/openImg.png', withCredentials=false, style={left=left, top=top, width=width, height=height}})
  button:onTap(function(res)
    LogsManager.echo(">>>>>>onTap>>>>>>>>", res.errMsg == "getUserInfo:ok", res)
    if res.errMsg == "getUserInfo:ok" then
      LogsManager.echo('>>loginbutton onTap 成功回调>>', JSON:stringify(res))
      callBack and callBack:call(thisObject, res)
    else
      LogsManager.echo("拒绝授权 wx GetUserInfo 数据：" .. JSON:stringify(res))
      callBack and callBack:call(thisObject, -1)
    end
  end
  )
  self.loginBtn = button
end

function WXGamePlatform:removeLoginBtn()
  if self.loginBtn then
    self.loginBtn:hide()
    self.loginBtn:destroy()
  end
end

function WXGamePlatform:share(id, extraData, callback, thisObj)
  LogsManager.echo("yrc wx share", id, extraData)
  if self._isShare then
    return
  end
  StatisticsManager.ins:onEvent(StatisticsCommonConst.NORMAL_SHARE)
  self._isShare = true
  TimerManager.instance:setTimeout(function()
    self._isShare = false
  end
  , self, 1300)
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_SHARE_NEW) then
    LogsManager.echo("yrc share 开关关了")
    callback and callback:call(thisObj, true)
    return
  end
  local shareQuery = ""
  self._shareId = id
  self._shareExtraData = {}
  TableUtils.deepCopy(extraData, self._shareExtraData)
  self._shareCallback = callback
  self._shareThisObj = thisObj
  if extraData and extraData.noWait then
    self._shareNoWait = true
  else
    self._shareNoWait = false
  end
  self._shareTime = Client.instance.miniserverTime
  local rid = UserModel.instance:getUserRid()
  local sinfo = ""
  local shareData = {}
  if extraData then
    shareData.des = extraData.des or ""
    shareData.imgUrl = extraData.imgUrl or ""
    if extraData.shareInfo then
      sinfo = "&shareInfo=" .. extraData.shareInfo
    end
  end
  local tempShareData = KariqiShareManager.getOneRandomShareInfo()
  if tempShareData then
    shareData = tempShareData
  else
    if id then
      shareData = ShareFunc.instance:getShareData(id, "wxgame")
    end
  end
  if not shareData then
    callback and callback:call(thisObj, false)
    return
  end
  local shareContentId = nil
  if shareData.extraData and shareData.extraData.contentId then
    shareContentId = shareData.extraData.contentId
    StatisticsManager.ins:onEvent(StatisticsCommonConst.SHARE_TOTAL_CLICK, {contentId=shareContentId})
  else
    shareContentId = nil
    StatisticsManager.ins:onEvent(StatisticsCommonConst.SHARE_TOTAL_CLICK)
  end
  if extraData then
    shareQuery = self:turnDataToShareQuery(extraData)
  end
  if shareData.extraData then
    if not shareQuery then
      shareQuery = self:turnDataToShareQuery(shareData.extraData)
    else
      shareQuery = shareQuery .. "&" .. self:turnDataToShareQuery(shareData.extraData)
    end
  end
  if shareQuery and shareQuery:find("inviterRid=") == -1 then
    if shareQuery ~= "" then
      shareQuery = shareQuery .. "&inviterRid=" .. rid
    else
      shareQuery = "inviterRid=" .. rid
    end
  end
  -- [ts2lua]shareData下标访问可能不正确
  -- [ts2lua]shareData下标访问可能不正确
  -- [ts2lua]shareData下标访问可能不正确
  local data = {title=shareData["desc"], imageUrl=shareData["imgUrl"], imgUrl=shareData["imgUrl"], query=shareQuery or "inviterRid=" .. rid}
  if UserInfo.isUC() then
    -- [ts2lua]shareData下标访问可能不正确
    -- [ts2lua]shareData下标访问可能不正确
    local data = {title=shareData["desc"], imageUrl=shareData["imgUrl"], query=shareQuery or "inviterRid=" .. rid, target="wechat", success=function(res)
      LogsManager.echo("hlx 分享成功回调", JSON:stringify(res))
      callback and callback:call(thisObj, true)
    end
    , fail=function(err)
      LogsManager.echo("hlx 分享失败回调", JSON:stringify(err))
      callback and callback:call(thisObj, false)
    end
    }
  else
    -- [ts2lua]shareData下标访问可能不正确
    -- [ts2lua]shareData下标访问可能不正确
    -- [ts2lua]shareData下标访问可能不正确
    local data = {title=shareData["desc"], imageUrl=shareData["imgUrl"], imgUrl=shareData["imgUrl"], query=shareQuery or "inviterRid=" .. rid}
  end
  self._lastShareImg = shareData.imgId
  LogsManager.echo("yrc wxshare", data)
  local shareCallBack = function(res)
    LogsManager.echo('分享成功回调', res)
    if res ~= nil then
      self:_doShareCallBack(res == 1)
      return
    else
      LogsManager.warn('分享失败回调')
    end
  end
  
  if id == "2" and extraData.shareInfo then
    local arr = extraData.shareInfo:split(".")
    if #arr == 3 and #arr[2+1] > 0 then
      self:shareDynamicAppMessage(data, shareCallBack, arr[2+1])
    else
      self:shareNormalAppMessage(data, shareCallBack)
    end
  else
    self:shareNormalAppMessage(data, shareCallBack)
  end
end

function WXGamePlatform:shareNormalAppMessage(data, shareCallBack)
  LogsManager.echo("yrc shareNormalAppMessage")
  if self:getWX().updateShareMenu then
    self:getWX():updateShareMenu({withShareTicket=true, isUpdatableMessage=false})
  end
  self:shareAldAppMsg(data, shareCallBack)
end

function WXGamePlatform:shareDynamicAppMessage(data, shareCallBack, activityId)
  LogsManager.echo("yrc shareDynamicAppMessage")
  if self:getWX().updateShareMenu then
    self:getWX():updateShareMenu({withShareTicket=true, isUpdatableMessage=true, activityId=activityId, templateInfo={parameterList={{name='member_count', value='1'}, {name='room_limit', value='4'}}}})
  end
  self:shareAldAppMsg(data, shareCallBack)
end

function WXGamePlatform:shareAldAppMsg(data, shareCallBack)
  self:getWX():shareAppMessage({title=data.title, imageUrl=data.imgUrl, query=data.query, success=function(res)
    print(">>>>>>>>share succ1>>>>>>>", res)
    shareCallBack(1)
  end
  , fail=function(res)
    print(">>>>>>>>share fail1>>>>>>>", res)
    shareCallBack(0)
  end
  })
  print(">>>>>>>>shareAppMessage>>>>>>>", data)
end

function WXGamePlatform:checkShareSucc()
  local newTime = Client.instance.miniserverTime
  LogsManager.echo("yrc checkShareSucc newTime", newTime)
  if self._shareTime and self._shareTime > 0 then
    local distime = newTime - self._shareTime
    self._shareTime = 0
    local kariquRt = KariqiShareManager.checkShareResult(distime)
    LogsManager.echo("kariquRt", kariquRt)
    if kariquRt == -1 then
      FrameWorkHandle.instance:onCheckShareSucess(distime, self._shareExtraData)
    else
      if kariquRt == 1 then
        self:onShareComplete(true)
      else
        FrameWorkHandle.instance:onCheckShareSucess(0, self._shareExtraData)
      end
    end
  end
end

function WXGamePlatform:onShareComplete(shareResult)
  if shareResult == true then
    KariqiShareManager.saveShareRecord()
  end
  TimerManager.instance:setTimeout(function()
    self:_doShareCallBack(shareResult)
  end
  , self, 500)
end

function WXGamePlatform:sharePage()
  LogsManager.echo("hlx 初始默认分享配置")
  if UserInfo.isUC() then
    LogsManager.echo("hlx UC平台无三个点分享配置")
    return
  end
  self:getWX():showShareMenu({withShareTicket=true})
  local myThis = self
  local callback = function()
    local query = ""
    local imgUrl = nil
    local title = nil
    if BaseFunc.globalCfgsHasLoad then
      local tempShareData = KariqiShareManager.getOneRandomShareInfo()
      local shareData = nil
      if tempShareData then
        shareData = tempShareData
      else
        shareData = ShareFunc.instance:getShareData("1")
      end
      if shareData.extraData then
        query = query + myThis:turnDataToShareQuery(shareData.extraData)
      end
      imgUrl = shareData.imgUrl
      title = shareData.desc
    end
    if UserModel.instance:getUserRid() then
      if not query then
        query = "inviterRid=" .. UserModel.instance:getUserRid()
      else
        query = query .. "&inviterRid=" .. UserModel.instance:getUserRid()
      end
    end
    LogsManager.echo("wx share:", query, imgUrl)
    myThis._lastShareImg = shareData.imgId
    return {imageUrl=imgUrl, title=title, query=query}
  end
  
  self:myOnShare(callback)
end

function WXGamePlatform:myOnShare(callback)
  self:getWX():onShareAppMessage(callback)
end

function WXGamePlatform:initPlatformData()
  self:sharePage()
  self:registerAd()
  AdVideoManager.instance._isInitAdv = true
end

function WXGamePlatform:loadVideoAd()
  LogsManager.echo('hlx reload VideoAd')
  local thisObj = self
  if not self._videoAd then
    self:registerAd()
  else
    local promise = self._videoAd:load()
    if type(promise) == 'object' and promise.tsvar_then then
      promise:tsvar_then(function()
        LogsManager.echo('videoAd 注册广告加载成功')
        thisObj.loadAdvFailed = false
        thisObj.advHasShow = false
      end
      ):catch(function(err)
        thisObj.loadAdvFailed = true
        LogsManager.echo('videoAd 广告手动加载失败', err)
        KariqiShareManager.addAdvPoint({eventId=KariquShareConst.KARIQU_SHOWADV_FAIL, name=ShareOrTvManager.curOrderName}, true)
      end
      )
    end
  end
end

function WXGamePlatform:canAdv()
  if not WXGamePlatform.super.canAdv(self) then
    return false
  end
  if UserInfo.isUC() and "function" ~= type(self:getWX().createRewardVideoAd) then
    LogsManager.warn("hlx adv 这个设备没有视频广告组件")
    return false
  elseif "function" ~= type(self:getWX().createRewardedVideoAd) then
    LogsManager.warn("hlx adv这个设备没有视频广告组件")
    return false
  end
  return true
end

function WXGamePlatform:registerAd()
  self.loadAdvFailed = false
  LogsManager.echo("yrc registerAd", self._videoId)
  if self._videoAd then
    return
  end
  if not self:canAdv() then
    self.loadAdvFailed = true
    KariqiShareManager.addAdvPoint({eventId=KariquShareConst.KARIQU_SHOWADV_FAIL, name=ShareOrTvManager.curOrderName}, true)
    return
  end
  local thisObj = self
  if UserInfo.isUC() then
    self._videoAd = self:getWX():createRewardVideoAd()
  else
    local obj = nil
    if UserInfo.isBaidu() then
      obj = {adUnitId=self._videoId, appSid=self._appSid}
    elseif UserInfo.isVivo() then
      obj = {posId=self._videoId}
    else
      obj = {adUnitId=self._videoId}
    end
    self._videoAd = self:getWX():createRewardedVideoAd(obj)
  end
  LogsManager.echo("yrc registerAd this._videoAd", type(self._videoAd))
  if self._videoAd then
    local videoAd = self._videoAd
    videoAd:onError(function(err)
      thisObj.loadAdvFailed = true
      KariqiShareManager.addAdvPoint({eventId=KariquShareConst.KARIQU_SHOWADV_FAIL, name=ShareOrTvManager.curOrderName}, true)
      WindowManager.SwitchMaskUI(false, 0.5)
      LogsManager.echo("videoAd.onError:", JSON:stringify(err))
      thisObj.videoState = 0
      if thisObj._videoLoaded then
        WindowManager.ShowTip(TranslateFunc.instance:getTranslate("#tid_ad_error"))
        StatisticsManager.ins:onEvent(StatisticsCommonConst.NORMAL_VIDEO_AD_FAIL)
        thisObj:_doVedioCallBack(false)
      end
    end
    )
    videoAd:onLoad(function()
      LogsManager.echo("videoAd.onLoad:")
      thisObj.loadAdvFailed = false
      thisObj.advHasShow = false
      thisObj:afterVideoLoadCallBack()
    end
    )
    videoAd:onClose(function(res)
      Message.instance:send(MsgCMD.VIDEO_PLAY, res and res.isEnded)
      self.isPlayVideo = false
      WindowManager.SwitchMaskUI(false, 0.5)
      if res and res.isEnded then
        StatisticsManager.ins:onEvent(StatisticsCommonConst.NORMAL_VIDEO_SUCCESS)
        LogsManager.echo("yrc show WX video suc")
        (thisObj._extraData and thisObj._extraData.callback) and thisObj._extraData.callback:call(thisObj._extraData.thisObj, true)
        thisObj:onVideoComplete(true)
      else
        thisObj:onTurnOffAdsEarly()
        (thisObj._extraData and thisObj._extraData.callback) and thisObj._extraData.callback:call(thisObj._extraData.thisObj, false)
      end
    end
    )
  else
    self.loadAdvFailed = true
    KariqiShareManager.addAdvPoint({eventId=KariquShareConst.KARIQU_SHOWADV_FAIL, name=ShareOrTvManager.curOrderName}, true)
  end
end

function WXGamePlatform:onVideoComplete(videoResult)
  LogsManager.echo("onVideoComplete time:", Client.instance.miniserverTime)
  self.videoState = 0
  self._videoLoaded = false
  -- [ts2lua]lua中0和空字符串也是true，此处videoResult需要确认
  local tempFunc = (videoResult and {self._videoSucCallback} or {self._videoFailCallback})[1]
  local tempObj = self._videoThisObj
  self._videoFailCallback = nil
  self._videoSucCallback = nil
  self._videoThisObj = nil
  self._extraData = nil
  self._videoLoaded = false
  TimerManager.instance:setTimeout(function()
    TimerManager.instance:setTimeout(function()
      tempFunc and tempFunc:call(tempObj, videoResult)
    end
    , self, 50)
  end
  , self, 50)
end

function WXGamePlatform:onTurnOffAdsEarly()
  local thisObj = self
  local failHandleType = GlobalParamsFunc.instance.videoHandleType
  if failHandleType == 1 then
    LogsManager.echo("看视频中途退出")
    thisObj:onVideoComplete(false)
  elseif failHandleType == 2 then
    thisObj.videoState = 1
    -- [ts2lua]TranslateFunc.videoTranslateArr下标访问可能不正确
    self:showPopTip("提示", TranslateFunc.videoTranslateArr[math.floor(math.random() * #TranslateFunc.videoTranslateArr)], {confirmText=TranslateFunc.videoLabTranslate, success=function(res)
      if res.confirm then
        LogsManager.echo('用户点击确定,再次拉起视频')
        thisObj:showVideoAd(thisObj._videoSucCallback, thisObj._videoFailCallback, thisObj._videoThisObj, thisObj._extraData)
      elseif res.cancel then
        LogsManager.echo("用户取消了再次看视频")
        thisObj:onVideoComplete(false)
      end
    end
    })
  end
end

function WXGamePlatform:showVideoAd(successCallBack, closeCallBack, thisObj, extraData)
  if successCallBack == nil then
    successCallBack=nil
  end
  if closeCallBack == nil then
    closeCallBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if extraData == nil then
    extraData={}
  end
  StatisticsManager.ins:onEvent(StatisticsCommonConst.NORMAL_VIDEO_AD)
  self.isPlayVideo = false
  self._videoSucCallback = successCallBack
  self._videoFailCallback = closeCallBack
  self._extraData = extraData
  self._videoLoaded = true
  self._videoThisObj = thisObj
  WindowManager.SwitchMaskUI(true, 0.5)
  if not self._videoAd then
    self:registerAd()
  end
  if not self._videoAd then
    WindowManager.SwitchMaskUI(false, 0.5)
    LogsManager.echo("yrc 没有广告实例，直接执行失败回调")
    self:_doVedioCallBack(false)
    return
  end
  local videoAd = self._videoAd
  local myThis = self
  self.videoState = 1
  WindowManager.ShowTip("视频加载中")
  videoAd:show():tsvar_then(function()
    LogsManager.echo('广告显示成功')
    myThis.isPlayVideo = true
    Message.instance:send(MsgCMD.VIDEO_STOP)
  end
  ):catch(function(err)
    LogsManager.echo('广告组件出现问题', err)
    videoAd:load():tsvar_then(function()
      LogsManager.echo('手动加载成功')
      videoAd:show():tsvar_then(function()
        LogsManager.echo('广告显示成功')
        myThis.isPlayVideo = true
        Message.instance:send(MsgCMD.VIDEO_STOP)
      end
      ):catch(function(err)
        LogsManager.echo('hlx video.广告组件第二次show失败，执行失败回调', err)
        myThis.loadAdvFailed = true
        KariqiShareManager.addAdvPoint({eventId=KariquShareConst.KARIQU_SHOWADV_FAIL, name=ShareOrTvManager.curOrderName}, true)
        myThis.videoState = 0
        myThis:_doVedioCallBack(false)
      end
      )
    end
    ):catch(function(err)
      LogsManager.echo('广告手动加载失败', err)
      myThis.loadAdvFailed = true
      KariqiShareManager.addAdvPoint({eventId=KariquShareConst.KARIQU_SHOWADV_FAIL, name=ShareOrTvManager.curOrderName}, true)
      myThis.videoState = 0
      myThis:_doVedioCallBack(false)
    end
    )
  end
  )
end

function WXGamePlatform:_doVedioCallBack(result)
  LogsManager.echo("_doVedioCallBack and 重置视频参数 _videoCallback _videoThisObj")
  self.videoState = 0
  -- [ts2lua]lua中0和空字符串也是true，此处result需要确认
  local tempFunc = (result and {self._videoSucCallback} or {self._videoFailCallback})[1]
  local tempObj = self._videoThisObj
  self._videoFailCallback = nil
  self._videoSucCallback = nil
  self._videoThisObj = nil
  self._extraData = nil
  self._videoLoaded = false
  tempFunc and tempFunc:call(tempObj, result)
end

function WXGamePlatform:_doShareCallBack(result)
  LogsManager.echo("_doShareCallBack and 重置分享参数 _shareCallback _shareThisObj _shareId _shareExtra")
  local tempFunc = self._shareCallback
  local tempObj = self._shareThisObj
  self._shareCallback = nil
  self._shareThisObj = nil
  self._shareId = nil
  self._shareExtraData = nil
  self._shareNoWait = nil
  tempFunc and tempFunc:call(tempObj, result)
end

function WXGamePlatform:loginOut()
  local obj = {success=function()
    print("_loginOut success__")
  end
  , fail=function()
    print("_loginOut fail__")
  end
  , complete=function()
    print("_loginOut complete__")
  end
  }
  if self:getWX().exitMiniProgram then
    self:getWX():exitMiniProgram(obj)
  end
end

function WXGamePlatform:vibrate(isLong, callBack, thisObject)
  if isLong == nil then
    isLong=false
  end
  if callBack == nil then
    callBack=nil
  end
  if thisObject == nil then
    thisObject=nil
  end
  if isLong then
    if "function" == type(self:getWX().vibrateLong) then
      self:getWX():vibrateLong({success=function(res)
        callBack and callBack:call(thisObject, true)
      end
      , fail=function(err)
        callBack and callBack:call(thisObject, false)
      end
      })
    end
  else
    if "function" == type(self:getWX().vibrateShort) then
      self:getWX():vibrateShort({success=function(res)
        callBack and callBack:call(thisObject, true)
      end
      , fail=function(err)
        callBack and callBack:call(thisObject, false)
      end
      })
    end
  end
end

function WXGamePlatform:addUpdateListener()
  self:getNetwork()
  local thisObj = self
  local timeCode = TimerManager.instance:setTimeout(function()
    thisObj.isOutTime = true
    if thisObj._hasCheckUpdateListener then
      LogsManager.echo("wxgme xd 已经处理过更新检查了--000000000")
      return
    end
    thisObj._hasCheckUpdateListener = true
    MainModule.instance:changeShowMainTask(-1, MainModule.task_updateListerner, "updateListerner timeover")
  end
  , self, 5000)
  self:changeLeftTask(-1, "addUpdateListener")
  self:startDownloadSubPackage()
  WXGamePlatform.super.addUpdateListener(self)
  if type(self:getWX().getUpdateManager) == 'function' then
    local updateManager = self:getWX():getUpdateManager()
    if not VersionManager.checkIsForceUpdate() then
      LogsManager.echo("krma. no ForceUpdate")
      timeCode and TimerManager.instance:remove(timeCode)
      if thisObj._hasCheckUpdateListener then
        LogsManager.echo("wxgme xd 已经处理过更新检查了--000000000")
        return
      end
      thisObj._hasCheckUpdateListener = true
      MainModule.instance:changeShowMainTask(-1, MainModule.task_updateListerner, "task_updateListerner back")
    end
    local timer = Client.instance.miniserverTime
    updateManager:onCheckForUpdate(function(res)
      LogsManager.echo("请求完新版本信息的回调", res.hasUpdate, "costTime :", Client.instance.miniserverTime - timer)
      -- [ts2lua]lua中0和空字符串也是true，此处res.hasUpdate需要确认
      thisObj:setVersionCheckResult((res.hasUpdate and {2} or {1})[1])
      if thisObj.isOutTime then
        return
      end
      if timeCode then
        TimerManager.instance:remove(timeCode)
      end
      if thisObj._hasCheckUpdateListener then
        LogsManager.echo("wxgme xd 已经处理过更新检查了--000000000")
        return
      end
      thisObj._hasCheckUpdateListener = true
      if not res.hasUpdate and VersionManager.checkIsForceUpdate() then
        MainModule.instance:changeShowMainTask(-1, MainModule.task_updateListerner, "task_updateListerner back")
      else
        StatisticsManager.ins:onEvent(StatisticsCommonConst.CLIENT_UPDATE)
      end
    end
    )
    updateManager:onUpdateReady(function()
      LogsManager.echo("新版本下载完毕", "costTime :", Client.instance.miniserverTime - timer)
      if not VersionManager.checkIsForceUpdate() then
        LogsManager.warn("本次是非强更，无需重启客户端,localversion:", PackConfigManager.ins.platform.vms_version, "vmsversion:", VersionManager.vmsVersion)
        return
      end
      LogsManager.echo("新版本下载完毕")
      WindowManager.ShowTip(TranslateFunc.instance:getTranslate("#versionUpdateReady"))
      TimerManager.instance:setTimeout(function()
        Global.isGameDestory = true
        updateManager:applyUpdate()
      end
      , nil, 300)
    end
    )
    updateManager:onUpdateFailed(function()
      if thisObj._hasCheckUpdateListener then
        LogsManager.echo("wxgme xd 已经处理过更新检查了--000000000")
        return
      end
      thisObj._hasCheckUpdateListener = true
      LogsManager.echo("新版本下载失败", "costTime :", Laya.timer.currTimer - timer)
      MainModule.instance:changeShowMainTask(-1, MainModule.task_updateListerner, "task_updateListerner back")
    end
    )
  else
    LogsManager.echo('this.getWX().getUpdateManager不支持')
    timeCode and TimerManager.instance:remove(timeCode)
    self:setVersionCheckResult(1)
    if thisObj._hasCheckUpdateListener then
      LogsManager.echo("wxgme xd 已经处理过更新检查了--000000000")
      return
    end
    thisObj._hasCheckUpdateListener = true
    MainModule.instance:changeShowMainTask(-1, MainModule.task_updateListerner, "task_updateListerner back")
  end
end

function WXGamePlatform:setGameFrame()
  if GameConsts.gameFrameRate == 30 then
    WXGamePlatform.super.setGameFrame(self)
    if "function" == type(self:getWX().setPreferredFramesPerSecond) then
      self:getWX():setPreferredFramesPerSecond(30)
    else
      LogsManager.echo("hlx 该平台不支持设置帧率函数")
    end
  end
end

function WXGamePlatform:aldSendEvent(eventId, eventData)
  if eventData == nil then
    eventData={}
  end
  

end

function WXGamePlatform:addOnShowListener()
  local myThis = self
  self.showT = cs.GameUtils.CommonUtil.GetTimeMiniStamp()
  LogsManager.echo('wx_listener 初始化onShow showT：', self.showT)
  if not (UserInfo.isOppo() or UserInfo.isVivo()) then
    self:getWX():onShow(function(res)
      local nowTime = cs.GameUtils.CommonUtil.GetTimeMiniStamp()
      LogsManager.echo('>>OnShow成功回调', nowTime, JSON:stringify(res))
      if not self.isHide or not myThis.hideT then
        if self.listenTime then
          self.mainToListen = self.listenTime - StatisticsManager.mainStartT
          LogsManager.echo("krma. noHide show start " .. StatisticsManager.mainStartT .. " listen " .. self.listenTime .. " mainToListen " .. self.mainToListen .. " now " .. nowTime .. " mainToNow " .. nowTime - StatisticsManager.mainStartT)
        else
          LogsManager.echo("krma. noHide show start " .. StatisticsManager.mainStartT .. " no listen " .. " now " .. nowTime .. " mainToNow " .. nowTime - StatisticsManager.mainStartT)
        end
        StatisticsManager.mainStartT = nowTime
      end
      if res.query then
        myThis.shareLinkParams = res.query
      end
      self.isHide = false
      myThis:onGetFocus()
      myThis:checkShareSucc()
      JumpManager.openJumpListViewById(FullJumpFunc.ID_ONSHOW)
    end
    )
  else
    self:getWX():onShow(function()
      myThis:checkShareSucc()
      myThis:onGetFocus()
    end
    )
  end
  self:getWX():onHide(function(res)
    myThis:onLoseFocus()
  end
  )
end

function WXGamePlatform:startDownloadSubPackage()
  if not GameConsts.isUsePhysics then
    MainModule.instance:changeShowMainTask(-1, MainModule.task_subpackage, "xd wx-loadSubpackage,quick")
    return
  end
  -- [ts2lua]window下标访问可能不正确
  if window["Physics3D"] then
    -- [ts2lua]window下标访问可能不正确
    if window["__physics3D"] then
      -- [ts2lua]Laya3D下标访问可能不正确
      -- [ts2lua]window下标访问可能不正确
      Laya3D["_physics3D"] = window["__physics3D"]
    end
    LogsManager.echo("__已经拥有3D库了表示不会走到这里;")
    MainModule.instance:changeShowMainTask(-1, MainModule.task_subpackage, "xd wx-loadSubpackage,quick")
    return
  end
  if not self._isSubPackage then
    self:initPhysics3D("xd wx-loadSubpackage,no subpackage")
    return
  end
  LogsManager.echo("xd- startDownloadSubPackage")
  local t1 = Client.instance.miniserverTime
  local thisObj = self
  self:getWX():loadSubpackage({name="physics", success=function(res)
    thisObj:initPhysics3D("xd wx-loadSubpackage,costTime:" .. Client.instance.miniserverTime - t1 .. "res:" .. res)
  end
  , fail=function(res)
    LogsManager.echo("___分包下载异常--重新下载")
    WindowManager.setPopupTip(1, TranslateFunc.instance:getTranslate("#subPackageError"), thisObj.startDownloadSubPackage, thisObj)
  end
  , complete=function(res)
    LogsManager.echo("___分包下载complete", res)
  end
  })
end

function WXGamePlatform:getWX()
  -- [ts2lua]window下标访问可能不正确
  return window["wx"]
end

function WXGamePlatform:setUserComeFrom()
  local cacheData = CacheManager.instance:getGlobalCache(StorageCode.storage_firstrun_data)
  if cacheData == "0" then
    try_catch{
      main = function()
        local launchRes = self:getLaunchOptions()
        if launchRes then
          local appId = ""
          -- [ts2lua]launchRes下标访问可能不正确
          -- [ts2lua]launchRes下标访问可能不正确
          -- [ts2lua]launchRes["referrerInfo"]下标访问可能不正确
          if launchRes["referrerInfo"] and launchRes["referrerInfo"]["appId"] then
            -- [ts2lua]launchRes下标访问可能不正确
            -- [ts2lua]launchRes["referrerInfo"]下标访问可能不正确
            appId = "_appId:" .. launchRes["referrerInfo"]["appId"]
          end
          Global.firstRunSystemInfo = {appId=appId, sceneId=launchRes.scene}
          LogsManager.echo("sanmen getLaunchOptionsSync", JSON:stringify(launchRes), "sendStr:", UserInfo.LoginSceneInfo)
          CacheManager.instance:setGlobalCache(StorageCode.storage_firstrun_data, JSON:stringify(Global.firstRunSystemInfo))
        end
      end,
      catch = function(err)
        LogsManager.echo("sanmen getLaunchOptionsSync err")
      end
    }
  else
    try_catch{
      main = function()
        Global.firstRunSystemInfo = JSON:parse(cacheData)
      end,
      catch = function(e)
        Global.firstRunSystemInfo = {}
      end
    }
    LogsManager.echo("sanmen setUserComeFrom", UserInfo.LoginSceneInfo)
  end
  Global.sceneId = Global.firstRunSystemInfo.sceneId
end

function WXGamePlatform:getNetwork()
  if self:getWX().getNetworkType then
    self:getWX():getNetworkType({success=function(res)
      if res and res.networkType then
        DeviceTools.network = res.networkType
      end
    end
    })
  end
end

function WXGamePlatform:showPopTip(title, content, extraData)
  if extraData == nil then
    extraData=nil
  end
  LogsManager.echo("yrc showPopTip:", title, content, extraData)
  if self:getWX().showModal then
    local data = TableUtils.copyOneTable(extraData) or {}
    data.title = title
    data.content = content
    self:getWX():showModal(data)
  end
end

function WXGamePlatform:showFlyTip(title, icon)
  if icon == nil then
    icon="none"
  end
  LogsManager.echo("yrc showFlyTip:", title)
  if self:getWX().showToast then
    self:getWX():showToast({title=title, icon=icon})
  end
end

function WXGamePlatform:loadSubPackage(packageName, callback, thisObj, isShowPop)
  if isShowPop == nil then
    isShowPop=false
  end
  local t1 = Client.instance.miniserverTime
  if not self:getWX().loadSubpackage then
    LogsManager.errorTag(LogsErrorCode.WX_SDK_ERROR, "yrc loadSubPackage 无分包加载接口")
    callback and callback:call(thisObj, false)
    return
  end
  local myThis = self
  local timeCode = 0
  local failFunc = function(res)
    TimerManager.instance:remove(timeCode)
    if not callback then
      return
    end
    LogsManager.echo("yrc loadSubpackage fail packageName:", packageName, "_subPackErrorCount ", myThis._subPackErrorCount, " errRes:", TableUtils.safelyJsonStringfy(res))
    myThis._subPackErrorCount=myThis._subPackErrorCount+1
    if myThis._subPackErrorCount == 1 then
      LogsManager.echo("xd _重试---下载分包", packageName)
      TimerManager.instance:add(myThis.loadSubPackage, myThis, 100, 1, false, {packageName, callback, thisObj, isShowPop})
      callback = nil
    else
      if isShowPop then
        if res == "timeOut" then
          StatisticsExtendManager.onEvent(StatisticsCommonConst.CLIENT_SUBPACK_TIMEOUT, {time=myThis._subPackErrorCount, position=packageName, type=DeviceTools.network})
        else
          StatisticsExtendManager.onEvent(StatisticsCommonConst.CLIENT_SUBPACK_ERROR, {time=myThis._subPackErrorCount, position=packageName, type=DeviceTools.network})
        end
        if callback then
          local tempCallBack = callback
          callback = nil
          WindowManager.setPopupTip(1, TranslateFunc.instance:getTranslate("#error110"), function()
            LogsManager.echo("yrc111 loadSubpackage fail 弹窗重新加载点击确认")
            myThis:loadSubPackage(packageName, tempCallBack, thisObj, true)
          end
          , myThis)
        end
      else
        callback and callback:call(thisObj, false)
      end
    end
  end
  
  timeCode = TimerManager.instance:add(failFunc, self, 10000, 1, false, {"timeOut"})
  self:getWX():loadSubpackage({name=packageName, success=function(res)
    myThis._subPackErrorCount = 0
    LogsManager.echo("yrc loadSubpackage success packageName:", packageName, "   sucRes:", res, "cosTime:", Client.instance.miniserverTime - t1)
    SubPackageManager.setLoadStatus(packageName)
    if callback then
      TimerManager.instance:setTimeout(callback, thisObj, 30, true)
      callback = nil
    end
    TimerManager.instance:remove(timeCode)
  end
  , fail=failFunc, complete=function(res)
    TimerManager.instance:remove(timeCode)
    LogsManager.echo("yrc loadSubpackage complete packageName:", packageName)
  end
  })
end

function WXGamePlatform:openCustomerService(isShowCard)
  if isShowCard == nil then
    isShowCard=false
  end
  if self:getWX().openCustomerServiceConversation then
    self:getWX():openCustomerServiceConversation({showMessageCard=isShowCard, sendMessageTitle="我要领钻石", sendMessageImg="common/main_btn_lingzuan.png", success=function(res)
      LogsManager.echo("yrc111 openCustomerServiceConversation success", res)
      Message.instance:send(MsgCMD.CUSTOMER_BACK)
    end
    , fail=function(res)
      LogsManager.echo("yrc111 openCustomerServiceConversation fail", res)
    end
    , complete=function(res)
      LogsManager.echo("yrc111 openCustomerServiceConversation complete", res)
    end
    })
  end
end

function WXGamePlatform:jumpToMiniProgram(data)
  if KariqiShareManager.checkIsKariquChannel() then
    if self:getWX().navigateToMiniProgram then
      self:getWX():navigateToMiniProgram({appId=data.appId, path=data.path, extraData=data.extraData and data.extraData.ext, success=function(res)
        LogsManager.echo("yrc navigateToMiniProgram success", res)
        JumpManager.sendKariquJumpClickData(data.jumpData)
        if data.extraData then
          data.extraData.callBack and data.extraData.callBack:call(data.extraData.thisObj, data)
        end
        local gameName = ""
        if (data and data.jumpData) and data.jumpData.GameName then
          gameName = data.jumpData.GameName
        end
        local toAppId = ""
        if data and data.appId then
          toAppId = data.appId
        end
        local position = 0
        if (data and data.jumpData) and data.jumpData.Position then
          position = data.jumpData.Position
        end
        StatisticsManager.ins:onEvent(StatisticsCommonConst.JUMP_TO_OTHER_GAME_SUCCESS, {gameName=gameName, from=data.extraData and data.extraData.from, toAppId=toAppId, position=position})
      end
      , fail=function(res)
        LogsManager.echo("yrc navigateToMiniProgram fail", res)
      end
      , complete=function(res)
        LogsManager.echo("yrc navigateToMiniProgram complete", res)
      end
      })
    end
  elseif JumpManager.jumpChannel == JumpConst.JUMP_CHANNEL_ZHISE then
    local jump = AdResponse.changeDataToZhise(data)
    JumpManager.zhiseData:navigate2Mini(jump, UserInfo.channelUserId, function()
      
    end
    , function()
      
    end
    )
  else
    if self:getWX().navigateToMiniProgram then
      self:getWX():navigateToMiniProgram({appId=data.appId, path=data.path, extraData=data.extraData and data.extraData.ext, success=function(res)
        LogsManager.echo("yrc navigateToMiniProgram success", res)
        if data.extraData then
          data.extraData.callBack and data.extraData.callBack:call(data.extraData.thisObj, data.appId)
        end
        local gameName = ""
        if (data and data.jumpData) and data.jumpData.GameName then
          gameName = data.jumpData.GameName
        end
        local toAppId = ""
        if data and data.appId then
          toAppId = data.appId
        end
        local position = 0
        if (data and data.jumpData) and data.jumpData.Position then
          position = data.jumpData.Position
        end
        StatisticsManager.ins:onEvent(StatisticsCommonConst.JUMP_TO_OTHER_GAME_SUCCESS, {gameName=gameName, from=data.extraData and data.extraData.from, toAppId=toAppId, position=position})
        JumpManager.removeJumpedApp(toAppId)
      end
      , fail=function(res)
        LogsManager.echo("yrc navigateToMiniProgram fail", res)
        JumpManager.showDrawerView(data.extraData and data.extraData.from)
        if data.extraData and data.extraData.failCall then
          data.extraData.failCall and data.extraData.failCall:call(data.extraData.thisObj, data)
        end
      end
      , complete=function(res)
        LogsManager.echo("yrc navigateToMiniProgram complete", res)
      end
      })
    end
  end
end

function WXGamePlatform:setUseRankInfo(data)
  if data == nil then
    data={}
  end
  if self:getWX().setUserCloudStorage then
    self:getWX():setUserCloudStorage({KVDataList=data, success=function(res)
      LogsManager.echo('setUserCloudStorage>>成功回调', JSON:stringify(res))
    end
    , fail=function(err)
      LogsManager.echo('setUserCloudStorage>>失败回调', JSON:stringify(err))
    end
    })
  else
    LogsManager.errorTag(nil, "没有找到setUserCloudStorage这个接口")
  end
end

function WXGamePlatform:isFromFavourite()
  if Global.currentSceneId ~= "1001" then
    return false
  end
  return true
end

function WXGamePlatform:turnDataToShareQuery(data)
  local str = ""
  if type(data) == "string" then
    return data
  end
  for i in pairs(data) do
    if not str then
      str = i .. "=" .. data[i+1]
    else
      str = str .. "&" .. i .. "=" .. data[i+1]
    end
  end
  return str
end

function WXGamePlatform:showGameClubBtn(posX, posY, btnW, btnH)
  if not self:getWX().createGameClubButton then
    return
  end
  if not self._gameClubBtn then
    local left = posX / ScreenAdapterTools.width * Global.windowWidth
    local top = posY / ScreenAdapterTools.height * Global.windowHeight
    local width = btnW / ScreenAdapterTools.width * Global.windowWidth
    local height = btnH / ScreenAdapterTools.height * Global.windowHeight
    local btn = self:getWX():createGameClubButton({type="image", style={left=left, top=top, width=width, height=height}, icon="light"})
    self._gameClubBtn = btn
  end
  if self._gameClubBtn then
    self._gameClubBtn:show()
  end
end

function WXGamePlatform:hideGameClubBtn()
  if self._gameClubBtn then
    self._gameClubBtn:hide()
  end
end

function WXGamePlatform:destroyGameClubBtn()
  if self._gameClubBtn then
    self._gameClubBtn:destroy()
  end
end

function WXGamePlatform:requestSubscribeMessage(tmpIds, successCall, failCall, completeCall)
  if 'function' == type(self:getWX().requestSubscribeMessage) then
    local sendMessage = {}
    -- [ts2lua]sendMessage下标访问可能不正确
    sendMessage['tmplIds'] = tmpIds
    -- [ts2lua]sendMessage下标访问可能不正确
    sendMessage['success'] = successCall
    -- [ts2lua]sendMessage下标访问可能不正确
    sendMessage['fail'] = failCall
    -- [ts2lua]sendMessage下标访问可能不正确
    sendMessage['complete'] = completeCall
    self:getWX():requestSubscribeMessage(sendMessage)
  end
end
