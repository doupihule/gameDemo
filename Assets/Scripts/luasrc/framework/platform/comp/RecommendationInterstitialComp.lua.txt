require("framework/manager/LogsManager")
require("framework/platform/comp/TopViewAutoComp")
require("game/sys/consts/ChannelConst")
require("framework/common/UserInfo")
require("framework/common/GameSwitch")
require("framework/common/Message")
require("framework/event/WindowEvent")
require("utils/GameUtils")

RecommendationInterstitialComp = class('RecommendationInterstitialComp',TopViewAutoComp)

function RecommendationInterstitialComp.__getters.interstitialId()
  if not RecommendationInterstitialComp._interstitialId then
    if ChannelConst.getChannelConst(UserInfo.platformId).recommendPortalId then
      RecommendationInterstitialComp._interstitialId = ChannelConst.getChannelConst(UserInfo.platformId).recommendPortalId
    end
    if GameSwitch.getSwitchState(GameSwitch.RECOMMEN_PORTAL_ID) then
      RecommendationInterstitialComp._interstitialId = GameSwitch.getSwitchState(GameSwitch.RECOMMEN_PORTAL_ID)
    end
  end
  return RecommendationInterstitialComp._interstitialId
end

function RecommendationInterstitialComp.register()
  LogsManager.echo("hlx 推荐插屏 InterstitialAd 预加载")
  if not RecommendationInterstitialComp.canUse() then
    return
  end
  if not RecommendationInterstitialComp._instance then
    RecommendationInterstitialComp._instance = RecommendationInterstitialComp(nil)
  end
  if not RecommendationInterstitialComp._instance._interstitialAd then
    RecommendationInterstitialComp._instance:registerInterstitialAd()
  end
end

function RecommendationInterstitialComp.create(parent, onErrorCallback, onCloseCallback, callbackObj)
  if onErrorCallback == nil then
    onErrorCallback=nil
  end
  if onCloseCallback == nil then
    onCloseCallback=nil
  end
  if callbackObj == nil then
    callbackObj=nil
  end
  -- [ts2lua]lua中0和空字符串也是true，此处parent and parent.windowName需要确认
  LogsManager.echo("hlx 推荐插屏 RecommendationInterstitialComp create start:", (parent and parent.windowName and {GameUtils.decryptStr(parent.windowName)} or {nil})[1])
  if not RecommendationInterstitialComp.canUse() then
    onErrorCallback and onErrorCallback:call(RecommendationInterstitialComp)
    return
  end
  if not RecommendationInterstitialComp._instance then
    RecommendationInterstitialComp._instance = RecommendationInterstitialComp(parent, onErrorCallback, onCloseCallback, callbackObj)
  else
    RecommendationInterstitialComp._instance:updateInfo(parent, onErrorCallback, onCloseCallback, callbackObj)
    Message.instance:add(WindowEvent.WINDOW_EVENT_SWITCHUIFIN, RecommendationInterstitialComp._instance)
  end
end

function RecommendationInterstitialComp:ctor(parent, onErrorCallback, onCloseCallback, callbackObj)
  if onErrorCallback == nil then
    onErrorCallback=nil
  end
  if onCloseCallback == nil then
    onCloseCallback=nil
  end
  if callbackObj == nil then
    callbackObj=nil
  end
  self:superCall('ctor')
  self._loadSuccess = false;
  self._hasError = false;
  self:updateInfo(parent, onErrorCallback, onCloseCallback, callbackObj)
end

function RecommendationInterstitialComp:updateInfo(parent, onErrorCallback, onCloseCallback, callbackObj)
  if onErrorCallback == nil then
    onErrorCallback=nil
  end
  if onCloseCallback == nil then
    onCloseCallback=nil
  end
  if callbackObj == nil then
    callbackObj=nil
  end
  self._onErrorCallback = onErrorCallback
  self._onCloseCallback = onCloseCallback
  -- [ts2lua]lua中0和空字符串也是true，此处parent and parent.windowName需要确认
  self._parentName = (parent and parent.windowName and {parent.windowName} or {nil})[1]
  self._callbackObj = callbackObj
  self._hideType = TopViewAutoComp.HIDE_TYPE_DESTROY
  self:_checkUIState(true)
end

function RecommendationInterstitialComp:registerInterstitialAd()
  LogsManager.echo('hlx 推荐插屏 InterstitialAd registerInterstitialAd')
  self._loadSuccess = false
  if not RecommendationInterstitialComp.canUse() then
    return
  end
  local wx = UserInfo.platform:getWX()
  local thisObj = self
  self._interstitialAd = wx:createGamePortal({adUnitId=RecommendationInterstitialComp.interstitialId})
  if self._interstitialAd then
    local interstitialAd = self._interstitialAd
    self._hasShow = false
    interstitialAd:onError(function(err)
      LogsManager.echo('hlx 推荐插屏 InterstitialAd: onError', JSON:stringify(err))
      thisObj._loadSuccess = false
      thisObj._hasError = true
      thisObj:_checkUIState(true)
    end
    )
    interstitialAd:onLoad(function()
      LogsManager.echo('hlx 推荐插屏 InterstitialAd: onLoad success')
      thisObj._loadSuccess = true
      thisObj._hasError = false
      thisObj:_checkUIState(true)
    end
    )
    interstitialAd:onClose(function()
      LogsManager.echo("hlx InterstitialAd 插屏广告 onClose")
      thisObj._onCloseCallback and thisObj._onCloseCallback:call(thisObj._callbackObj)
      thisObj:destroy()
    end
    )
  else
    self._hasError = true
  end
end

function RecommendationInterstitialComp:_doCallBack()
  LogsManager.echo('hlx 推荐插屏 InterstitialAd: _doErrorCallBack')
  local tempFunc = self._onErrorCallback
  local tempObj = self._callbackObj
  self._onErrorCallback = nil
  self._onCloseCallback = nil
  self._callbackObj = nil
  self._hasShow = true
  tempFunc and tempFunc:call(tempObj)
end

function RecommendationInterstitialComp.canUse()
  if UserInfo.isWX() then
    if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_INTERSTITIALAD) then
      LogsManager.warn("hlx 推荐插屏 InterstitialAd canNotUse:开关关闭 SWITCH_DISABLE_INTERSTITIALAD")
      return false
    end
    if not RecommendationInterstitialComp.interstitialId then
      LogsManager.echo("hlx 推荐插屏 InterstitialAd bannerId 未配置，不初始化banner")
      return false
    end
    if not UserInfo.platform:getSystemInfo().SDKVersion then
      LogsManager.echo('hlx 推荐插屏 InterstitialAd not support：取不到SDKVersion')
      return false
    end
    if not UserInfo.platform:getWX().createGamePortal then
      LogsManager.echo('hlx 推荐插屏 InterstitialAd createGamePortal 方法不存在：不初始化banner')
      return false
    end
    local currentVersion = UserInfo.platform:getSystemInfo().SDKVersion
    if UserInfo.platform:compareVersion(currentVersion, '2.7.5') >= 0 then
      return true
    end
  end
  LogsManager.echo('hlx recommend not support')
  return false
end

function RecommendationInterstitialComp:destroy()
  LogsManager.echo("hlx 推荐插屏 InterstitialAd destroy:", GameUtils.decryptStr(self._parentName))
  self:superCall('destroy')
  self._onErrorCallback = nil
  self._onCloseCallback = nil
  self._callbackObj = nil
  if self._interstitialAd then
    self:reloadInter()
  end
end

function RecommendationInterstitialComp:reloadInter()
  if self._hasError then
    if type(self._interstitialAd.destroy) == "function" then
      self._interstitialAd:destroy()
    end
    self._interstitialAd = nil
    self:registerInterstitialAd()
  end
end

function RecommendationInterstitialComp:show(force)
  if force == nil then
    force=false
  end
  if self._lastParentName ~= self._parentName then
    if self._status == TopViewAutoComp.STATUS_SHOW then
      self:reloadInter()
    end
  else
    if not force and self._status == TopViewAutoComp.STATUS_SHOW then
      return
    end
  end
  self._status = TopViewAutoComp.STATUS_SHOW
  self._lastParentName = self._parentName
  self:_changeStatus()
end

function RecommendationInterstitialComp:_compShow()
  LogsManager.echo("hlx 推荐插屏 InterstitialAd _compShow", Laya.timer.currTimer)
  if not self._interstitialAd then
    self:registerInterstitialAd()
  end
  if self._hasError then
    LogsManager.echo("hlx 推荐插屏 InterstitialAd _compShow：InterstitialAd加载存在error直接执行失败回调")
    self:_doCallBack()
    return
  end
  if self._interstitialAd and self._loadSuccess then
    self._hasShow = true
    LogsManager.echo("hlx 推荐插屏 InterstitialAd show", Laya.timer.currTimer)
    self._interstitialAd:show():tsvar_then(function()
      LogsManager.echo("hlx 推荐插屏 InterstitialAd广告组件show success", Laya.timer.currTimer)
    end
    ):catch(function(err)
      LogsManager.echo("hlx 推荐插屏 InterstitialAd广告组件show error", err)
      self:_doCallBack()
    end
    )
  end
end
