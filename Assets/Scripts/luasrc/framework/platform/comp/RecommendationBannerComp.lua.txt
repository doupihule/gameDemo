require("framework/manager/LogsManager")
require("game/sys/manager/StatisticsManager")
require("framework/platform/comp/TopViewAutoComp")
require("game/sys/consts/ChannelConst")
require("framework/common/UserInfo")
require("framework/common/GameSwitch")
require("framework/common/Message")
require("framework/event/WindowEvent")
require("framework/consts/StatisticsCommonConst")
require("utils/GameUtils")

RecommendationBannerComp = class('RecommendationBannerComp',TopViewAutoComp)

function RecommendationBannerComp.__getters.recommendBannerId()
  if not RecommendationBannerComp._bannerId then
    if ChannelConst.getChannelConst(UserInfo.platformId).recommendBannerId then
      RecommendationBannerComp._bannerId = ChannelConst.getChannelConst(UserInfo.platformId).recommendBannerId
    end
    if GameSwitch.getSwitchState(GameSwitch.RECOMMEN_BANNER_ID) then
      RecommendationBannerComp._bannerId = GameSwitch.getSwitchState(GameSwitch.RECOMMEN_BANNER_ID)
    end
  end
  return RecommendationBannerComp._bannerId
end

function RecommendationBannerComp.register()
  LogsManager.echo("hlx recommend banner 预加载")
  if not RecommendationBannerComp.canUse() then
    return
  end
  if not RecommendationBannerComp._instance then
    RecommendationBannerComp._instance = RecommendationBannerComp(nil, nil, nil)
  end
  if not RecommendationBannerComp._instance._bannerAd then
    RecommendationBannerComp._instance:registerBanner()
  end
end

function RecommendationBannerComp.create(parent, onErrorCallback, callbackObj, hideType)
  if onErrorCallback == nil then
    onErrorCallback=nil
  end
  if callbackObj == nil then
    callbackObj=nil
  end
  if hideType == nil then
    hideType=TopViewAutoComp.HIDE_TYPE_DESTROY
  end
  -- [ts2lua]lua中0和空字符串也是true，此处parent and parent.windowName需要确认
  LogsManager.echo("recommendBannerComp create start:", (parent and parent.windowName and {GameUtils.decryptStr(parent.windowName)} or {nil})[1])
  if not RecommendationBannerComp.canUse() then
    onErrorCallback and onErrorCallback:call(RecommendationBannerComp)
    return
  end
  if not RecommendationBannerComp._instance then
    RecommendationBannerComp._instance = RecommendationBannerComp(parent, onErrorCallback, callbackObj, hideType)
  else
    RecommendationBannerComp._instance:updateInfo(parent, onErrorCallback, callbackObj, hideType)
    Message.instance:add(WindowEvent.WINDOW_EVENT_SWITCHUIFIN, RecommendationBannerComp._instance)
  end
end

function RecommendationBannerComp:ctor(parent, onErrorCallback, callbackObj, hideType)
  if onErrorCallback == nil then
    onErrorCallback=nil
  end
  if callbackObj == nil then
    callbackObj=nil
  end
  if hideType == nil then
    hideType=TopViewAutoComp.HIDE_TYPE_DESTROY
  end
  self:superCall('ctor')
  self._loadSuccess = false;
  self._hasError = false;
  self:updateInfo(parent, onErrorCallback, callbackObj, hideType)
end

function RecommendationBannerComp:updateInfo(parent, onErrorCallback, callbackObj, hideType)
  if onErrorCallback == nil then
    onErrorCallback=nil
  end
  if callbackObj == nil then
    callbackObj=nil
  end
  if hideType == nil then
    hideType=TopViewAutoComp.HIDE_TYPE_DESTROY
  end
  self._onErrorCallback = onErrorCallback
  -- [ts2lua]lua中0和空字符串也是true，此处parent and parent.windowName需要确认
  self._parentName = (parent and parent.windowName and {parent.windowName} or {nil})[1]
  self._callbackObj = callbackObj
  self._hideType = hideType
  self:_checkUIState(true)
end

function RecommendationBannerComp:registerBanner(offest)
  if offest == nil then
    offest=-0.1
  end
  local thisObj = self
  LogsManager.echo("hlx register RecommendBanner")
  StatisticsManager.ins:onEvent(StatisticsCommonConst.RECOMMEND_BANNER_PULLNUM)
  local wx = UserInfo.platform:getWX()
  if self._bannerAd then
    LogsManager.warn("hlx banner 实例已经创建，无需重复注册，请检查代码逻辑是否存在异常")
    return
  end
  if not wx.createGameBanner then
    LogsManager.warn("noGameBanner", "没有Gamebanner组件")
    self:_doBannerCallBack()
    StatisticsManager.ins:onEvent(StatisticsCommonConst.RECOMMEND_BANNER_PULLFAILED)
    return
  end
  local systemInfo = UserInfo.platform:getSystemInfo()
  local w = systemInfo.windowWidth
  local h = systemInfo.windowHeight
  local bannerWidth = w
  local left = w - bannerWidth / 2
  self._bannerAd = wx:createGameBanner({adUnitId=RecommendationBannerComp.recommendBannerId, style={left=left, top=76, width=bannerWidth}})
  if self._bannerAd then
    self._isShowBanner = false
    self._loadSuccess = false
    local bannerAd = self._bannerAd
    bannerAd:onError(function(err)
      LogsManager.echo("hlx recommend bannerAd.onError----------------------", JSON:stringify(err))
      StatisticsManager.ins:onEvent(StatisticsCommonConst.RECOMMEND_BANNER_PULLFAILED)
      self._hasError = true
      self._loadSuccess = false
      self:_checkUIState(true)
    end
    )
    bannerAd:onLoad(function()
      self._hasError = false
      self._loadSuccess = true
      LogsManager.echo("hlx recommend bannerAd.onLoad:")
      StatisticsManager.ins:onEvent(StatisticsCommonConst.RECOMMEND_BANNER_PULLSUCCESS)
      bannerAd.style.left = w - bannerAd.style.width / 2
      bannerAd.style.top = h - bannerAd.style.height + offest
      self:_checkUIState(true)
    end
    )
    bannerAd:onResize(function(size)
      LogsManager.echo("hlx recommend bannerAd.onResize:", size.width, size.height)
      if size.width ~= 0 then
        bannerAd.style.left = w - size.width / 2
        bannerAd.style.top = h - size.height + offest
      end
    end
    )
  end
end

function RecommendationBannerComp:_doBannerCallBack()
  LogsManager.echo("hlx _doRecommendBannerCallBack _onErrorCallback")
  local tempFunc = self._onErrorCallback
  local tempObj = self._callbackObj
  self._loadSuccess = false
  self._isShowBanner = true
  self._hasError = false
  tempFunc and tempFunc:call(tempObj)
end

function RecommendationBannerComp.canUse()
  if UserInfo.isWX() then
    if not RecommendationBannerComp.recommendBannerId then
      LogsManager.echo("hlx recommend bannerId 未配置，不初始化banner")
      return false
    end
    if not UserInfo.platform:getSystemInfo().SDKVersion then
      LogsManager.echo('hlx recommend not support：取不到SDKVersion')
      return false
    end
    local currentVersion = UserInfo.platform:getSystemInfo().SDKVersion
    if UserInfo.platform:compareVersion(currentVersion, '2.7.5') >= 0 then
      return true
    end
    if not UserInfo.platform:getWX().createGameBanner then
      LogsManager.echo('hlx recommend createGameBanner 方法不存在：不初始化banner')
      return false
    end
  end
  LogsManager.echo('hlx recommend not support')
  return false
end

function RecommendationBannerComp:destroy()
  LogsManager.echo("hlx recommend banner destroy:", GameUtils.decryptStr(self._parentName))
  self:superCall('destroy')
  self._onErrorCallback = nil
  self._callbackObj = nil
  if self._bannerAd then
    self:reLoadBanner()
  end
end

function RecommendationBannerComp:reLoadBanner()
  if self._bannerAd then
    self._bannerAd:hide()
  end
  if self._isShowBanner or self._hasError then
    LogsManager.echo("hlx recommend banner reload, ad destory: _isShowBanner:", self._isShowBanner, " _hasError:", self._hasError)
    if type(self._bannerAd.destroy) == "function" then
      self._bannerAd:destroy()
    end
    self._bannerAd = nil
    self:registerBanner()
  end
end

function RecommendationBannerComp:show(force)
  if force == nil then
    force=false
  end
  if self._lastParentName ~= self._parentName then
    if self._status == TopViewAutoComp.STATUS_SHOW and self._hideType == TopViewAutoComp.HIDE_TYPE_DESTROY then
      self:reLoadBanner()
    end
  else
    if not force and self._status == TopViewAutoComp.STATUS_SHOW then
      return
    end
  end
  self._status = TopViewAutoComp.STATUS_SHOW
  self._lastParentName = self._parentName
  self:_changeStatus()
end

function RecommendationBannerComp:_compShow()
  LogsManager.echo("hlx recommend banner _compShow", Laya.timer.currTimer)
  if not self._bannerAd then
    self:registerBanner()
  end
  if self._hasError then
    LogsManager.echo("hlx banner _compShow：banner加载存在error直接执行失败回调")
    self:_doBannerCallBack()
    return
  end
  if self._bannerAd and self._loadSuccess then
    self._isShowBanner = true
    LogsManager.echo("hlx recommend banner show", Laya.timer.currTimer)
    self._bannerAd:show():tsvar_then(function()
      LogsManager.echo("hlx 推荐广告组件show success", Laya.timer.currTimer)
    end
    ):catch(function(err)
      LogsManager.echo("hlx 推荐广告组件show error", err)
      self:_doBannerCallBack()
    end
    )
    StatisticsManager.ins:onEvent(StatisticsCommonConst.RECOMMEND_BANNER_EXPOSURENUM)
  else
    LogsManager.echo("hlx redommend banner comp show 没有达到条件：loadSuccess ", self._loadSuccess)
  end
end

function RecommendationBannerComp:_compHide()
  self:superCall('destroy')
  self._onErrorCallback = nil
  self._callbackObj = nil
  if self._hasError then
    if type(self._bannerAd.destroy) == "function" then
      self._bannerAd:destroy()
    end
    self._bannerAd = nil
    self:registerBanner()
  elseif self._bannerAd and self._isShowBanner then
    self._isShowBanner = false
    self._bannerAd:hide()
  end
end
