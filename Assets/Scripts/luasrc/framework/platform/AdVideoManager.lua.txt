


















AdVideoManager = class('AdVideoManager')
function AdVideoManager:ctor(...)
  self.ttInterstitialAdLastShowTime = Client.getInstance().miniserverTime;
  self._isInitAdv = true;
end
AdVideoManager.InterstitialAd_NONE = 1;
AdVideoManager.InterstitialAd_TYPE_AD_ORIGINAL = 2;
AdVideoManager.InterstitialAd_TYPE_ORIGINAL_AD = 3;
AdVideoManager.InterstitialAd_TYPE_AD = 4;
AdVideoManager.InterstitialAd_TYPE_ORIGINAL = 5;
AdVideoManager.TYPE_ORIGINAL_INTERSTITIAL = 'INTERSTITIAL';
AdVideoManager.TYPE_ORIGINAL_ICON = 'ICON';
function AdVideoManager.getInstance()
  if not AdVideoManager._instance then
    AdVideoManager._instance = AdVideoManager.new()
  end
  return AdVideoManager._instance
end

function AdVideoManager:registerInterstitialAd()
  InterstitialAdComp.register()
  RecommendationInterstitialComp.register()
end

function AdVideoManager:showInterstitialAd(parent, onErrorCallback, onCloseCallback, callbackObj)
  
end

function AdVideoManager:showInterstitialAdById(id, parent, onErrorCallback, onCloseCallback, thisObj)
  
end

function AdVideoManager:isInterstitialLimit()
  
end

function AdVideoManager:updateInterstitialLimit()
  
end

function AdVideoManager:removeDelayInterstitialAd()
end

function AdVideoManager:registerOrigionIconAdv(callBack, thisObj, params)
end

function AdVideoManager:registerOrigionInterstitialAdv(callBack, thisObj, params)
end

function AdVideoManager:showOriginalAdView(onErrorCallback, callbackObj, params)
end

function AdVideoManager:reportClickOriginal(type, id)
end

function AdVideoManager:reportShowOriginal(type, id)
end

function AdVideoManager:canBtnMove()
  
end

function AdVideoManager:bindBtnMove(btnObj, btnCallBack, viewObj, moveX, moveY)
  
end
