









































GamePlatform = class('GamePlatform')

function GamePlatform:aldSendEvent(eventId, eventData)
  if eventData == nil then
    eventData={}
  end
  

end

function GamePlatform:ctor()
  self.appId = "";
  self.userInfoData = nil;
  self.channelUserId = "";
  self._isSubPackage = false;
  self._isPhotosAlbum = false;
  self._shareTime = 0;
  self._speShareTime = 0;
  self._isLastSpeShare = false;
  self._isShare = false;
  self._videoLoaded = false;
  self.curReqGlobalCount = 0;
  self.maxReqGlobalCount = 5;
  self.isOutTime = false;
  self.versionCheckResult = 1;
  self._leftWaitTask = 2;
  self.inviteBy = "";
  self.shareInfo = "";
  self.isPlayVideo = false;
  self.isDoWxThings = false;
  self.isHaveRecord = false;
  self.loadAdvFailed = true;
  self.advHasShow = false;
  self.isHide = false;
  self.videoState = 0;
  self.clientInfoReqCount = 0;
  self.global_url_review = '';
  self._reloginCount = 0;
  self.RECORD_TYPE_AUTO = 1;
  self.RECORD_TYPE_MANUAL = 2;
  self._canShareVideoRt = nil;
  self:setGameFrame()
  if ChannelConst.getChannelConst(UserInfo.platformId).appId then
    self.appId = ChannelConst.getChannelConst(UserInfo.platformId).appId
  end
  if ChannelConst.getChannelConst(UserInfo.platformId).adVideoId then
    self._videoId = ChannelConst.getChannelConst(UserInfo.platformId).adVideoId
  end
  if GameSwitch.getSwitchState(GameSwitch.VIDEO_ID) then
    self._videoId = GameSwitch.getSwitchState(GameSwitch.VIDEO_ID)
  end
  if ChannelConst.getChannelConst(UserInfo.platformId).appSid then
    self._appSid = ChannelConst.getChannelConst(UserInfo.platformId).appSid
  end
  if UserInfo.isSystemNative() then
    local adapterData = {width=ScreenAdapterTools.width, height=ScreenAdapterTools.height, designWidth=ScreenAdapterTools.designWidth, designHeight=ScreenAdapterTools.designHeight, scale=ScreenAdapterTools.height / ScreenAdapterTools.stageHeight}
    NativeBridge.instance:callNative(JSToNativeEvent.VIEWADAPTER_INIT, adapterData, true)
  end
end

function GamePlatform:initPlatform() end
function GamePlatform:reqServerList(callBack, thisObject)
  local params = {method=251, params={loginToken=self.loginToken}}
  local url = Global.global_url .. '&ver=' .. Global.version
  HttpMessage.instance:send(url, JSON:stringify(params), function(data)
    local secList = data[0+1].result.data.secList
    local len = #secList
    local pData = nil
    local i = 0
    repeat
      local secData = data[0+1].result.data.secList[i+1]
      if secData.mainSec == 1 then
        pData = data[0+1].result.data.secList[i+1]
        break
      end
      i=i+1
    until not(i < len)
    PackConfigManager.ins.platform = pData
    callBack and callBack:call(thisObject, data[0+1].result.data)
  end
  , self, "post")
end

function GamePlatform:reqVMS()
  if Global.checkUserCloudStorage() then
    Global.global_url = PackConfigManager.ins.platform.cloud_url
    Global.version = PackConfigManager.ins.platform.vms_version
    self:getWxInfo()
    return
  end
  if PackageConfig.configData then
    self:checkVersion()
  else
    local url = PackConfigManager.ins.platform.vms_url .. '?mod=vms&r=gameApi/getOnlineVersion&upgrade_path=' .. PackConfigManager.ins.platform.upgrade_path
    HttpMessage.instance:send(url, nil, self.checkVMSBack, self)
  end
end

function GamePlatform:checkVMSBack(result)
  local version = result.online_version
  LogsManager.echo("online_version:", version, "local vms_version", PackConfigManager.ins.platform.vms_version)
  LogsManager.echo("client_version:", Global.client_version)
  version = Math:max(version, PackConfigManager.ins.platform.vms_version)
  PackConfigManager.ins.platform.vms_version = version
  self:checkVersion()
end

function GamePlatform:checkVersion()
  local url = PackConfigManager.ins.platform.vms_url .. '?mod=vms&r=gameApi/checkVersion&ver=' .. PackConfigManager.ins.platform.vms_version
  HttpMessage.instance:send(url, nil, self.checkVersionCallback, self)
end

function GamePlatform:checkVersionCallback(result)
  LogsManager.echo(nil == undefined, "___null undefined")
  if (result.s == nil or not result.global_server_url) or not result.v.version then
    LogsManager.errorTag(nil, JSON:stringify(result))
    ErrCodeManager.ins:setErr(ErrorCode.sys_error)
    return
  end
  if result.global_server_url:find("http://") > -1 or result.global_server_url:find("https://") > -1 then
    Global.global_url = result.global_server_url
  else
    Global.global_url = "http://" .. result.global_server_url
  end
  if result.GameStatic then
    GameSwitch.coverServerSwitchMap(result.GameStatic)
  end
  Global.resource_url = result.resource_url_root .. "/" .. UserInfo.platformId .. "/"
  Global.nocdn_resource_url = result.nocdn_resource_url_root .. "/"
  VersionManager.versionStatus = result.s
  VersionManager.vmsVersion = result.v.version
  if result.s == VersionManager.VERSION_STATUS_FORCE_UPDATE then
    Global.version = result.v.version
  else
    Global.version = PackConfigManager.ins.platform.vms_version
  end
  LogsManager.echo("Global.version:", Global.version, "localVersion:", PackConfigManager.ins.platform.vms_version, "updateSatus:", result.s)
  self:addUpdateListener()
  KariqiShareManager.kariquLogin()
end

function GamePlatform:addUpdateListener()
  self:getNetwork()
  MainModule.instance:checkSystem()
end

function GamePlatform:reqGlobal(params, isInit)
  if isInit == nil then
    isInit=false
  end
  self._reloginCount=self._reloginCount+1
  local url = Global.global_url .. '&ver=' .. Global.version
  self._globalParams = params
  -- [ts2lua]params下标访问可能不正确
  if not params["params"] then
    -- [ts2lua]params下标访问可能不正确
    params["params"] = {}
  end
  local onHttpErrorBack = function(data)
    if Global.checkUserCloudStorage() then
      if self._reLoginBackParams then
        WindowManager.setPopupTip(1, TranslateFunc.instance:getTranslate("tid_net_error"), self.getWxInfo, self)
      else
        self:doSingleErrorBack()
      end
    else
      ErrCodeManager.ins:setErr(ErrorCode.sys_error)
    end
  end
  
  local httpBackFunc = function(data)
    if (not data or type(data) == "string") or not data[0+1] then
      onHttpErrorBack(data)
      return
    end
    local currPlatform = data[0+1]
    data = currPlatform.result.data
    if self._reLoginBackParams then
      self:onReLoginBack(data)
      return
    end
    LogsManager.echo('=====================ald相关')
    if UserInfo.isWX() and data.channelUserId then
      
    end
    if data.sceneId then
      Global.sceneId = data.sceneId
    end
    if not currPlatform.result then
      onHttpErrorBack(data)
      return
    end
    if data.adParam then
      if data.adParam.appId then
        self.appId = data.adParam.appId
      end
      if data.adParam.adUnitId then
        self._videoId = data.adParam.adUnitId
      end
      if data.adParam.adBannerId then
        BannerComp._bannerId = data.adParam.adBannerId
      end
      if data.adParam.adInterstitialId then
        InterstitialAdComp._interstitialId = data.adParam.adInterstitialId
      end
    end
    self.loginToken = data.loginToken
    if Global.checkUserCloudStorage() then
      GameHttpControler.instance.loginToken = data.loginToken
      self:doSingleGlobalBack(currPlatform.result.data)
      return
    end
    -- [ts2lua]currPlatform.result.data下标访问可能不正确
    if currPlatform.result.data["isNewAccount"] then
      UserInfo.isNewAccount = true
    end
    if UserInfo.isWX() then
      UserInfo.wxVersionType = data.version_type
    end
    local secList = data.secList
    local len = #secList
    local pData = nil
    local i = 0
    repeat
      local secData = secList[i+1]
      if secData.mainSec == 1 then
        pData = secList[i+1]
        break
      end
      i=i+1
    until not(i < len)
    if not pData then
      LogsManager.errorTag("globalServerError", "global请求异常")
      WindowManager.setPopupTip(1, TranslateFunc.instance:getTranslate("#tid_net_error"), self.onGlobalError, self)
      return
    end
    PackConfigManager.ins.platform = pData
    self:getLoginResult()
  end
  
  local webParams = {}
  if Global.checkUserCloudStorage() then
    url = Global.global_url
    params.params.game = GameConsts.gameCode
    params.params.platform = PackConfigManager.ins.platform.platform
    params.params.version = Global.version
    webParams.errorCall = onHttpErrorBack
  end
  -- [ts2lua]params下标访问可能不正确
  -- [ts2lua]params["params"]下标访问可能不正确
  params["params"]["deviceId"] = Global.deviceId
  HttpMessage.instance:send(url, params, httpBackFunc, self, "post", webParams)
end

function GamePlatform:onReLoginBack(data)
  GameHttpControler.instance.loginToken = data and data.loginToken
  LogsManager.echo("data.loginToken", data.loginToken)
  local params = self._reLoginBackParams
  self._reLoginBackParams = nil
  params.callBack:call(params.thisObj, data)
end

function GamePlatform:onGlobalError()
  self:reqGlobal(self._globalParams)
end

function GamePlatform:getLoginResult() end
function GamePlatform:sendKakuraInit()
  if Global.checkUserCloudStorage() then
    if self.platformUserInfo then
      local userData = UserModel.instance:getData()
      if self.platformUserInfo.name then
        userData.name = self.platformUserInfo.name
        userData.userInfo = self.platformUserInfo
        UserInfo.userSex = self.platformUserInfo.sex
      end
    end
    return
  end
  local myThis = self
  Client.instance:sendInit(myThis.loginToken, myThis.platformUserInfo, MainModule.instance.loginResult, MainModule.instance, myThis.inviteBy, myThis.shareInfo)
end

function GamePlatform:reRequestGlobal(callBack, thisObj)
  if callBack == nil then
    callBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if callBack then
    self._reLoginBackParams = {callBack=callBack, thisObj=thisObj}
  end
  self:getWxInfo()
end

function GamePlatform:doSingleErrorBack()
  if self._reloginCount == 1 then
    LogsManager.echo("第一次登入失败尝试重新登入")
    self:getWxInfo()
    return
  end
  self:doSingleGlobalBack({sendTime=0, uid="nologin"}, true)
end

function GamePlatform:doSingleGlobalBack(data, isError)
  if isError == nil then
    isError=false
  end
  if data.switch then
    GameSwitch.coverServerSwitchMap(data.switch)
    if data.switch.CLOUD_URL and (UserInfo.platform.global_url_review == "" or UserInfo.platform.global_url_review ~= data.switch.CLOUD_URL) then
      Global.global_url = data.switch.CLOUD_URL
      UserInfo.platform.global_url_review = Global.global_url
      self:reqGlobal(self._globalParams)
      return
    end
    if data.switch.FORCE_UPDATE then
      VersionManager.versionStatus = Number(data.switch.FORCE_UPDATE)
    end
  end
  if data.lvsUrl and data.lvsUrl ~= "" then
    Global.global_url = data.lvsUrl
  end
  self:doCoverVersion(data.onlineVersion)
  local isFirstLogin = Client.instance.globalLoginBackData == nil
  local resultData = data
  Client.instance.hasLoginComplete = not isError
  Client.instance.globalLoginBackData = resultData
  if resultData.channelUserId then
    UserInfo.channelUserId = resultData.channelUserId
  end
  KariqiShareManager.kariquLogin()
  if data and (data.user and data.user.isTestAccount or data.isTestAccount) then
    LogsManager.sendErrorToPlatform("发送客户端错误日志", LogsManager.errorTage_clientLog, 200, "sendClientError")
    LogsManager.setLogGroupVisible(true)
  end
  if data ~= nil and self:checkHasUserData(data.user) then
    self:checkHasUpdateData(data.user)
  end
  if isFirstLogin then
    self:addUpdateListener()
  else
    if not isError then
      local userdata = UserModel.instance:getData()
      if userdata then
        userdata.uid = data.uid
        userdata._id = data.uid
      end
    end
    Client.instance:onReloginBack(data, isError)
  end
end

function GamePlatform:checkHasUserData(userData)
  if not userData then
    return false
  end
  if userData.uid or userData.sendTime ~= nil then
    return true
  end
  return false
end

function GamePlatform:compareData(data)
  if not Global.checkUserCloudStorage() then
    return
  end
  local localData = CacheManager.instance:getGlobalCache(StorageCode.storage_userinfo)
  if not localData or localData == "0" then
    if self:checkHasUserData(data.user) then
      localData = data.user
      LogsManager.echo("_线上服务器有数据,本地没数据")
    else
      localData = ModelToServerMap.initBuildUserData()
    end
    if not localData.sendTime then
      localData.sendTime = 0
    end
  else
    try_catch{
      main = function()
        localData = JSON:parse(localData)
      end,
      catch = function(e)
        localData = ModelToServerMap.initBuildUserData()
      end
    }
  end
  local userData = data.user
  if self:checkHasUserData(userData) then
    self:checkHasUpdateData(userData)
    local deleteData = TableUtils.findNullKey(userData, {})
    if not TableUtils.isEmptyTable(deleteData) then
      local params = {clientDirty={u={}, d=deleteData}}
      Client.instance:send("349", params, nil, nil)
      LogsManager.errorTag("dataNullValue", "玩家数据有空字段," .. TableUtils.safelyJsonStringfy(deleteData))
    end
  else
    userData = localData
  end
  if not localData.sendTime then
    localData.sendTime = 0
  end
  SingleCommonServer._lastBackUpData = {}
  TableUtils.deepCopy(userData, SingleCommonServer._lastBackUpData)
  if userData.sendTime < localData.sendTime then
    local isUserLocalData = true
    if userData.sendTime > 0 and localData.sendTime > 0 then
      local dt = localData.sendTime - userData.sendTime
      if dt > 1 * 365 * 24 * 3600 then
        LogsManager.errorTag("userDataError", "用户时间戳错误,", localData.sendTime)
        isUserLocalData = false
      end
    end
    LogsManager.warn("userData:", "本地缓存的数据比服务器的数据新,采用本地数据")
    if isUserLocalData then
      userData = localData
    end
  end
  TableUtils.adjustEmptyArr(userData)
  userData.uid = data.uid
  userData._id = data.uid
  userData.isNewAccount = data.isNewAccount
  local resultData = data
  resultData.user = userData
  if not userData.firstRunSystemInfo then
    userData.firstRunSystemInfo = Global.firstRunSystemInfo
  else
    Global.firstRunSystemInfo = userData.firstRunSystemInfo
  end
  if resultData.switch and not Global.checkIsSingleMode() then
    GameSwitch.coverServerSwitchMap(resultData.switch)
  end
end

function GamePlatform:checkHasUpdateData(userData)
  local hasUpdateData = nil
  if userData and userData.uid then
    hasUpdateData = userData.hasUpdateData
  else
    hasUpdateData = false
  end
  SingleCommonServer.hasUpdateAllData = hasUpdateData
end

function GamePlatform:doCoverVersion(serverVersion)
  if not serverVersion then
    return
  end
  Global.version = tostring(serverVersion)
end

function GamePlatform:getVersionName()
  return "version.json"
end

function GamePlatform:getWX()
  return ControlConst.emptyTable
end

function GamePlatform:registerAd() end
function GamePlatform:removeLoginBtn() end
function GamePlatform:createSpeLoginBtn(posX, posY, btnW, btnH, callBack, thisObject)
  local tempFunc = function()
    if callBack then
      callBack:call(thisObject, {userInfo={nickName=UserInfo.channelUserId}})
    end
  end
  
  LogsManager.echo("xd 没有授权系统,直接2秒后授权成功")
  TimerManager.instance:add(tempFunc, self, 2000, 1)
end

function GamePlatform:setSystemInfo() end
function GamePlatform:getSystemInfo() end
function GamePlatform:getLaunchOptionsSync(callback, thisObj)
  callback:call(thisObj)
end

function GamePlatform:getWxInfo() end
function GamePlatform:initPlatformData() end
function GamePlatform:getNetwork() end
function GamePlatform:sharePage() end
function GamePlatform:showVideoAd(successCallBack, closeCallBack, thisObj, extraData)
  if successCallBack == nil then
    successCallBack=nil
  end
  if closeCallBack == nil then
    closeCallBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if extraData == nil then
    extraData={}
  end
  

end

function GamePlatform:loadVideoAd() end
function GamePlatform:setUserComeFrom() end
function GamePlatform:createLoginButton(callBack, thisObject)
  callBack and callBack:call(thisObject)
end

function GamePlatform:login(type) end
function GamePlatform:loginOut()
  Global.isGameDestory = true
end

function GamePlatform:share(id, extraData, callback, thisObj)
  if id == nil then
    id=""
  end
  if extraData == nil then
    extraData={}
  end
  if callback == nil then
    callback=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  

end

function GamePlatform:shareDynamicAppMessage(data, shareCallBack, activityId) end
function GamePlatform:onShareComplete(shareResult) end
function GamePlatform:sendToDesktop(callback) end
function GamePlatform:pay(id, name, price, count, type) end
function GamePlatform:registerRecord() end
function GamePlatform:recordStart(callback, thisObj, endCallback, durT, recordTimeRange, recordType)
  if callback == nil then
    callback=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if endCallback == nil then
    endCallback=nil
  end
  if durT == nil then
    durT=120
  end
  if recordTimeRange == nil then
    recordTimeRange=nil
  end
  if recordType == nil then
    recordType=self.RECORD_TYPE_AUTO
  end
  

end

function GamePlatform:recordStop(recordType)
  if recordType == nil then
    recordType=self.RECORD_TYPE_AUTO
  end
  

end

function GamePlatform:shareVideo(callBack, thisObj)
  if callBack == nil then
    callBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  

end

function GamePlatform:recordPause() end
function GamePlatform:recordResume() end
function GamePlatform:createMoreGamesButton() end
function GamePlatform:showMoreGamesModal(data)
  if data == nil then
    data=nil
  end
  

end

function GamePlatform:jumpToPayXCX(data, succCall, failCall, thisObj)
  if succCall == nil then
    succCall=nil
  end
  if failCall == nil then
    failCall=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  

end

function GamePlatform:changeLeftTask(value, tag)
  if tag == nil then
    tag=nil
  end
  self._leftWaitTask = self._leftWaitTask + value
  LogsManager.echo("yrc changeLeftTask", value, self._leftWaitTask, tag)
  if self._leftWaitTask == 0 then
    self:getUserInfoAndReq()
  end
end

function GamePlatform:isCanShareVideo()
  return false
end

function GamePlatform:initChannelUserId(cuid)
  if not cuid then
    LogsManager.errorTag(nil, "没有设置uid")
    return
  end
  self.channelUserId = cuid
  CacheManager.instance:setRid(cuid)
end

function GamePlatform:getUserInfoAndReq() end
function GamePlatform:vibrate(isLong, callBack, thisObject)
  if isLong == nil then
    isLong=false
  end
  if callBack == nil then
    callBack=nil
  end
  if thisObject == nil then
    thisObject=nil
  end
  callBack and callBack:call(thisObject, true)
end

function GamePlatform:vibrateByCount(count)
  local myThis = self
  local index = 0
  local obj = {count=count, index=index}
  myThis:vibrate(false)
  index=index+1
  if count <= 1 then
    return
  end
  Laya.timer:loop(16, obj, function()
    myThis:vibrate(false)
    index=index+1
    if index >= count then
      Laya.timer:clearAll(obj)
    end
  end
  )
end

function GamePlatform:setVersionCheckResult(num)
  self.versionCheckResult = num
  LogsManager.echo("versionCheckResult:", num)
end

function GamePlatform:getVersionCheckResult()
  return self.versionCheckResult
end

function GamePlatform:turnChannelUserInfo(userInfo)
  self.platformUserInfo = {name=userInfo.nickName, headImage=userInfo.avatarUrl, sex=userInfo.gender, province=userInfo.province, city=userInfo.city, country=userInfo.country}
  local userData = UserModel.instance:getData()
  if self.platformUserInfo.name then
    userData.name = self.platformUserInfo.name
    userData.userInfo = self.platformUserInfo
    UserInfo.userSex = self.platformUserInfo.sex
  end
end

function GamePlatform:setGameFrame()
  if GameConsts.gameFrameRate == 30 then
    Laya.stage.frameRate = Laya.Stage.FRAME_SLOW
    LogsManager.echo("zm setGameFrame: ", Laya.stage.frameRate)
  end
  -- [ts2lua]BattleFunc下标访问可能不正确
  if BattleFunc["initFrameDates"] then
    -- [ts2lua]BattleFunc下标访问可能不正确
    BattleFunc["initFrameDates"]()
  end
end

function GamePlatform:testSystemInfoSync() end
function GamePlatform:showGameClubBtn(posX, posY, btnW, btnH) end
function GamePlatform:hideGameClubBtn() end
function GamePlatform:destroyGameClubBtn() end
function GamePlatform:openCustomerService(isShowCard)
  if isShowCard == nil then
    isShowCard=false
  end
  

end

function GamePlatform:showPopTip(title, content, extraData)
  if extraData == nil then
    extraData=nil
  end
  local onSureBack = function(rt)
    extraData.success:call(nil, rt)
  end
  
  local onCancleBack = function(rt)
    extraData.success:call(nil, rt)
  end
  
  WindowManager.setPopupTip(2, content, onSureBack, self, title, onCancleBack)
end

function GamePlatform:showFlyTip(title, icon)
  if icon == nil then
    icon="none"
  end
  

end

function GamePlatform:loadSubPackage(packageName, callback, thisObj, isShowPop)
  if isShowPop == nil then
    isShowPop=false
  end
  

end

function GamePlatform:jumpToMiniProgram(data) end
function GamePlatform:initPhysics3D(message)
  if not GameConsts.isUsePhysics then
    MainModule.instance:changeShowMainTask(-1, MainModule.task_subpackage, "not use physics")
    return
  end
  -- [ts2lua]window下标访问可能不正确
  if window["Physics3D"] then
    MainModule.instance:changeShowMainTask(-1, MainModule.task_subpackage, "has use physics")
    return
  end
  LogsManager.echo("_startInitPhysics3d--")
  -- [ts2lua]window下标访问可能不正确
  window["loadLib"]("libs/laya.physics3D.js")
  local code = nil
  local tempFunc = function()
    -- [ts2lua]window下标访问可能不正确
    local physics3D = window["Physics3D"]
    if not physics3D then
      LogsManager.echo("Physics3D is not init")
      return
    end
    TimerManager.instance:remove(code)
    -- [ts2lua]Laya3D下标访问可能不正确
    Laya3D["_enbalePhysics"] = true
    physics3D(GameConsts.defaultPhysicsMemory * 1024 * 1024):tsvar_then(function()
      -- [ts2lua]window下标访问可能不正确
      if window["__physics3D"] then
        -- [ts2lua]Laya3D下标访问可能不正确
        -- [ts2lua]window下标访问可能不正确
        Laya3D["_physics3D"] = window["__physics3D"]
      else
        LogsManager.errorTag("physics", "全局没有找到物理库对象")
      end
      LogsManager.echo("xd 物理引擎初始化完毕")
      MainModule.instance:changeShowMainTask(-1, MainModule.task_subpackage, message)
    end
    )
  end
  
  code = TimerManager.instance:add(tempFunc, self, 10, 9999, false)
  tempFunc()
end

function GamePlatform:compareVersion(v1, v2)
  v1 = v1:split('.')
  v2 = v2:split('.')
  local len = Math:max(#v1, #v2)
  while(#v1 < len)
  do
  table.insert(v1, '0')
  end
  while(#v2 < len)
  do
  table.insert(v2, '0')
  end
  local i = 0
  repeat
    local num1 = parseInt(v1[i+1])
    local num2 = parseInt(v2[i+1])
    if num1 > num2 then
      return 1
    elseif num1 < num2 then
      return -1
    end
    i=i+1
  until not(i < len)
  return 0
end

function GamePlatform:canUseJump()
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_SHOWJUMP) then
    LogsManager.echo('hlx 互推禁用：互推开关关闭')
    return false
  end
  if UserInfo.isOppo() and GameSwitch.checkOnOff(GameSwitch.SWITCH_OPPO_REVIEW) then
    LogsManager.echo('hlx 互推禁用：审核模式无互推')
    return false
  end
  if not ((UserInfo.isTT() or UserInfo.isWX()) or UserInfo.isBaidu()) or UserInfo.isOppo() then
    LogsManager.echo('hlx 互推禁用：该平台不支持互推')
    return false
  end
  if UserInfo.isTT() then
    if not self:getWX().showMoreGamesModal then
      LogsManager.warn("hlx 头条互推禁用 showMoreGamesModal not support")
      return false
    end
    if UserInfo.platform:getSystemInfo().platform == "ios" then
      LogsManager.echo('hlx 头条互推禁用：IOS不支持头条互推')
      return false
    end
    if #JumpFunc.instance:getJumpList() == 0 then
      LogsManager.warn("hlx 头条互推禁用 互推Jump表未配置，请联系管理员配置")
      return false
    end
  elseif UserInfo.isBaidu() then
    if #JumpFunc.instance:getJumpList() == 0 then
      LogsManager.warn("hlx 百度互推禁用 互推Jump表未配置，请联系管理员配置")
      return false
    end
  end
  return true
end

function GamePlatform:addToDesktop(thisObj, successCall, failCall, channelParams)
  if thisObj == nil then
    thisObj=nil
  end
  if successCall == nil then
    successCall=nil
  end
  if failCall == nil then
    failCall=nil
  end
  if channelParams == nil then
    channelParams={}
  end
  

end

function GamePlatform:addToFavorite(thisObj, successCall, failCall, channelParams)
  if thisObj == nil then
    thisObj=nil
  end
  if successCall == nil then
    successCall=nil
  end
  if failCall == nil then
    failCall=nil
  end
  if channelParams == nil then
    channelParams={}
  end
  

end

function GamePlatform:canAddToDesktop()
  if not (((UserInfo.isQQGame() or UserInfo.isBaidu()) or UserInfo.isOppo()) or UserInfo.isVivo()) then
    LogsManager.echo('hlx 添加到桌面功能禁用：该平台不支持添加到桌面功能')
    return false
  end
  if self:getSystemInfo().platform and (self:getSystemInfo().platform == "ios" or self:getSystemInfo().platform == "devtools") then
    LogsManager.echo('hlx 添加到桌面功能禁用：IOS不支持')
    return false
  end
  if UserInfo.isQQGame() then
    if not self:getWX().saveAppToDesktop then
      LogsManager.echo('hlx 添加到桌面功能禁用：saveAppToDesktop不支持')
      return false
    end
  elseif UserInfo.isBaidu() then
    if type(self:getWX().showAddToDesktopGuide) ~= 'function' then
      LogsManager.echo('hlx 添加到桌面功能禁用：showAddToDesktopGuide不支持')
      return false
    end
  elseif UserInfo.isOppo() or UserInfo.isVivo() then
    if not self:getWX().installShortcut then
      LogsManager.echo('hlx 添加到桌面功能禁用：installShortcut不支持')
      return false
    end
  end
  return true
end

function GamePlatform:canAddToFavorite()
  if not UserInfo.isBaidu() then
    LogsManager.echo('hlx 添加到桌面功能禁用：该平台不支持添加到桌面功能')
    return false
  end
  if self:getSystemInfo().platform == "devtools" then
    LogsManager.echo('hlx 添加到桌面功能禁用：开发者工具无此功能')
    return false
  end
  if type(self:getWX().showFavoriteGuide) ~= 'function' then
    return false
  end
  return true
end

function GamePlatform:canCreateDisPlayPbject()
  if UserInfo.isWX() or UserInfo.isQQGame() then
    return true
  end
  return false
end

function GamePlatform:createDisplayObject(type, width, height, x, y)
  if x == nil then
    x=0
  end
  if y == nil then
    y=0
  end
  

end

function GamePlatform:canSetRankInfo()
  if UserInfo.isWX() or UserInfo.isQQGame() then
    return true
  end
  return false
end

function GamePlatform:setUseRankInfo(data) end
function GamePlatform:isFromFavourite()
  return true
end

function GamePlatform:canAdv()
  if not GameUtils.canVideo then
    return false
  end
  if UserInfo.isWeb() then
    return true
  end
  if not self._videoId and not UserInfo.isUC() then
    return false
  end
  return true
end

function GamePlatform:canShareVideo()
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_SHAREVIDEO) then
    LogsManager.echo("hlx 录屏功能禁用: 开关关闭")
    return false
  end
  if self._canShareVideoRt == nil then
    if not UserInfo.isTT() and not UserInfo.isBaidu() then
      LogsManager.echo("hlx 录屏功能禁用: 该平台不支持录屏")
      self._canShareVideoRt = false
      return false
    end
    if UserInfo.isBaidu() then
      local systemInfo = UserInfo.platform:getSystemInfo()
      if systemInfo.host and systemInfo.host ~= 'baiduboxapp' then
        LogsManager.echo("hlx 录屏功能禁用: 百度渠道只有手百支持录屏", systemInfo.host)
        self._canShareVideoRt = false
        return false
      end
    end
    self._canShareVideoRt = true
  end
  return self._canShareVideoRt
end

function GamePlatform:canShare()
  if ((UserInfo.isBaidu() or UserInfo.isTT()) or UserInfo.isOppo()) or UserInfo.isVivo() then
    LogsManager.echo("hlx 分享功能禁用: 该平台不开启分享功能：")
    return false
  end
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_SHARE_NEW) then
    LogsManager.echo("hlx 分享功能禁用: 分享开关关闭")
    return false
  end
  return true
end

function GamePlatform:showAntiAddtionView()
  return false
end

function GamePlatform:getLaunchOptions()
  if not self._launchOptions then
    if 'function' == type(self:getWX().getLaunchOptionsSync) then
      self._launchOptions = self:getWX():getLaunchOptionsSync()
      if self._launchOptions.scene == "1014" then
        StatisticsManager.ins:onEvent(StatisticsCommonConst.SUBSCRIBE_JOIN_GAME, {msgId=self._launchOptions.query.msgId})
      end
      LogsManager.echo('_launchOptions', JSON:stringify(self._launchOptions))
    else
      LogsManager.echo('该平台不支持 getLaunchOptionsSync')
    end
  end
  return self._launchOptions
end

function GamePlatform:setLoadingProgress(num) end
function GamePlatform:hideLoadingProgress() end
function GamePlatform:afterVideoLoadCallBack() end
function GamePlatform:initCityName()
  if not UserInfo.isWX() then
    return
  end
  -- [ts2lua]GameConsts下标访问可能不正确
  if not GameConsts["OPEN_IP_LIST"] then
    return
  end
  if self.cityName then
    LogsManager.echo("hlx clientInfo已经初始化完毕，无需重复初始化", JSON:stringify(self.cityName))
  else
    local url = "https://pv.sohu.com/cityjson?ie=utf-8"
    HttpMessage.instance:sendOtherHttpRequest(url, nil, self.initCityNameCallBack, self, "get", {errorCall=self.initCityNameErrorCallBack, contentType="application/json"})
  end
  return
end

function GamePlatform:initCityNameCallBack(data)
  try_catch{
    main = function()
      local isSuc = false
      if data then
        -- [ts2lua]tslua无法自动转换正则表达式，请手动处理。
        local matchResult = data:match(/{.*}/)
        if matchResult[0+1] then
          local jsonArray = JSON:parse(matchResult[0+1])
          if jsonArray.cname then
            UserInfo.platform.cityName = jsonArray.cname
            isSuc = true
            Message.instance:send(CommonEvent.GET_IPINFO_SUCCESS)
          end
        end
      end
      if not isSuc then
        UserInfo.platform.clientInfoReqCount=UserInfo.platform.clientInfoReqCount+1
        if UserInfo.platform.clientInfoReqCount >= 5 then
          LogsManager.echo("hlx 获取IP所在城市5次重试错误，跳过", data)
        else
          LogsManager.echo("hlx 获取IP所在城市格式有误，重试", UserInfo.platform.clientInfoReqCount, data)
          UserInfo.platform:initCityName()
        end
      end
    end,
    catch = function(e)
      LogsManager.errorTag("get_cityname_error", e:toString())
    end
  }
end

function GamePlatform:initCityNameErrorCallBack(error)
  try_catch{
    main = function()
      UserInfo.platform.clientInfoReqCount=UserInfo.platform.clientInfoReqCount+1
      if UserInfo.platform.clientInfoReqCount >= 5 then
        LogsManager.echo("hlx 获取IP所在城市5次重试错误，跳过", UserInfo.platform.clientInfoReqCount, error:toString())
        Message.instance:send(CommonEvent.GET_IPINFO_FAIL)
        return
      else
        UserInfo.platform:initCityName()
      end
    end,
    catch = function(e)
      LogsManager.errorTag("get_cityname_error", e:toString())
    end
  }
  return
end

function GamePlatform:isAuthorized()
  local data = UserModel.instance:getData()
  local uInfo = data.userInfo
  if uInfo and uInfo.name then
    if UserInfo.isWX() then
      local name = uInfo.name
      if name:match("^oE7B") then
        return false
      end
    end
    return true
  end
  return false
end

function GamePlatform:requestSubscribeMessage(tmpIds, successCall, failCall, completeCall) end
function GamePlatform:registFocusEvent()
  self.hideT = Laya.Browser:now()
  self.showT = self.hideT
  Laya.stage:on(Laya.Event.FOCUS, self, self.onGetFocus)
  Laya.stage:on(Laya.Event.BLUR, self, self.onLoseFocus)
end

function GamePlatform:onGetFocus()
  LogsManager.echo("获取焦点")
  self.isHide = false
  self.showT = Laya.Browser:now()
  Message.instance:send(MsgCMD.GAME_ONSHOW)
  StatisticsManager.ins:onEvent(StatisticsCommonConst.ON_SHOW)
  StatisticsManager.addLoadingOutTime(self.showT - self.hideT)
end

function GamePlatform:onLoseFocus()
  self.isHide = true
  self.hideT = Laya.Browser:now()
  LogsManager.echo('>>OnHide成功回调', self.hideT)
  Message.instance:send(MsgCMD.GAME_ONHIDE)
  StatisticsManager.ins:onEvent(StatisticsCommonConst.ON_HIDE, {onlineTime=self.hideT - self.showT, hideView=GameUtils.decryptStr(WindowManager.getCurrentWindowName())})
end

function GamePlatform:isCasingPackage()
  return false
end

function GamePlatform:getChildChannelKey()
  if self:isCasingPackage() then
    return "other"
  else
    return "main"
  end
end

function GamePlatform:getPackageName()
  return "qhmx." .. GameConsts.gameCode .. ".game"
end

function GamePlatform:recvMsg(cmd, data) end