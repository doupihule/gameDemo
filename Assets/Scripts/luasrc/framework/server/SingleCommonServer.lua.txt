SingleCommonServer = class('SingleCommonServer')
SingleCommonServer._lastCacheClientDirtyList = {};
SingleCommonServer.user_updateData_349 = "349";
SingleCommonServer._emptyObj = {};
SingleCommonServer._testNums = 0;
SingleCommonServer.hasUpdateAllData = false;
SingleCommonServer.minUpdateTime = 3000;
function SingleCommonServer.initData(autoUpdate)
  if autoUpdate == nil then
    autoUpdate=false
  end
  local delayValue = GameSwitch.getSwitchState(GameSwitch.SWITCH_UPDATE_USERDATA_CD)
  if delayValue then
    delayValue = Number(delayValue)
    if delayValue > 0 then
      Global.updateUserDataDelay = delayValue
    end
    LogsManager.echo("使用服务器配置的同步cd", delayValue)
  end
  local minUpdateTime = GameSwitch.getSwitchState("SWITCH_MINUPDATETIME")
  if minUpdateTime then
    SingleCommonServer.minUpdateTime = minUpdateTime
  end
  if SingleCommonServer._lastBackUpData then
    SingleCommonServer.startSaveClientData()
  else
    SingleCommonServer._lastBackUpData = {}
    TableUtils.deepCopy(UserModel.instance:getData(), SingleCommonServer._lastBackUpData)
  end
  if Global.checkIsSingleMode() then
    if autoUpdate then
      TimerManager.instance:add(SingleCommonServer.startSaveClientData, SingleCommonServer, Global.updateUserDataDelay, 9999999)
    end
  end
end

SingleCommonServer._delayCode = 0;
SingleCommonServer._saveLock = false;
SingleCommonServer._hasDataChange = false;
function SingleCommonServer.startSaveClientData(isDelaySave, callBack, thisObj, dummyBackData)
  if isDelaySave == nil then
    isDelaySave=false
  end
  if callBack == nil then
    callBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if dummyBackData == nil then
    dummyBackData=nil
  end
  if SingleCommonServer._saveLock then
    SingleCommonServer._hasDataChange = true
    LogsManager.echo("server 当前保存数据cd没到")
    callBack and doJsCallFunc(callBack,thisObj, dummyBackData)
    return
  end
  SingleCommonServer._saveLock = true
  SingleCommonServer.sureDoSaveData(false, callBack, thisObj, dummyBackData)
  TimerManager.instance:remove(SingleCommonServer._delayCode)
  if SingleCommonServer.minUpdateTime > 0 then
    SingleCommonServer._delayCode = TimerManager.instance:add(SingleCommonServer.delayCheck, SingleCommonServer, SingleCommonServer.minUpdateTime, 1, false)
  end
end

function SingleCommonServer.delayCheck()
  SingleCommonServer._saveLock = false
  LogsManager.echo("server 保存数据cd到了,是否有数据变化:", SingleCommonServer._hasDataChange)
  if SingleCommonServer._hasDataChange then
    SingleCommonServer._hasDataChange = false
    SingleCommonServer.startSaveClientData(false)
  end
end

SingleCommonServer._forceExpandParams = {forceConnect=true};
function SingleCommonServer.sureDoSaveData(forceConnect, callBack, thisObj, dummyBackData)
  if forceConnect == nil then
    forceConnect=false
  end
  if callBack == nil then
    callBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if dummyBackData == nil then
    dummyBackData=nil
  end
  if SingleCommonServer._isDestoryData then
    WindowManager.ShowTip("xd 数据已经删除,请重启游戏")
    return
  end
  if not Global.checkIsSingleMode() then
    if #Object:keys(Client.temDirtList) > 0 then
      local data = Client.temDirtList
      local param = {}
      -- [ts2lua]data下标访问可能不正确
      if data["u"] then
        -- [ts2lua]param下标访问可能不正确
        -- [ts2lua]data下标访问可能不正确
        param["u"] = data["u"]
      end
      -- [ts2lua]data下标访问可能不正确
      if data["d"] then
        -- [ts2lua]param下标访问可能不正确
        -- [ts2lua]data下标访问可能不正确
        param["d"] = data["d"]
      end
      SingleCommonServer.sendNoAliCloudData({clientDirty=param})
    end
    callBack and doJsCallFunc(callBack,thisObj, dummyBackData)
    return
  end
  local params = nil
  local lastBackData = {}
  local tempUserData = UserModel.instance:getData()
  if not SingleCommonServer.hasUpdateAllData then
    tempUserData.hasUpdateData = true
    local tempData = {}
    TableUtils.deepCopy(tempUserData, tempData)
    params = {clientDirty={u=tempData}}
    CacheManager.instance:setGlobalCache(StorageCode.storage_userinfo, JSON:stringify(tempUserData))
    LogsManager.echo("_还没有完整的同步过数据,需要先整体同步")
  else
    params = {clientDirty=SingleCommonServer.getClientDirtyList()}
    if TableUtils.isEmptyTable(params.clientDirty) then
      callBack and doJsCallFunc(callBack,thisObj, dummyBackData)
      return
    end
  end
  if not tempUserData.uid then
    tempUserData.sendTime = nil
  else
    tempUserData.sendTime = Client.instance.serverTime
    params.sendTime = tempUserData.sendTime
  end
  if not params.clientDirty.u then
    params.clientDirty.u = {}
  end
  params.clientDirty.u.sendTime = tempUserData.sendTime
  local userDataStr = JSON:stringify(tempUserData)
  CacheManager.instance:setGlobalCache(StorageCode.storage_userinfo, userDataStr)
  TableUtils.deepCopy(tempUserData, lastBackData)
  LogsManager.echo("开始同步数据,length:" .. #userDataStr)
  KakuraClient.instance:clearOneMethod(SingleCommonServer.user_updateData_349)
  local tempParams = {callBack=callBack, thisObj=thisObj, backData=lastBackData, params=dummyBackData}
  if forceConnect then
    Client.instance:send(SingleCommonServer.user_updateData_349, params, SingleCommonServer.doSureDoSaveDataBack, SingleCommonServer, nil, false, tempParams, SingleCommonServer._forceExpandParams)
  else
    Client.instance:send(SingleCommonServer.user_updateData_349, params, SingleCommonServer.doSureDoSaveDataBack, SingleCommonServer, nil, false, tempParams)
  end
end

function SingleCommonServer.doSureDoSaveDataBack(serverInfo, addParams)
  if serverInfo.error then
    if addParams.callBack then
      doJsCallFunc(addParams.callBack,addParams.thisObj, addParams.params)
    end
    return
  end
  SingleCommonServer.hasUpdateAllData = true
  LogsManager.echo("__客户端同步数据成功")
  SingleCommonServer._lastBackUpData = addParams.backData
  if addParams.callBack then
    doJsCallFunc(addParams.callBack,addParams.thisObj, addParams.params)
  end
end

function SingleCommonServer.sendNoAliCloudData(params)
  if Global.checkIsSingleMode() then
    return
  end
  LogsManager.echo("开始非单机项目同步数据")
  KakuraClient.instance:clearOneMethod(SingleCommonServer.user_updateData_349)
  Client.instance:send(SingleCommonServer.user_updateData_349, params, function(result)
    Client.temDirtList = {}
    if result.error then
      return
    end
    LogsManager.echo("__非单机客户端同步数据成功")
  end
  , SingleCommonServer, nil, false)
end

function SingleCommonServer.getClientDirtyList()
  local dData = {}
  local uData = {}
  local userData = UserModel.instance:getData()
  TableUtils.compareTable(SingleCommonServer._lastBackUpData, userData, uData)
  uData.loginToken = nil
  uData.sendTime = nil
  local lastBackData = {}
  TableUtils.deepCopy(userData, lastBackData)
  TableUtils.findDelKey(SingleCommonServer._lastBackUpData, userData, dData, true)
  dData.loginToken = nil
  if TableUtils.isEmptyTable(uData) then
    uData = undefined
  end
  if TableUtils.isEmptyTable(dData) then
    dData = undefined
  end
  if not uData and not dData then
    return SingleCommonServer._emptyObj
  end
  return {u=uData, d=dData}
end

function SingleCommonServer.setUpdateDataFlag(thisObj, data)
  LogsManager.echo("krma. 确认同步，存入本地")
  CacheManager.instance:setGlobalCache(StorageCode.storage_userinfo, JSON:stringify(data))
end

function SingleCommonServer.disposeAccount()
  if Global.checkUserCloudStorage() then
    SingleCommonServer.disposeCloudStorageAccount()
  else
    WindowManager.ShowTip("非云存储不可使用")
  end
end

SingleCommonServer._isDestoryData = false;
function SingleCommonServer.disposeCloudStorageAccount()
  local userData = UserModel.instance:getData()
  for key in pairs(userData) do
    -- [ts2lua]userData下标访问可能不正确
    userData[key] = nil
  end
  SingleCommonServer.sureDoSaveData(false)
  SingleCommonServer.destoryUserData()
  SingleCommonServer._isDestoryData = true
end

function SingleCommonServer.destoryUserData()
  CacheManager.instance:setGlobalCache(StorageCode.storage_userinfo, '')
end
