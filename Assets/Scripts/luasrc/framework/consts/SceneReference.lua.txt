















SceneReference = class('SceneReference')

function SceneReference.getInstance()
  if not SceneReference._instance then
    SceneReference._instance = SceneReference.new()
  end
  return SceneReference._instance
end

function SceneReference:ctor() end
function SceneReference:recvMsg(cmd, data)
  if cmd == CommonEvent.GET_IPINFO_SUCCESS then
    if not UserModel.getInstance():isSceneBlack() and SceneReference.checkIpBlack() then
      SceneReference.setSceneBlack()
      Message.getInstance():send(CommonEvent.WHITE_LIST_CHANGE)
    end
  elseif cmd == CommonEvent.GET_IPINFO_FAIL then
    if not UserModel.getInstance():isSceneBlack() and GameSwitch.checkOnOff(GameSwitch.SWITCH_BLACK_IP_FAIL_TYPE) then
      StatisticsManager.getInstance():onEvent(StatisticsCommonConst.WHITE_LIST_LOAD_IP_FAIL, {openId=UserInfo.channelUserId, rid=UserModel.getInstance():getUserRid()})
      SceneReference.setSceneBlack()
      Message.getInstance():send(CommonEvent.WHITE_LIST_CHANGE)
    end
  end
end

function SceneReference.getSceneName(sceneId)
  local sceneName = sceneId or "noSceneId"
  -- [ts2lua]SceneReference下标访问可能不正确
  if SceneReference[sceneId] then
    -- [ts2lua]SceneReference下标访问可能不正确
    sceneName = SceneReference[sceneId]
  end
  return sceneName
end

function SceneReference.isInBannerScene()
  Message.getInstance():add(CommonEvent.GET_IPINFO_SUCCESS, SceneReference.getInstance())
  Message.getInstance():add(CommonEvent.GET_IPINFO_FAIL, SceneReference.getInstance())
  LogsManager.echo("hlx scene 开始检查是否是白名单-----start")
  if UserInfo.isWeb() then
    LogsManager.echo("zm web版永远是白名单")
    return true
  end
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_ALL_IN_WHITE_LIST) then
    LogsManager.echo("hlx scene 全服白名单开关开启")
    return true
  end
  if UserExtCommonModel.getInstance():getTestSceneMark() then
    LogsManager.echo("hlx scene 测试用户永远是白名单")
    return true
  end
  if not SceneReference.checkWhiteSceneId(Global.sceneId, WhiteListFunc.TYPE_REGISTER) then
    LogsManager.echo("hlx scene 账号不在注册白名单,Global.sceneId：", Global.sceneId)
    return false
  end
  if UserInfo.isNewAccount and SceneReference.checkQueryBlack() then
    LogsManager.echo("hlx scene 账号在Query黑名单中")
    return false
  end
  if UserModel.getInstance():isSceneBlack() then
    LogsManager.echo("hlx scene 账号不在登陆白名单,userModel.sceneBlack：", UserModel.getInstance():isSceneBlack())
    return false
  end
  LogsManager.echo("hlx scene 检查白名单结束-----白名单用户")
  return true
end

function SceneReference.checkIpBlack()
  if UserModel.getInstance():isSceneBlack() then
    LogsManager.echo("ycn 检查Ip黑名单： 账号已被染黑")
    return true
  end
  if UserInfo.platform.cityName then
    local cityNames = string.split(GameSwitch.getSwitchState(GameSwitch.SWITCH_BLACK_IP_CITY),"|")
    if cityNames then
      for _tmpi, blackCityName in pairs(cityNames) do
        if blackCityName ~= "" then
          if UserInfo.platform.cityName:search(blackCityName) ~= -1 then
            LogsManager.echo("hlx 检查Ip黑名单：染黑", UserInfo.platform.cityName, " ", blackCityName)
            return true
          end
        end
      end
    end
  end
  return false
end

function SceneReference.checkQueryBlack()
  if UserModel.getInstance():isSceneBlack() then
    LogsManager.echo("ycn 检查query白名单： 账号已被染黑")
    return true
  end
  if not UserInfo.isWX() then
    return false
  end
  local blackenStr = GlobalParamsFunc.getInstance():getCfgDatas("GlobalParams_json", 'whiteListString', true)
  if not blackenStr.string then
    LogsManager.echo('hlx 检查Query白名单，通过：whiteListString未配置')
    return false
  end
  local launchOptions = UserInfo.platform:getLaunchOptions()
  if not launchOptions.query then
    LogsManager.warn('hlx 检查Query白名单，通过：launchOptions.query 未获取到')
    return false
  end
  LogsManager.echo("ycn scene query:", TableUtils.safelyJsonStringfy(launchOptions.query), ' whiteListString：', blackenStr.string)
  for keyword in pairs(launchOptions.query) do
    if keyword:search(blackenStr.string) ~= -1 then
      LogsManager.echo("hlx 检查Query白名单，通过, query:", keyword)
      return false
    end
  end
  SceneReference.setSceneBlack()
  return true
end

function SceneReference.setSceneBlack()
  local updateData = {sceneBlack=1}
  local backData = Client.getInstance():doDummyServerBack(nil, updateData, nil)
  SingleCommonServer.startSaveClientData()
end

function SceneReference.checkWhiteSceneId(sceneId, type)
  local sceneWhiteList = WhiteListFunc.getInstance():getWhiteList(type)
  if #sceneWhiteList == 0 and not UserInfo.isWeb() then
    LogsManager.echo("zm noWhiteList sceneId:", sceneId)
    return true
  else
    LogsManager.echo("krma. bannerScene:", #sceneWhiteList)
    if sceneId then
      if table.findArrValue(sceneWhiteList,tostring(tonumber(sceneId))) ~= -1 then
        LogsManager.echo("zm find sceneId:", sceneId)
        return true
      end
    end
    LogsManager.echo("zm noFind sceneId:", sceneId)
    return false
  end
end
