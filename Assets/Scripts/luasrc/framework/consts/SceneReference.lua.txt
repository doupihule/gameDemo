















SceneReference = class('SceneReference')

function SceneReference.__getters.instance()
  if not SceneReference._instance then
    SceneReference._instance = SceneReference.new()
  end
  return SceneReference._instance
end

function SceneReference:ctor() end
SceneReference."1001" = "发现栏小程序主入口，「最近使用」列表";
SceneReference."1005" = "微信首页顶部搜索框的搜索结果页";
SceneReference."1006" = "发现栏小程序主入口搜索框的搜索结果页";
SceneReference."1007" = "单人聊天会话中的小程序消息卡片";
SceneReference."1008" = "群聊会话中的小程序消息卡片";
SceneReference."1011" = "扫描二维码";
SceneReference."1012" = "长按图片识别二维码";
SceneReference."1013" = "扫描手机相册中选取的二维码";
SceneReference."1014" = "小程序模板消息";
SceneReference."1017" = "前往小程序体验版的入口页";
SceneReference."1019" = "微信钱包";
SceneReference."1020" = "公众号 profile 页相关小程序列表";
SceneReference."1022" = "聊天顶部置顶小程序入口";
SceneReference."1023" = "安卓系统桌面图标";
SceneReference."1024" = "小程序 profile 页";
SceneReference."1025" = "扫描一维码";
SceneReference."1026" = "发现栏小程序主入口，「附近的小程序」列表";
SceneReference."1027" = "微信首页顶部搜索框搜索结果页「使用过的小程序」列表";
SceneReference."1028" = "我的卡包";
SceneReference."1029" = "小程序中的卡券详情页";
SceneReference."1030" = "自动化测试下打开小程序";
SceneReference."1031" = "长按图片识别一维码";
SceneReference."1032" = "扫描手机相册中选取的一维码";
SceneReference."1034" = "微信支付完成页";
SceneReference."1035" = "公众号自定义菜单";
SceneReference."1036" = "App 分享消息卡片";
SceneReference."1037" = "小程序打开小程序";
SceneReference."1038" = "从另一个小程序返回";
SceneReference."1039" = "摇电视";
SceneReference."1042" = "添加好友搜索框的搜索结果页";
SceneReference."1043" = "公众号模板消息";
SceneReference."1044" = "带 shareTicket 的小程序消息卡片";
SceneReference."1045" = "朋友圈广告";
SceneReference."1046" = "朋友圈广告详情页";
SceneReference."1047" = "扫描小程序码";
SceneReference."1048" = "长按图片识别小程序码";
SceneReference."1049" = "扫描手机相册中选取的小程序码";
SceneReference."1052" = "卡券的适用门店列表";
SceneReference."1053" = "搜一搜的结果页";
SceneReference."1054" = "顶部搜索框小程序快捷入口";
SceneReference."1056" = "聊天顶部音乐播放器右上角菜单";
SceneReference."1057" = "钱包中的银行卡详情页";
SceneReference."1058" = "公众号文章";
SceneReference."1059" = "体验版小程序绑定邀请页";
SceneReference."1064" = "微信首页连Wi-Fi状态栏";
SceneReference."1067" = "公众号文章广告";
SceneReference."1068" = "附近小程序列表广告";
SceneReference."1069" = "移动应用";
SceneReference."1071" = "钱包中的银行卡列表页";
SceneReference."1072" = "二维码收款页面";
SceneReference."1073" = "客服消息列表下发的小程序消息卡片";
SceneReference."1074" = "公众号会话下发的小程序消息卡片";
SceneReference."1077" = "摇周边";
SceneReference."1078" = "微信连Wi-Fi成功提示页";
SceneReference."1079" = "微信游戏中心";
SceneReference."1081" = "客服消息下发的文字链";
SceneReference."1082" = "公众号会话下发的文字链";
SceneReference."1084" = "朋友圈广告原生页";
SceneReference."1089" = "微信聊天主界面下拉，「最近使用」栏";
SceneReference."1090" = "长按小程序右上角菜单唤出最近使用历史";
SceneReference."1091" = "公众号文章商品卡片";
SceneReference."1092" = "城市服务入口";
SceneReference."1095" = "小程序广告组件";
SceneReference."1096" = "聊天记录";
SceneReference."1097" = "微信支付签约页";
SceneReference."1099" = "页面内嵌插件";
SceneReference."1102" = "公众号 profile 页服务预览";
SceneReference."1103" = "发现栏小程序主入口，「我的小程序」列表";
SceneReference."1104" = "微信聊天主界面下拉，「我的小程序」栏";
SceneReference."1129" = "微信爬虫访问";
function SceneReference:recvMsg(cmd, data)
  if cmd == CommonEvent.GET_IPINFO_SUCCESS then
    if not UserModel.instance:isSceneBlack() and SceneReference.checkIpBlack() then
      SceneReference.setSceneBlack()
      Message.instance:send(CommonEvent.WHITE_LIST_CHANGE)
    end
  elseif cmd == CommonEvent.GET_IPINFO_FAIL then
    if not UserModel.instance:isSceneBlack() and GameSwitch.checkOnOff(GameSwitch.SWITCH_BLACK_IP_FAIL_TYPE) then
      StatisticsManager.ins:onEvent(StatisticsCommonConst.WHITE_LIST_LOAD_IP_FAIL, {openId=UserInfo.channelUserId, rid=UserModel.instance:getUserRid()})
      SceneReference.setSceneBlack()
      Message.instance:send(CommonEvent.WHITE_LIST_CHANGE)
    end
  end
end

function SceneReference.getSceneName(sceneId)
  local sceneName = sceneId or "noSceneId"
  -- [ts2lua]SceneReference下标访问可能不正确
  if SceneReference[sceneId] then
    -- [ts2lua]SceneReference下标访问可能不正确
    sceneName = SceneReference[sceneId]
  end
  return sceneName
end

function SceneReference.isInBannerScene()
  Message.instance:add(CommonEvent.GET_IPINFO_SUCCESS, SceneReference.instance)
  Message.instance:add(CommonEvent.GET_IPINFO_FAIL, SceneReference.instance)
  LogsManager.echo("hlx scene 开始检查是否是白名单-----start")
  if UserInfo.isWeb() then
    LogsManager.echo("zm web版永远是白名单")
    return true
  end
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_ALL_IN_WHITE_LIST) then
    LogsManager.echo("hlx scene 全服白名单开关开启")
    return true
  end
  if UserExtCommonModel.instance:getTestSceneMark() then
    LogsManager.echo("hlx scene 测试用户永远是白名单")
    return true
  end
  if not SceneReference.checkWhiteSceneId(Global.sceneId, WhiteListFunc.TYPE_REGISTER) then
    LogsManager.echo("hlx scene 账号不在注册白名单,Global.sceneId：", Global.sceneId)
    return false
  end
  if UserInfo.isNewAccount and SceneReference.checkQueryBlack() then
    LogsManager.echo("hlx scene 账号在Query黑名单中")
    return false
  end
  if UserModel.instance:isSceneBlack() then
    LogsManager.echo("hlx scene 账号不在登陆白名单,userModel.sceneBlack：", UserModel.instance:isSceneBlack())
    return false
  end
  LogsManager.echo("hlx scene 检查白名单结束-----白名单用户")
  return true
end

function SceneReference.checkIpBlack()
  if UserModel.instance:isSceneBlack() then
    LogsManager.echo("ycn 检查Ip黑名单： 账号已被染黑")
    return true
  end
  if UserInfo.platform.cityName then
    local cityNames = GameSwitch.getSwitchState(GameSwitch.SWITCH_BLACK_IP_CITY):split("|")
    if cityNames then
      for _tmpi, blackCityName in pairs(cityNames) do
        if blackCityName ~= "" then
          if UserInfo.platform.cityName:search(blackCityName) ~= -1 then
            LogsManager.echo("hlx 检查Ip黑名单：染黑", UserInfo.platform.cityName, " ", blackCityName)
            return true
          end
        end
      end
    end
  end
  return false
end

function SceneReference.checkQueryBlack()
  if UserModel.instance:isSceneBlack() then
    LogsManager.echo("ycn 检查query白名单： 账号已被染黑")
    return true
  end
  if not UserInfo.isWX() then
    return false
  end
  local blackenStr = GlobalParamsFunc.instance:getCfgDatas("GlobalParams_json", 'whiteListString', true)
  if not blackenStr.string then
    LogsManager.echo('hlx 检查Query白名单，通过：whiteListString未配置')
    return false
  end
  local launchOptions = UserInfo.platform:getLaunchOptions()
  if not launchOptions.query then
    LogsManager.warn('hlx 检查Query白名单，通过：launchOptions.query 未获取到')
    return false
  end
  LogsManager.echo("ycn scene query:", TableUtils.safelyJsonStringfy(launchOptions.query), ' whiteListString：', blackenStr.string)
  for keyword in pairs(launchOptions.query) do
    if keyword:search(blackenStr.string) ~= -1 then
      LogsManager.echo("hlx 检查Query白名单，通过, query:", keyword)
      return false
    end
  end
  SceneReference.setSceneBlack()
  return true
end

function SceneReference.setSceneBlack()
  local updateData = {sceneBlack=1}
  local backData = Client.instance:doDummyServerBack(nil, updateData, nil)
  SingleCommonServer.startSaveClientData()
end

function SceneReference.checkWhiteSceneId(sceneId, type)
  local sceneWhiteList = WhiteListFunc.instance:getWhiteList(type)
  if #sceneWhiteList == 0 and not UserInfo.isWeb() then
    LogsManager.echo("zm noWhiteList sceneId:", sceneId)
    return true
  else
    LogsManager.echo("krma. bannerScene:", #sceneWhiteList)
    if sceneId then
      if sceneWhiteList:find(tostring(tonumber(sceneId))) ~= -1 then
        LogsManager.echo("zm find sceneId:", sceneId)
        return true
      end
    end
    LogsManager.echo("zm noFind sceneId:", sceneId)
    return false
  end
end
