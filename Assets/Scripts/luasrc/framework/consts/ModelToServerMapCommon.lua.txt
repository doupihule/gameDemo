require("framework/model/JumpCommonModel")
require("framework/model/UserExtCommonModel")
require("framework/model/CountsCommonModel")
require("game/sys/consts/ModelToServerMap")
require("game/sys/model/UserModel")

ModelToServerMapCommon = class('ModelToServerMapCommon')
function ModelToServerMapCommon:ctor() end
ModelToServerMapCommon.modelToServerMap = {};
ModelToServerMapCommon.modelToServerMapCommon = {{key="jumpCommon", model=JumpCommonModel}, {key="userExtCommon", model=UserExtCommonModel}, {key="countsCommon", model=CountsCommonModel}};
function ModelToServerMapCommon.initModelToServerMap()
  ModelToServerMap.initModelToServerMap()
  local modelMap = ModelToServerMap.modelToServerMap
  local modelMapCommon = ModelToServerMapCommon.modelToServerMapCommon
  local totalModelMap = {}
  if #modelMap and not #modelMapCommon then
    totalModelMap = modelMap
  elseif not #modelMap and #modelMapCommon then
    table.insert(totalModelMap, {key="user", model=UserModel})
    local i = 0
    repeat
      table.insert(totalModelMap, modelMapCommon[i+1])
      i=i+1
    until not(i < #modelMapCommon)
  else
    local i = 0
    repeat
      table.insert(totalModelMap, modelMap[i+1])
      i=i+1
    until not(i < #modelMap)
    local map = ModelToServerMapCommon.revertToTable(modelMap)
    if #Object:keys(map) ~= 0 then
      local i = 0
      repeat
        -- [ts2lua]map下标访问可能不正确
        if not map:hasOwnProperty(modelMapCommon[i+1].key) or map[modelMapCommon[i+1].key] ~= modelMapCommon[i+1].model then
          table.insert(totalModelMap, modelMapCommon[i+1])
        end
        i=i+1
      until not(i < #modelMapCommon)
    end
  end
  ModelToServerMapCommon.modelToServerMap = totalModelMap
end

function ModelToServerMapCommon.revertToTable(arr)
  if #arr == 0 then
    return {}
  end
  local result = {}
  local i = 0
  repeat
    -- [ts2lua]result下标访问可能不正确
    result[arr[i+1].key] = arr[i+1].model
    i=i+1
  until not(i < #arr)
  return result
end
