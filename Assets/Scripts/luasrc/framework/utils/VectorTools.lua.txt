VectorTools = class('VectorTools')

function VectorTools.multyByNumToSelf(vec, mul)
    vec.x = vec.x * mul
    vec.y = vec.y * mul
    vec.z = vec.z * mul
end

function VectorTools.multyByNum(vec, mul)
    vec.x = vec.x * mul
    vec.y = vec.y * mul
    vec.z = vec.z * mul
    return VectorTools.createVector3(vec.x * mul, vec.y * mul, vec.z * mul)
end

function VectorTools.addToSelf(vec, vec2)
    vec.x = vec.x + vec2.x
    vec.y = vec.y + vec2.y
    vec.z = vec.z + vec2.z
end

function VectorTools.added(vec, vec2)
    local newVec = VectorTools.createVector3(vec.x + vec2.x, vec.y + vec2.y, vec.z + vec2.z)
    return newVec
end

function VectorTools.reduceToSelf(vec, vec2)
    vec.x = vec.x - vec2.x
    vec.y = vec.y - vec2.y
    vec.z = vec.z - vec2.z
end

function VectorTools.copyVector(vec)
    return VectorTools.createVector3(vec.x, vec.y, vec.z)
end

--向量减法
function VectorTools.subtract(v1, v2, out)
    out.x = v1.x - v2.x;
    out.y = v1.y - v2.y;
    out.z = v1.z - v2.z;
    return out;
end

function VectorTools.scalarLength(v)
    return math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z)
end

function VectorTools.scale(v, scale, out)
    out.x = v.x * scale;
    out.y = v.y * scale;
    out.z = v.z * scale
    return out
end

function VectorTools.normalize(v, out)
    local len = VectorTools.scalarLength(v);
    out.x = v.x / out
    out.y = v.y / out
    out.z = v.z / out
    return out
end
function VectorTools.createVector2(x, y)
    return { x = x or 0, y = y or 0 }
end

function VectorTools.createVector3(x, y, z)
    return { x = x or 0, y = y or 0, z = z or 0 }
end
VectorTools.originPoint = VectorTools.createVector3();
VectorTools.unitPoint = VectorTools.createVector3(1, 1, 1);