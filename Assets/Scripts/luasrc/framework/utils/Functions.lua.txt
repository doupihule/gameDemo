--
-- Author: xd
-- Date: 2014-03-14 10:34:57
--

--定义clas
function class(classname, super)
    local superType = type(super)
    local cls

    if superType ~= "function" and superType ~= "table" then
        superType = nil
        super = nil
    end

    if superType == "function" then
        -- inherited from native C++ Object
        cls = {}
        if superType == "table" then
            -- copy fields from super

            --为什么不用元表 ？？ todo guan 
            for k, v in pairs(super) do
                cls[k] = v
            end
            cls.__create = super.__create
            cls.super = super
        else
            cls.__create = super
            cls.ctor = function()
            end
        end

        cls.__cname = classname
        cls.__ctype = 1

        function cls.new(...)
            local instance = cls.__create(...)
            -- copy fields from class to native object

            --为什么不用元表 ？？ todo guan instance 里有元表了 ！！
            for k, v in pairs(cls) do
                instance[k] = v
            end

            instance.class = cls
            instance:ctor(...)
            return instance
        end

    else
        -- inherited from Lua Object
        if super then
            cls = {}
            setmetatable(cls, { __index = super })
            cls.super = super
        else
            cls = { ctor = function()
            end }
        end

        cls.__cname = classname
        cls.__ctype = 2 -- lua
        cls.__index = cls

        function cls.new(...)
            local instance = setmetatable({}, cls)
            instance.class = cls
            instance:ctor(...)
            return instance
        end
    end

    return cls
end



-- return var or def
function vcheck(var, def)
    if var == nil then
        return def
    end
    return var
end

--一个对象是否为空 
function empty(var)
    return not var or var == "" or var == 0 or (type(var) == "table" and table.isEmpty(var))
end


function toint(v)
    return math.round(tonumber(v))
end

function tobool(v)
    return (v ~= nil and v ~= false)
end



--[[
-- 简单的函数传递，用于各种事件时传递函数，可传递任意多个参数
-- 格式: c_func(func,a,b,c)
-- Usage:
	[1]基本使用方法
	有一个方法，需要传递函数
	function AAA:registerFunc(aaa_func) aaa_func() end
	若需要传递的函数为
	local function func(...) echo(...) end
	使用时
	self:registerFunc(func) --正常无法传递参数
	self:registerFunc(c_func(func,1)) --传递1个参数 --aaa_func被调用时打印输出为 1
	self:registerFunc(c_func(func,1,"a",{})) --传递3个参数 --aaa_func被调用时打印输出为 1 "a" table
	[2]另外，某些冒号函数的事件传递方法
	function AAA:bbb_func(...) echo(...) end
	self:registerFunc(c_func(self.bbb_func,self,1,"a")) --bbb_func被调用时打印输出为 1 "a"
	[3]另外支持，在调用时可以附加更多的参数值进来，如
	function AAA:registerFunc(ccc_func) ccc_func(4,5,6) end --参数值456是作为额外参数传递给ccc_func
	local function func(...) echo(...) end
	self:registerFunc(c_func(func,self,1,"a")) --ccc_func被调用时打印输出为 1 "a" 4 5 6 (会同时得到调用时传入的456)
 ]]
function c_func(f, ...)
    local _args = { ... }
    if not f then
        error("传递了空函数")
        dump(_args, "____args")
    end

    local maxNums = 0
    for k, v in pairs(_args) do
        maxNums = math.max(k, maxNums)
    end

    for i = 1, maxNums do
        if not _args[i] then
            _args[i] = false
        end
    end

    return function(...)
        local _tmp = table.copy(_args)
        table.array_merge(_tmp, { ... })
        return f(unpack(_tmp))
    end
end



--执行类似js的回调
function doJsCallFunc(callFunc, thisObj, params)
    if not callFunc then
        return
    end
    if (thisObj) then
        callFunc(thisObj, params)
    else
        callFunc(params)
    end
end

--执行类似js allpy的回调
function doJsApplyFunc(callFunc, thisObj, paramsArr)
    if not callFunc then
        return
    end
    if (thisObj) then
        callFunc(thisObj, unpack(paramsArr))
    else
        callFunc(unpack(paramsArr))
    end
end

--try catch 传入2个函数, ...是try传入的参数 ,成功返回函数的返回值.最多3个返回值
function try_catch(tryFunc,catchFunc,...)
    local rt,me1,me2,me3 = pcall(tryFunc,...);
    if(rt) then
        return me1,me2,me3;
    end
    return catchFunc(...)
end

local tempTable1 = {}
local tempTable2 = {}
--三元运算符
function sanyuan(a, b, c)
    if a == nil then
        return c
    end
    tempTable1[1] = b
    tempTable2[1] = c
    return (a and tempTable1 or tempTable2)[1]
end

--以后还会有更多扩展  比如矩形是否与矩形相交  矩形是否和圆相交==








