TableUtils = class('TableUtils')

local json = require("rapidjson")

function TableUtils:ctor()
end
function TableUtils.deepMerge(receiveObj, fromObj)
    if not fromObj then
        return
    end
    if not receiveObj then
        receiveObj = {}
    end
    for i,value in pairs(fromObj) do
        if type(value) == "table" then
            if not receiveObj[i] then
                receiveObj[i] = {}
            end

            if #value > 0 then
                receiveObj[i] = TableUtils.deepCopy(value, {})
            else
                TableUtils.deepMerge(receiveObj[i], value)
            end
        else
            receiveObj[i] = value
        end
    end
end

function TableUtils.deepDelete(t, keyData, deltitle)
    if deltitle == nil then
        deltitle = 1
    end
    if not keyData then
        return
    end
    for i,value in pairs(keyData) do
        local value = keyData[i + 1]
        if i ~= "_id" then
            if value == deltitle then
                t[i ] = nil
            elseif type(value) == "table" then
                if t[i ] ~= nil then
                    TableUtils.deepDelete(t[i], value, deltitle)
                end
            else
                LogsManager.warn("错误的删除码,key: " .. i .. "_value: " .. value)
            end
        end
    end
end

function TableUtils.copyOneTable(tb)
    local newTb = {}
    for i,v in pairs(tb) do
        newTb[i] = v
    end
    return newTb
end

--把数组a里面的元素插入到b里面
function TableUtils.insertAtoB(a,b)
    for i, v in ipairs(a) do
        table.insert(b,i,v);
    end
end

function TableUtils.deepCopy(fromTb, toTb)
    for i,tempT in pairs(fromTb) do
        if type(tempT) == "table" then
            toTb[i] = {}
            TableUtils.deepCopy(tempT, toTb[i])
        else
            toTb[i] = tempT
        end

    end
    return toTb
end

function TableUtils.copyOneArr(arr, outArr)
    if not outArr then
        outArr = {}
    else
        table.clearArray(outArr)
    end
    if arr then
        local len = #arr
        for i, v in ipairs(arr) do
            outArr[i ] = v
        end
    end
    return outArr
end

function TableUtils.findDelKey(t1, t2, resulTb, ignoreFristTb)
    if ignoreFristTb == nil then
        ignoreFristTb = true
    end
    for i ,v in pairs(t1) do
        if type(v) == "table" then
            if t2[i] == nil then
                if not ignoreFristTb then
                    resulTb[i] = 1
                end
            else
                if TableUtils.isEmptyTable(t2[i]) and not ignoreFristTb then
                    resulTb[i ] = 1
                else
                    local tempT = resulTb[i]
                    if not tempT then
                        tempT = {}
                        resulTb[i] = tempT
                    end
                    TableUtils.findDelKey(v, t2[i], tempT, false)
                    if TableUtils.isEmptyTable(tempT) then
                        resulTb[i] = nil
                    end
                end
            end
        else
            if t2[i] == nil then
                if i ~= "id" and i ~= "_id" then
                    resulTb[i] = 1
                end
            end
        end
    end

end

function TableUtils.findNullKey(fromTb, toTb)
    if not fromTb then
        return toTb
    end
    for i,value in pairs(fromTb) do
        if value == nil  then
            toTb[i] = 1
        elseif type(value) == "table" then
            local tempTb = {}
            TableUtils.findNullKey(value, tempTb)
            if not TableUtils.isEmptyTable(tempTb) then
                toTb[i] = tempTb
            end
        end
    end
    return toTb
end

function TableUtils.compareTable(t1, t2, resulTb)
    for k,v in pairs(t2) do
        if type(v) ~= "table" then
            if not t1 or not t2 then
                LogsManager.echo("_____emyrt data")
            end
            if t1[k] == t2[k] then

            else
                resulTb[k] = v
            end
        else
            if  #v == 0 then
                resulTb[k] = {}
                if not t1[k] then
                    resulTb[k] = TableUtils.deepCopy(v, {})
                else
                    TableUtils.compareTable(t1[k ], v, resulTb[k ])
                end
            else
                LogsManager.errorTag("compareTableWarn", "has array Data,k:" .. k .. ",v:" .. string.sub(TableUtils.safelyJsonStringfy(v), 1, 100))
                resulTb[k] = TableUtils.deepCopy(v, {})
            end
            if TableUtils.isEmptyTable(resulTb[k]) then
                resulTb[k] = nil
            end
        end
    end
end

function TableUtils.getDelData(t1, t2, resulTb)
    for k ,v in pairs(t1) do
        if type(v) ~= "table" then
            if t1[k ] and not t2[k] then
                resulTb[k] = 1
            end
        else
            if #v ==0 then
                resulTb[k] = {}
                if not t2[k ] then
                    resulTb[k] = 1
                else
                    TableUtils.getDelData(v, t2[k ], resulTb[k ])
                end
            end
            if resulTb[k] ~= 1 and TableUtils.isEmptyTable(resulTb[k ]) then
                resulTb[k] = nil
            end
        end
    end
end

function TableUtils.adjustEmptyArr(tb)
    if not tb then
        return
    end

end

function TableUtils.isEmptyTable(tb)
    for i ,v in pairs(tb) do
        return false
    end
    return true
end

function TableUtils.removeValue(arr, value)
    local index = table.findArrValue(arr, value)
    if index ~= -1 then
        table.spliceArray(arr, index, 1)
    end
end

function TableUtils.turnCsvArrToGameArr(fromArr, transtoNumber)
    if transtoNumber == nil then
        transtoNumber = false
    end
    local toArr = {}
    if fromArr then
        for i, str in ipairs(fromArr) do
            toArr[i] = string.split(str, ",")
            if transtoNumber then
                local tempArr = toArr[i]
                for ii, value in ipairs(tempArr) do
                    local turnValue = tonumber(value)
                    if turnValue or turnValue == 0 then
                        tempArr[ii] = turnValue
                    end
                end
            end
        end
    end
    return toArr
end

function TableUtils.turnCsvStrTogGameArr(fromStr, transtoNumber)
    if transtoNumber == nil then
        transtoNumber = false
    end
    local strLen = #fromStr
    if string.sub(fromStr, strLen, strLen) == ";" then
        fromStr = string.sub(fromStr, 1, strLen - 1)
    end
    local arr = string.split(fromStr, ";")
    return TableUtils.turnCsvArrToGameArr(arr)
end

function TableUtils.clearOneTable(targetTb)
    for i in pairs(targetTb) do
        targetTb[i] = nil
    end
end

function TableUtils.safelyJsonStringfy(obj)
    local rt = ''
    local rt =  try_catch(json.encode,TableUtils.emptyTable,obj)
    return rt
end

function TableUtils.emptyTable()
    return {}
end
function TableUtils.emptyString()
    return ""
end


function TableUtils.safelyJsonParse(str)
    local rt = nil
    local rt =  try_catch(json.decode,TableUtils.emptyString,str)
    return rt
end

function TableUtils.safelyToString(obj)
    return tostring(obj)
end


--矩形工具
rectEx = rectEx or {}
--是否包含一个点rect格式 x,y,w,h r = {x= x,y=y,w =w,h = h},    border 检测边界
function rectEx.contain(r, x, y, border)
    border = border and border or 0
    r.w = r.w or r.width
    r.h = r.h or r.height
    if x < r.x - border or x > r.x + r.w + border or y < r.y - border or y > r.y + r.h + border then
        return false
    end
    return true

end

function rectEx.mergeRect(rect1, rect2)
    -- rect1宽高为0，直接返回rect2
    if not rect1 or rect1.width <= 0 or rect1.height <= 0 then
        return rect2
    end
    -- rect2宽高为0，直接返回rect1
    if not rect2 or rect2.width <= 0 or rect2.height <= 0 then
        return rect1
    end
    -- 都有宽高，合并之
    local _minx = math.min(rect1.x, rect2.x)
    local _maxx = math.max(rect1.x + rect1.width, rect2.x + rect2.width)
    local _miny = math.min(rect1.y, rect2.y)
    local _maxy = math.max(rect1.y + rect1.height, rect2.y + rect2.height)
    return cc.rect(_minx, _miny, _maxx - _minx, _maxy - _miny)
end


