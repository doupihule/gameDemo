DisplayUtils = class('DisplayUtils')
function DisplayUtils.swapChildrenAt(parent, index1, index2)
    local child1 = parent:getChildAt(index1)
    local child2 = parent:getChildAt(index2)
    parent:setChildIndex(child1, index2)
    parent:setChildIndex(child2, index1)
end

function DisplayUtils.getModelByUrl(url, parentObj, isClone)

    return goal
end

function DisplayUtils.createSkeletonExpand(aniName, aniMode, completeFunc, thisObj, expandParams)
    return nil
end

DisplayUtils.lightMatrix = { 0.52, 0, 0, 0, 0, 0, 0.52, 0, 0, 0, 0, 0, 0.52, 0, 0, 0, 0, 0, 0.52, 0 };
DisplayUtils.littleRedMatrix = { 1, 0, 0, 0, 80, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 };
DisplayUtils.darkMatrix = { 0.3, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1, 0 };
function DisplayUtils.setViewDark(view)
    DisplayUtils.setViewMatrixByMatirx(view, DisplayUtils.darkMatrix)
end

function DisplayUtils.setViewLight(view)
    DisplayUtils.setViewMatrixByMatirx(view, DisplayUtils.lightMatrix)
end

function DisplayUtils.setViewLittleRed(view)
    DisplayUtils.setViewMatrixByMatirx(view, DisplayUtils.littleRedMatrix)
end

function DisplayUtils.clearViewFilter(view)
    view.filters = nil
end

function DisplayUtils.setViewColorTransform(view, r, g, b, a, offr, offg, offb, offa)
    if r == nil then
        r = 1
    end
    if g == nil then
        g = 1
    end
    if b == nil then
        b = 1
    end
    if a == nil then
        a = 1
    end
    if offr == nil then
        offr = 0
    end
    if offg == nil then
        offg = 0
    end
    if offb == nil then
        offb = 0
    end
    if offa == nil then
        offa = 0
    end
    local matrixArr = { r, 0, 0, 0, offr, 0, g, 0, 0, offg, 0, 0, b, 0, offb, 0, 0, 0, a, offa }
end

function DisplayUtils.setViewMatrixFilter(view, r1, r2, r3, r4, offr, g1, g2, g3, g4, offg, b1, b2, b3, b4, offb, a1, a2, a3, a4, offa)
    local matrixArr = { r1, r2, r3, r4, offr, g1, g2, g3, g4, offg, b1, b2, b3, b4, offb, a1, a2, a3, a4, offa }
end

function DisplayUtils.setViewMatrixByMatirx(view, matrix)
end

function DisplayUtils.localToLocalPos(p1Pos, sp1, sp2)
    sp1:localToGlobal(p1Pos)
    sp2:globalToLocal(p1Pos)
    return p1Pos
end

function DisplayUtils.createSpriteFrame(imagePath, imageHead, labelsArr, anchorX, anchorY)
    if anchorX == nil then
        anchorX = 0.5
    end
    if anchorY == nil then
        anchorY = 0.5
    end
    local spriteFrame = SpriteFrameExpand.new()
    spriteFrame:setFrameData(imagePath, imageHead, labelsArr, anchorX, anchorY, 1)
    return spriteFrame
end

function DisplayUtils.createSpriteFrameByShort(imagePath, imageHead, labelsArr, anchorX, anchorY)
    if anchorX == nil then
        anchorX = 0.5
    end
    if anchorY == nil then
        anchorY = 0.5
    end
    local spriteFrame = SpriteFrameExpand.new()
    spriteFrame:setFrameData(imagePath, imageHead, labelsArr, anchorX, anchorY, 2)
    return spriteFrame
end

local spinePath = "Assets/Animation/Prefabs/"
function DisplayUtils.createSpine(name)
    local spani = SpineGraphicExpand.new(spinePath .. name .. ".prefab");
    return spani
end
