MathUtils = class('MathUtils')
function MathUtils:ctor()
end
MathUtils.tempVector3_1 = VectorTools.createVector3();
MathUtils.tempVector3_2 = VectorTools.createVector3();
MathUtils.tempVector3_3 = VectorTools.createVector3();
function MathUtils.countAngle(p1, p2)
    local dx = p1.x - p2.x
    local dy = p1.y - p2.y
    return math.atan(dy, dx)
end

function MathUtils.countDistance(p1, p2)
    local dx = p1.x - p2.x
    local dy = p1.y - p2.y
    return math.sqrt(dx * dx + dy * dy)
end

function MathUtils.countDistanceByNums(x1, y1, x2, y2)
    local dx = x2 - x1
    local dy = y2 - y1
    return math.sqrt(dx * dx + dy * dy)
end

function MathUtils.countDistanceSquart(p1, p2)
    local dx = p1.x - p2.x
    local dy = p1.y - p2.y
    return dx * dx + dy * dy
end

function MathUtils.countPointLenth(p)
    return math.sqrt(p.x * p.x + p.y * p.y)
end

function MathUtils.checkInRect(x, y, rx, ry, rw, rh)
    if ((x < rx or x > rx + rw) or y < ry) or y > ry + rh then
        return false
    end
    return true
end




function MathUtils.subtract2(a, b, out)
    MathUtils.tempVector3_1.x = a.x
    MathUtils.tempVector3_1.y = a.y
    MathUtils.tempVector3_2.x = b.x
    MathUtils.tempVector3_2.y = b.y
    VectorTools.subtract(MathUtils.tempVector3_1, MathUtils.tempVector3_2, MathUtils.tempVector3_3)
    out.x = MathUtils.tempVector3_3.x
    out.y = MathUtils.tempVector3_3.y
    return out
end
