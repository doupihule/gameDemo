WaitManager = class('WaitManager')

function WaitManager:ctor()
    self.waitList = {}
    self.waitPool = {}
    self._waitView = ReqLoadingUI.new()
    self._waitView.width = ScreenAdapterTools.width
    self._waitView.height = ScreenAdapterTools.height
    TimerManager.getInstance().add(self,this.timeCallBack,1000,9999999);
end

function WaitManager.getInstance()
    if not WaitManager._instance then
        WaitManager._instance = WaitManager.new()
    end
    return WaitManager._instance
end

function WaitManager:add(cmd)
    local wait = nil
    if #self.waitPool > 0 then
        wait = table.shiftArray(self.waitPool)
    else
        wait = WaitEntity.new()
    end
    wait.cmd = cmd
    wait.time = Client.getInstance():getMiniServerTime()
    table.insert(self.waitList, wait)
    self:showOrHideWaitView(true)
    TimerManager.getInstance().add(self,this.timeCallBack,1000,9999999);
end

function WaitManager:remove(cmd)
    local len = #self.waitList
    local i = 0
    for i = len,1,-1 do
        if cmd == self.waitList[i].cmd then
            table.insert(self.waitPool, self.waitList[i]);
            table.remove(self.waitList, i );
            break
        end
    end
    self:checkWait()
end

function WaitManager:clear()
    local len = #self.waitList;
    for i = len,1,-1 do
        table.insert(self.waitPool, self.waitList[i])
        table.remove(this.waitList,i);
    end
    self:checkWait()
end

function WaitManager:checkWait()
    if #self.waitList <= 0 then
        self:showOrHideWaitView(false)
        TimerManager.getInstance().removeByObject(self);
    end
end

function WaitManager:timeCallBack()
    local len = #self.waitList
    local nowTime = Client.getInstance():getMiniServerTime()
    local i = 0
    for i = len,1,-1 do
        if nowTime - self.waitList[i].time > 20000 then
            table.insert(self.waitPool, self.waitList[i]);
            table.remove(self.waitList, i );
            break
        end
    end
    self:checkWait()
end

function WaitManager:checkIsWaiting()
    return #self.waitList ~= 0
end

function WaitManager:showOrHideWaitView(value)
    if value then
        if not self._waitView.parent then
            WindowManager.topUILayer:addChild(self._waitView)
        end
        self._waitView:setViewActive(true)
        self._waitView:setData(nil)
    else
        self._waitView:setViewActive(false)
        self._waitView:removeSelf()
    end
end
