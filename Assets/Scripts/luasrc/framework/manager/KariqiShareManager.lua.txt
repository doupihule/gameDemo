require("framework/consts/KariquShareConst")
require("framework/common/HttpMessage")
require("framework/common/UserInfo")
require("framework/manager/LogsManager")
require("game/sys/consts/GameConsts")
require("framework/manager/JumpManager")
require("game/sys/consts/JumpConst")
require("framework/manager/TimerManager")
require("utils/Global")
require("framework/manager/MainModule")
require("framework/utils/TableUtils")
require("framework/common/kakura/Client")
require("framework/manager/ShareOrTvManager")
require("framework/utils/RandomUtis")

KariqiShareManager = class('KariqiShareManager')

KariqiShareManager.onLineTime = 0;
KariqiShareManager.isInLine = false;
KariqiShareManager.timeCode = 0;
KariqiShareManager.defaultShareVedioTag = "SCORE_STRATEGY";
KariqiShareManager.defaultContentParams = {contentType="application/json;charset=UTF-8"};
KariqiShareManager._hasSendTask = false;
function KariqiShareManager.kariquLogin(callback, thisObj)
  if callback == nil then
    callback=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if not KariqiShareManager.checkIsKariquChannel() then
    if not KariqiShareManager._hasSendTask then
      KariqiShareManager._hasSendTask = true
      MainModule.instance:changeShowMainTask(-1, MainModule.task_kariquLogin, "kariquLogin")
    end
    callback and callback:call(thisObj)
    return
  end
  KariqiShareManager.callBack = callback
  KariqiShareManager.thisObj = thisObj
  local url = KariquShareConst.KARIQU_LOGIN_URL
  local userinfo = UserInfo.platform.platformUserInfo
  local name = userinfo and userinfo.name
  local headUrl = userinfo and userinfo.headImage
  local channel = KariqiShareManager.getChannelValue()
  local params = {openid=UserInfo.channelUserId, channel=channel or "", nickname=name or "", headicon=headUrl or "", sourceOpenid=UserInfo.platform.shareLinkParams and UserInfo.platform.shareLinkParams.inviterRid or ""}
  HttpMessage.instance:sendOtherHttpRequest(url, params, function(data)
    if data then
      LogsManager.echo("kariqu zm.kariquLoginResult------------", data, TableUtils.safelyJsonStringfy(params))
      data = JSON:parse(data)
      KariqiShareManager.kariqiUserId = (data and data.data) and data.data.userId
      KariqiShareManager.initShareImageInfo(0, nil, nil)
      KariqiShareManager.initShareVedioMethod()
      KariqiShareManager.postShareLink()
    end
  end
  , KariqiShareManager, "post")
  local data = {{eventId=KariquShareConst.KARIQU_GETOPENID, extraNum=0}, {eventId=KariquShareConst.KARIQU_GETLAUNCHSCENE, detail=JSON:stringify({scene=String(Global.sceneId)}), extraNum=0}}
  KariqiShareManager.addKariquPoint({list=data})
  TimerManager.instance:add(KariqiShareManager.setonLineTime, KariqiShareManager, 30000)
  KariqiShareManager.serchConfigInfo(callback, thisObj)
end

function KariqiShareManager.getChannelValue()
  if not UserInfo.platform.shareLinkParams then
    return ""
  end
  -- [ts2lua]UserInfo.platform.shareLinkParams下标访问可能不正确
  local rt = UserInfo.platform.shareLinkParams[KariquShareConst.KARIQU_CHANNEL_TITLE]
  if not rt then
    return ""
  end
  rt = KariquShareConst.KARIQU_CHANNEL_TITLE .. "=" .. rt
  return rt
end

function KariqiShareManager.sendNewLevel(data)
  if not KariqiShareManager.checkIsKariquChannel() then
    return
  end
  local url = KariquShareConst.KARIQU_SAVELEVEL_URL
  local params = {userId=Number(KariqiShareManager.kariqiUserId), guanqia=Number(data.guanqia)}
  if data.compose then
    -- [ts2lua]params下标访问可能不正确
    params["compose"] = Number(data.compose)
  end
  HttpMessage.instance:sendOtherHttpRequest(url, params, function(data)
    if data then
      LogsManager.echo("kariqu zm.kariquNewLevelResult------------", data, params)
    end
  end
  , KariqiShareManager, "post")
end

function KariqiShareManager.serchConfigInfo(callback, thisObj)
  if callback == nil then
    callback=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if not KariqiShareManager.checkIsKariquChannel() then
    callback and callback:call(thisObj)
    return
  end
  if KariqiShareManager.kariquConfigValue then
    callback and callback:call(thisObj)
    return
  end
  local url = KariquShareConst.KARIQU_CONFIG_URL
  local datas = {param={"MpCheckChannel"}}
  LogsManager.echo("kariqu zm.kariquserchConfig------------", datas)
  local onErrorCall = function()
    KariqiShareManager.kariquConfigValue = nil
    callback and callback:call(thisObj)
    if not KariqiShareManager._hasSendTask then
      KariqiShareManager._hasSendTask = true
      MainModule.instance:changeShowMainTask(-1, MainModule.task_kariquLogin, "kariquLogin")
    end
  end
  
  local webParams = {errorCall=onErrorCall}
  HttpMessage.instance:sendOtherHttpRequest(url, datas, function(data)
    local value = nil
    if data then
      data = TableUtils.safelyJsonParse(data)
      if data.data then
        local info = data.data
        local i = 0
        repeat
          if info[i+1].key == "MpCheckChannel" then
            value = info[i+1].value
            break
          end
          i=i+1
        until not(i < #info)
      end
      LogsManager.echo("kariqu zm.kariquserchConfigResult------------", data)
    end
    KariqiShareManager.kariquConfigValue = value
    callback and callback:call(thisObj)
    if not KariqiShareManager._hasSendTask then
      KariqiShareManager._hasSendTask = true
      MainModule.instance:changeShowMainTask(-1, MainModule.task_kariquLogin, "kariquLogin")
    end
  end
  , KariqiShareManager, "post", webParams)
end

function KariqiShareManager.onEvent(eventId, eventData, extraNum)
  if eventData == nil then
    eventData={}
  end
  if extraNum == nil then
    extraNum=0
  end
  local data = {list={{eventId=eventId, detail=JSON:stringify(eventData), extraNum=extraNum}}}
  KariqiShareManager.addKariquPoint(data)
end

function KariqiShareManager.addKariquPoint(data, callback, thisObj)
  if callback == nil then
    callback=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if not KariqiShareManager.checkIsKariquChannel() then
    return
  end
  local url = KariquShareConst.KARIQU_GAMESTATIC_URL
  local params = {appid=GameConsts.GAME_APPID, uuid=UserInfo.channelUserId, channel=KariqiShareManager.getChannelValue(), list=data.list}
  HttpMessage.instance:sendOtherHttpRequest(url, params, function(data)
    if data then
      LogsManager.echo("kariqu zm.addKariquPointResult------------", data, params)
      callback and callback:call(thisObj)
    end
  end
  , KariqiShareManager, "post")
end

function KariqiShareManager.addAdvPoint(data, isSend)
  if isSend == nil then
    isSend=false
  end
  if not KariqiShareManager.checkIsKariquChannel() then
    return
  end
  local param = {eventId=data.eventId, detail=JSON:stringify({位置=data.name}), extraNum=0}
  if not KariqiShareManager.advParamsArr then
    KariqiShareManager.advParamsArr = {}
  end
  table.insert(KariqiShareManager.advParamsArr, param)
  if isSend then
    local tempArr = TableUtils.copyOneArr(KariqiShareManager.advParamsArr, {})
    -- [ts2lua]修改数组长度需要手动处理。
    KariqiShareManager.advParamsArr.length = 0
    KariqiShareManager.addKariquPoint({list=tempArr}, function()
      KariqiShareManager.advParamsArr = {}
    end
    , KariqiShareManager)
  end
end

function KariqiShareManager.setonLineTime()
  KariqiShareManager.onLineTime = 30
  local params = {{eventId=KariquShareConst.KARIQU_ONLINETIME, detail="{}", extraNum=KariqiShareManager.onLineTime}}
  KariqiShareManager.addKariquPoint({list=params})
end

function KariqiShareManager.checkIsKariquChannel()
  if JumpManager.jumpChannel ~= JumpConst.JUMP_CHANNEL_KARIQU then
    return false
  end
  return true
end

function KariqiShareManager.initShareImageInfo(type, callBack, thisObj)
  if type == nil then
    type=0
  end
  if callBack == nil then
    callBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  local params = {Appid=GameConsts.GAME_APPID, type=0}
  local onShareCall = function(data)
    data = TableUtils.safelyJsonParse(data)
    if data and data.code == 0 then
      KariqiShareManager.shareOrderData = {}
      local i = 0
      repeat
        local shareData = data.data[i+1]
        local tempObj = {desc=shareData.title, imgUrl=shareData.imageurl, shareId=shareData.shareid}
        table.insert(KariqiShareManager.shareOrderData, tempObj)
        i=i+1
      until not(i < #data.data)
      LogsManager.echo("kariqu xd initShareImageInfo:", data, TableUtils.safelyJsonStringfy(KariqiShareManager.shareOrderData))
      callBack and callBack:call(thisObj, data)
    end
  end
  
  HttpMessage.instance:sendOtherHttpRequest(KariquShareConst.KARIQU_SHAREIMAGEINFO_URL, params, onShareCall, KariqiShareManager, "post", KariqiShareManager.defaultContentParams)
end

KariqiShareManager._currentShareIndex = -1;
function KariqiShareManager.getOneRandomShareInfo()
  if not KariqiShareManager.checkIsKariquChannel() then
    return nil
  end
  if not KariqiShareManager.shareOrderData or #KariqiShareManager.shareOrderData == 0 then
    return nil
  end
  KariqiShareManager._currentShareIndex=KariqiShareManager._currentShareIndex+1
  if KariqiShareManager._currentShareIndex >= #KariqiShareManager.shareOrderData then
    KariqiShareManager._currentShareIndex = 0
  end
  -- [ts2lua]KariqiShareManager.shareOrderData下标访问可能不正确
  local shareData = KariqiShareManager.shareOrderData[KariqiShareManager._currentShareIndex]
  KariqiShareManager._currentShareData = shareData
  shareData.extraData = {sourceOpenid=UserInfo.channelUserId, shareId=shareData.shareId, ShareTm=Client.instance.miniserverTime}
  -- [ts2lua]shareData.extraData下标访问可能不正确
  shareData.extraData[KariquShareConst.KARIQU_CHANNEL_TITLE] = "001"
  LogsManager.echo("kariqu getOneRandomShareInfo", TableUtils.safelyJsonStringfy(shareData))
  return shareData
end

function KariqiShareManager.saveShareRecord()
  if not KariqiShareManager.checkIsKariquChannel() then
    return
  end
  if not KariqiShareManager._currentShareData then
    LogsManager.warn("没有分享数据,可能是网络原因没有获取到")
    return
  end
  local params = {Openid=UserInfo.channelUserId, ShareId=KariqiShareManager._currentShareData.extraData.shareId, ShareTm=KariqiShareManager._currentShareData.extraData.ShareTm}
  local onShareCall = function(data)
    LogsManager.echo("kariqu xd saveShareRecord:", data, "params:", TableUtils.safelyJsonStringfy(params))
  end
  
  HttpMessage.instance:sendOtherHttpRequest(KariquShareConst.KARIQU_SHAREBEGIN_URL, params, onShareCall, KariqiShareManager, "post", KariqiShareManager.defaultContentParams)
end

function KariqiShareManager.postShareLink()
  if not KariqiShareManager.checkIsKariquChannel() then
    return
  end
  local sharelink = UserInfo.platform.shareLinkParams
  if not sharelink or not sharelink.sourceOpenid then
    return
  end
  local params = {openid=UserInfo.channelUserId, shareId=sharelink.shareId or "", shareTm=sharelink.ShareTm or "", sourceOpenid=sharelink.sourceOpenid or ""}
  local onShareCall = function(data)
    LogsManager.echo("kariqu  postShareLink:", data, "params:", TableUtils.safelyJsonStringfy(params))
  end
  
  HttpMessage.instance:sendOtherHttpRequest(KariquShareConst.KARIQU_POSTENTERGAME_URL, params, onShareCall, KariqiShareManager, "post", KariqiShareManager.defaultContentParams)
end

KariqiShareManager.allRuleDatasArr = {};
function KariqiShareManager.initShareVedioMethod()
  if not KariqiShareManager.kariqiUserId then
    return
  end
  local params = {userId=KariqiShareManager.kariqiUserId}
  local onCallBack = function(data)
    LogsManager.echo("kariqu initShareVedioMethod", data, TableUtils.safelyJsonStringfy(params))
    data = TableUtils.safelyJsonParse(data)
    if data and data.code == 0 then
      local ruleDatas = data.data
      local i = 0
      repeat
        local tempInfo = ruleDatas[i+1]
        if tempInfo.tag == KariqiShareManager.defaultShareVedioTag then
          KariqiShareManager.defaultRuleData = tempInfo
          LogsManager.echo("kariqu defaultRuleData init")
        end
        local totalCount = 0
        local s = 0
        repeat
          totalCount = totalCount + tempInfo.rule[s+1].count
          s=s+1
        until not(s < #tempInfo.rule)
        tempInfo.totalCount = totalCount
        -- [ts2lua]KariqiShareManager.allRuleDatasArr下标访问可能不正确
        KariqiShareManager.allRuleDatasArr[tempInfo.tag] = tempInfo
        i=i+1
      until not(i < #ruleDatas)
    end
  end
  
  HttpMessage.instance:sendOtherHttpRequest(KariquShareConst.KARIQU_SHAREMETHOD_URL, params, onCallBack, KariqiShareManager, "post", KariqiShareManager.defaultContentParams)
end

KariqiShareManager._cacheShareVedioMethod = {};
function KariqiShareManager.getShareVedioMethod(tag)
  if tag == nil then
    tag=nil
  end
  if not KariqiShareManager.checkIsKariquChannel() then
    return nil
  end
  if not KariqiShareManager.defaultRuleData then
    LogsManager.echo("kariqu 分享序列_数据还没有初始化完毕")
    return nil
  end
  tag = String(tag)
  -- [ts2lua]KariqiShareManager._cacheShareVedioMethod下标访问可能不正确
  if not KariqiShareManager._cacheShareVedioMethod[tag] then
    -- [ts2lua]KariqiShareManager.allRuleDatasArr下标访问可能不正确
    local rt = KariqiShareManager.allRuleDatasArr[tag]
    if not rt then
      -- [ts2lua]KariqiShareManager._cacheShareVedioMethod下标访问可能不正确
      KariqiShareManager._cacheShareVedioMethod[tag] = TableUtils.deepCopy(KariqiShareManager.defaultRuleData, {})
    else
      -- [ts2lua]KariqiShareManager._cacheShareVedioMethod下标访问可能不正确
      KariqiShareManager._cacheShareVedioMethod[tag] = TableUtils.deepCopy(rt, {})
    end
  end
  -- [ts2lua]KariqiShareManager._cacheShareVedioMethod下标访问可能不正确
  return KariqiShareManager._cacheShareVedioMethod[tag]
end

KariqiShareManager._shareTvResultMap = {};
KariqiShareManager.currentShareVedioMethod = nil;
function KariqiShareManager.getShareOrTvType(tag, count)
  if tag == nil then
    tag=nil
  end
  if count == nil then
    count=0
  end
  if not KariqiShareManager.checkIsKariquChannel() then
    return nil
  end
  local data = KariqiShareManager.getShareVedioMethod(tag)
  if not data then
    LogsManager.echo("kariqu 没有找到分享视频序列数据,tag", tag)
    return nil
  end
  -- [ts2lua]KariqiShareManager._shareTvResultMap下标访问可能不正确
  if not KariqiShareManager._shareTvResultMap[tag] then
    -- [ts2lua]KariqiShareManager._shareTvResultMap下标访问可能不正确
    KariqiShareManager._shareTvResultMap[tag] = {}
  end
  -- [ts2lua]KariqiShareManager._shareTvResultMap下标访问可能不正确
  -- [ts2lua]KariqiShareManager._shareTvResultMap[tag]下标访问可能不正确
  local tempObj = KariqiShareManager._shareTvResultMap[tag][count]
  if not tempObj then
    tempObj = {}
    -- [ts2lua]KariqiShareManager._shareTvResultMap下标访问可能不正确
    -- [ts2lua]KariqiShareManager._shareTvResultMap[tag]下标访问可能不正确
    KariqiShareManager._shareTvResultMap[tag][count] = tempObj
  else
    KariqiShareManager.currentShareVedioMethod = tempObj
    return tempObj
  end
  local firstRules = nil
  local rules = data.rule
  local totalCount = data.totalCount
  local yushu = count % totalCount
  local currentCount = 0
  local endCount = 0
  local ruleIndex = 0
  local i = 0
  repeat
    firstRules = rules[i+1]
    endCount = currentCount + firstRules.count
    ruleIndex = i
    if yushu >= currentCount and yushu < endCount then
      break
    end
    currentCount = endCount
    i=i+1
  until not(i < #rules)
  if yushu == 0 or not data.__tempShareRate then
    data.__tempShareRate = TableUtils.copyOneArr(data.shareRate, {})
    data.__tempShareTime = TableUtils.copyOneArr(data.shareTime, {})
  end
  local shareRate = data.__tempShareRate
  local shareTime = data.__tempShareTime
  if firstRules.type == "share" then
    tempObj.type = ShareOrTvManager.TYPE_SHARE
  else
    tempObj.type = ShareOrTvManager.TYPE_ADV
  end
  tempObj.shareRateArr = shareRate
  tempObj.shareTimeArr = shareTime
  LogsManager.echo("kariqu getShareOrTvType,tag:", tag, "count:", count, "ruleIndex:", ruleIndex, TableUtils.safelyJsonStringfy(tempObj))
  LogsManager.echo("kariqu getShareOrTvType,tagRuleData:", TableUtils.safelyJsonStringfy(data))
  KariqiShareManager.currentShareVedioMethod = tempObj
  return tempObj
end

function KariqiShareManager.checkShareResult(distime)
  if not KariqiShareManager.checkIsKariquChannel() then
    return -1
  end
  if not KariqiShareManager.currentShareVedioMethod then
    return -1
  end
  if KariqiShareManager.currentShareVedioMethod.type == ShareOrTvManager.TYPE_ADV then
    return -1
  end
  local shareRateArr = KariqiShareManager.currentShareVedioMethod.shareRateArr
  local shareTimeArr = KariqiShareManager.currentShareVedioMethod.shareTimeArr
  local shareRate = nil
  local shareTime = nil
  if #shareRateArr > 0 then
    shareRate = shareRateArr:shift()
    if shareRate == 0 then
      if #shareTimeArr > 0 then
        shareTime = shareTimeArr:shift()
      else
        shareTime = -1
      end
    end
  else
    if #shareTimeArr > 0 then
      shareTime = shareTimeArr:shift()
    else
      shareTime = -1
    end
    shareRate = -1
  end
  LogsManager.echo("kariqu checkShareResult", "shareRate", shareRate, "shareTime", shareTime)
  if shareRate == -1 or shareTime == -1 then
    return -1
  elseif shareRate == 0 then
    if distime > shareTime * 1000 then
      return 1
    else
      return 0
    end
  else
    local random = RandomUtis.getOneRandomInt(100, 0, 99)
    if random < shareRate then
      return 1
    end
    return 0
  end
end
