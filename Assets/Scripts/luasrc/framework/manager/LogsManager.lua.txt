














LogsManager = class('LogsManager')
LogsManager.logsArr = {};
LogsManager.maxCancheLength = 1000;
LogsManager._sendCache = {};
LogsManager.updateFlag = false;
LogsManager.autoDisableFlag = false;
LogsManager.idTimeout = nil;
LogsManager.autoFlag = true;
LogsManager.statVis = false;
LogsManager.sendMaxLength = 10000;
LogsManager._aliyunLogsUrl = "https://client-error-log.cn-beijing.log.aliyuncs.com/logstores/client_error_log/track?APIVersion=0.6.0&";
LogsManager._aliyunStaUrl = "https://client-business-log.cn-beijing.log.aliyuncs.com/logstores/client_event_log/track?APIVersion=0.6.0&";
LogsManager._aliyunActiveUrl = "https://client-business-log.cn-beijing.log.aliyuncs.com/logstores/client_active_log/track?APIVersion=0.6.0&";
LogsManager._aliyunLoadingUrl = "https://client-business-log.cn-beijing.log.aliyuncs.com/logstores/client_loading_log/track?APIVersion=0.6.0&";
LogsManager.errorTag_sysError = "sys";
LogsManager.errorTag_gameError = "game";
LogsManager.errorTage_serverError = "server";
LogsManager.errorTage_clientLog = "clientLog";
LogsManager.errorTage_memoryWarning = "memoryWarning";
LogsManager.ignoreLogs = {"1201", "1630", "1203", "arena_wordAppear", "arena_wordGuessRight"};
LogsManager.prevX = 0;
LogsManager.prevY = 0;
LogsManager.isOpenLogsDebug = false;
function LogsManager:ctor() end
function LogsManager.initLogsManager()
  LogsManager.logsArr = {}
end

function LogsManager.echo(message, ...)
  local resultArr = LogsManager.turnStr("echo", message, {...})
  print(unpack(resultArr))
end

function LogsManager.warn(message, ...)
  local resultArr = LogsManager.turnStr("warn", message, {...})
  print(unpack(resultArr))
end



function LogsManager.errorTag(errorId, message, ...)
  if errorId == nil then
    errorId=nil
  end
  local resultArr = LogsManager.turnStr("error", message, optionalParams, true)
  local arr = resultArr:slice(1, #resultArr)
  local concatStr = "" .. arr:join(",")
  if UserInfo.isTest() then
    WindowManager.ShowTip("有错误，去看日志！")
  end
  TimerManager.getInstance():add(LogsManager.sendErrorToPlatform, LogsManager, 10, 1, false, {concatStr, LogsManager.errorTag_gameError, 80, errorId})
  LogsManager.insterOneLogs(concatStr)
  print(unpack(resultArr))
end

function LogsManager.systemError(message, ...)
  local resultArr = LogsManager.turnStr("sysError", message, optionalParams, true)
  local arr = resultArr:slice()
  arr:splice(0, 1)
  local concatStr = "" .. arr:join(",")
  TimerManager.getInstance():add(LogsManager.sendErrorToPlatform, LogsManager, 10, 1, false, {concatStr, LogsManager.errorTag_sysError})
  LogsManager.insterOneLogs(concatStr)
  print(unpack(resultArr))
  if UserInfo.isWeb() then
    WindowManager.ShowTip("有错误，去看日志！")
  end
end

function LogsManager.sendErrorToPlatform(errorStr, tag, maxLength, errorId, logLength, startLine, pieceLength, sendCount)
  if tag == nil then
    tag=''
  end
  if maxLength == nil then
    maxLength=1000
  end
  if errorId == nil then
    errorId=nil
  end
  if logLength == nil then
    logLength=80
  end
  if startLine == nil then
    startLine=0
  end
  if pieceLength == nil then
    pieceLength=60
  end
  if sendCount == nil then
    sendCount=1
  end
  local id = 0
  while(logLength > pieceLength)
  do
    LogsManager.sendErrorToPlatformByPiece(errorStr, tag, maxLength, errorId, pieceLength, startLine, id + 1, sendCount)
    logLength = logLength - pieceLength
    startLine = startLine + pieceLength
    id=id+1
  end
  if id then
    LogsManager.sendErrorToPlatformByPiece(errorStr, tag, maxLength, errorId, logLength, startLine, id + 1, sendCount)
  else
    LogsManager.sendErrorToPlatformByPiece(errorStr, tag, maxLength, errorId, logLength, startLine, 0, sendCount)
  end
end

function LogsManager.sendErrorToPlatformByPiece(errorStr, tag, maxLength, errorId, logLength, startLine, id, sendCount)
  if tag == nil then
    tag=''
  end
  if maxLength == nil then
    maxLength=1000
  end
  if errorId == nil then
    errorId=nil
  end
  if logLength == nil then
    logLength=80
  end
  if startLine == nil then
    startLine=0
  end
  if id == nil then
    id=0
  end
  if UserInfo.isWeb() then
    return
  end
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_SENDERRORLOG) then
    return
  end
  errorStr = LogsManager.turnURIContent(errorStr)
  errorStr = string.gsub(errorStr,'[%n%r]+/g', " ")
  errorStr = errorStr:slice(0, math.min(#errorStr, maxLength))
  LogsManager.sendDataToAiCloud(errorStr, tag, logLength, errorId, startLine, id, sendCount)
end

function LogsManager.getMaxLogsLength()
  local state = GameSwitch.getSwitchState(GameSwitch.SWITCH_TURNURL_PLAT)
  if state and state:find(UserInfo.platformId) ~= -1 then
    return LogsManager.sendMaxLength
  end
  return LogsManager.sendMaxLength / 3
end

function LogsManager.turnURIContent(str)
  local state = GameSwitch.getSwitchState(GameSwitch.SWITCH_TURNURL_PLAT)
  if state and state:find(UserInfo.platformId) ~= -1 then
    return str
  end
  return encodeURIComponent(str)
end

function LogsManager.sendDataToAiCloud(errorStack, tag, logLength, errorId, startLine, messageId, sendCount)
  if logLength == nil then
    logLength=80
  end
  if errorId == nil then
    errorId=nil
  end
  if startLine == nil then
    startLine=0
  end
  if messageId == nil then
    messageId=0
  end
  if sendCount == nil then
    sendCount=1
  end
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_ALIYUN) then
    return
  end
  local errorName = messageId .. "_" .. errorStack
  -- [ts2lua]LogsManager._sendCache下标访问可能不正确
  if LogsManager._sendCache[errorName] then
    return
  end
  -- [ts2lua]LogsManager._sendCache下标访问可能不正确
  LogsManager._sendCache[errorName] = true
  local id = nil
  if not errorId then
    id = Md5:init(errorStack)
  else
    id = errorId
  end
  local errorTagGroup = GameSwitch.getSwitchState(GameSwitch.LOGS_ERRORTAG_GROP)
  if errorTagGroup and errorTagGroup:find(errorId) ~= -1 then
    LogsManager.echo("忽略报错日志", errorId)
    return
  end
  local message = ""
  if messageId then
    message = messageId .. "_"
  end
  local params = {id=id, game=GameConsts.gameCode, 
        platform=PackConfigManager.getInstance():getPlatform().platform, 
        time=Client.getInstance():getServerTime(), 
        os=Global.getOs(), 
        device=Global.deviceModel, 
        cver=Global.client_version, 
        ver=Global.version, 
        rid=UserModel.getInstance():getUserRid(), 
        error_message=message, 
        error_stack=errorStack, 
        error_type=tag, context="", 
        deviceId=Global.deviceId}
  local sdkInfo = Global.getSDKInfo()
  if sdkInfo then
    params["context"] = sdkInfo .. params["context"]
  end
  local urlParams = HttpMessage.getInstance():objectToUrlParam(params)
  local url = LogsManager._aliyunLogsUrl + urlParams
  local onErrorCall = function()
    print("__onerrorCall")
    LogsManager.sendErrorToPlatform(errorStack, tag, 200, errorId, 60, 0, 30, 2)
  end
  
  local webParams = {errorCall=onErrorCall, isOrigin=true, thisObj=LogsManager, sendCount=sendCount}
  local allLength = LogsManager.getMaxLogsLength() - #url
  -- [ts2lua]params下标访问可能不正确
  -- [ts2lua]params下标访问可能不正确
  params["context"] = LogsManager.turnURIContent(params["context"] .. LogsManager.getNearestLogs(logLength, id, startLine, allLength))
  local urlParams1 = HttpMessage.getInstance():objectToUrlParam(params)
  local url1 = LogsManager._aliyunLogsUrl .. urlParams1
  HttpMessage.getInstance():sendOtherHttpRequest(url1, nil, nil, nil, "get", webParams, 1)
end

function LogsManager.sendStaticToAiCloud(eventId, eventData)
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_ALIYUN) then
    return
  end
  local params = {game=GameConsts.gameCode, platform=PackConfigManager.getInstance():getPlatform().platform, cver=Global.client_version, deviceId=Global.deviceId, eventId=eventId, rid=UserModel.getInstance():getUserRid(), device=Global.deviceModel, circleId=LogsManager.getCircleId(), t=cs.GameUtils.CommonUtil.GetTimeMiniStamp()}
  if eventData then
    -- [ts2lua]eventData下标访问可能不正确
    if eventData["sortId"] then
      -- [ts2lua]params下标访问可能不正确
      -- [ts2lua]eventData下标访问可能不正确
      params["sortId"] = eventData["sortId"]
      -- [ts2lua]eventData下标访问可能不正确
      eventData["sortId"] = nil
    end
    -- [ts2lua]eventData下标访问可能不正确
    if eventData["groupId"] then
      -- [ts2lua]params下标访问可能不正确
      -- [ts2lua]eventData下标访问可能不正确
      params["groupId"] = eventData["groupId"]
      -- [ts2lua]eventData下标访问可能不正确
      eventData["groupId"] = nil
    end
    -- [ts2lua]eventData下标访问可能不正确
    if eventData["comeFrom"] then
      -- [ts2lua]params下标访问可能不正确
      -- [ts2lua]eventData下标访问可能不正确
      params["comeFrom"] = eventData["comeFrom"]
      -- [ts2lua]eventData下标访问可能不正确
      eventData["comeFrom"] = nil
    end
    -- [ts2lua]eventData下标访问可能不正确
    if eventData["channelUserId"] then
      -- [ts2lua]params下标访问可能不正确
      -- [ts2lua]eventData下标访问可能不正确
      params["channelUserId"] = eventData["channelUserId"]
      -- [ts2lua]eventData下标访问可能不正确
      eventData["channelUserId"] = nil
    end
    -- [ts2lua]eventData下标访问可能不正确
    if eventData["sex"] then
      -- [ts2lua]params下标访问可能不正确
      -- [ts2lua]eventData下标访问可能不正确
      params["sex"] = eventData["sex"]
      -- [ts2lua]eventData下标访问可能不正确
      eventData["sex"] = nil
    end
    -- [ts2lua]eventData下标访问可能不正确
    if eventData["cver"] then
      -- [ts2lua]params下标访问可能不正确
      -- [ts2lua]eventData下标访问可能不正确
      params["cver"] = eventData["cver"]
      -- [ts2lua]eventData下标访问可能不正确
      eventData["cver"] = nil
    end
  end
  params.childChannelId = UserInfo.platform:getChildChannelKey()
  if eventData and TableUtils.safelyJsonStringfy(eventData) ~= "{}" then
    -- [ts2lua]params下标访问可能不正确
    params["value"] = TableUtils.safelyJsonStringfy(eventData)
  end
  local urlParams = HttpMessage.getInstance():objectToUrlParam(params)
  local url = LogsManager._aliyunStaUrl + urlParams
  local onErrorCall = function()
    print("__onerrorCall")
  end
  
  local webParams = {errorCall=onErrorCall, isOrigin=true}
  HttpMessage.getInstance():sendOtherHttpRequest(url, nil, nil, nil, "get", webParams)
end

function LogsManager.sendActiveToAiCloud(isNew)
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_ALIYUN) then
    return
  end
  local params = {game=GameConsts.gameCode, platform=PackConfigManager.getInstance():getPlatform().platform, deviceId=Global.deviceId, device=Global.deviceModel, isNew=isNew}
  local urlParams = HttpMessage.getInstance():objectToUrlParam(params)
  local url = LogsManager._aliyunActiveUrl + urlParams
  local onErrorCall = function()
    print("__onerrorCall")
  end
  
  local webParams = {errorCall=onErrorCall, isOrigin=true}
  HttpMessage.getInstance():sendOtherHttpRequest(url, nil, nil, nil, "get", webParams)
end

function LogsManager.sendLoadingToAiCloud(time)
  if GameSwitch.checkOnOff(GameSwitch.SWITCH_DISABLE_ALIYUN) then
    return
  end
  -- [ts2lua]lua中0和空字符串也是true，此处StatisticsManager.isNewPlayer需要确认
  local params = {game=GameConsts.gameCode, 
    platform=PackConfigManager.getInstance():getPlatform().platform, 
    deviceId=Global.deviceId, 
    device=Global.deviceModel, 
    isNew=(StatisticsManager.isNewPlayer and 1 or 0), 
    network=DeviceTools.network, time=time}
  LogsManager.echo("yrc1111 sendLoadingToAiCloud", TableUtils.safelyJsonStringfy(params))
  local urlParams = HttpMessage.getInstance():objectToUrlParam(params)
  local url = LogsManager._aliyunLoadingUrl + urlParams
  local onErrorCall = function()
    print("__onerrorCall")
  end
  
  local webParams = {errorCall=onErrorCall, isOrigin=true}
  HttpMessage.getInstance():sendOtherHttpRequest(url, nil, nil, nil, "get", webParams)
end

function LogsManager.insterOneLogs(str)
  local rowLen = 50
  table.insert(LogsManager.logsArr, {label=str})
  if #LogsManager.logsArr > LogsManager.maxCancheLength then
    table.remove(LogsManager.logsArr,1)
  end
  if LogsManager.logPanel then
    if not LogsManager.updateFlag and LogsManager.logPanel.visible then
      Laya.timer:once(500, LogsManager, function()
        if LogsManager.updateFlag and LogsManager.logPanel.visible then
          LogsManager.refreshLog()
        end
        LogsManager.updateFlag = false
      end
      )
      LogsManager.updateFlag = true
    end
  end
end

function LogsManager.getNearestLogs(line, id, startLine, allLength)
  if id == nil then
    id=nil
  end
  if startLine == nil then
    startLine=0
  end
  if id == LogsErrorCode.ALIYUN_SENDERROR then
    return ""
  end
  if line == 0 then
    return LogsManager.logsArr
  end
  local len = #LogsManager.logsArr
  if line + startLine > len then
    line = math.max(0, len - startLine)
  end
  local start = len - line - startLine
  if start < 0 then
    start = 0
  end
  local str = ""
  local i = start
  repeat
    str = str .. LogsManager.logsArr[i+1].label .. "\n"
    i=i+1
  until not(i < start + line)
  if not #str then
    str = "all " .. len .. " start " .. startLine .. " ,log already end"
  end
  if allLength then
    if #str > allLength then
      str = str:slice(0, allLength)
    end
  end
  return str
end

function LogsManager.turnStr(title, message, optionalParams, isError)
  if isError == nil then
    isError=false
  end
  if type(message) ~= "string" then
    message = message .. ""
  end
  local timeStr = LogsManager.getTimeStr(title)
  local resultStr = nil
  local length = #optionalParams
  local arr = nil
  if message:find("#") ~= -1 then
    resultStr = message
    local i = 0
    repeat
      resultStr = string.gsub(resultStr,"#" .. i + 1, optionalParams[i+1])
      i=i+1
    until not(i < length)
    arr = {resultStr}
  else
    if length > 0 then
      resultStr = message .. " " .. optionalParams:join(" ")
    else
      resultStr = message
    end
    table.insert(optionalParams,1,message);
    arr = optionalParams
  end
  resultStr = timeStr .. " " .. resultStr
  if not isError then
    LogsManager.insterOneLogs(resultStr)
  end
  table.insert(arr,1,timeStr);
  return arr
end

function LogsManager.getTimeStr(title)
  return "[" .. title .. " ] "
end



function LogsManager.initLogPanel()
  
end

function LogsManager.checkGM()
  return
end



function LogsManager.showLogPanel()
  
end


function LogsManager.sendAndShowLog()
  LogsManager.sendErrorToPlatform("发送客户端错误日志", LogsManager.errorTage_clientLog, 200, "sendClinetError")
  LogsManager.setLogGroupVisible(true)
end

function LogsManager.setLogGroupVisible(visible)
  
end

function LogsManager.getCircleId()
  if not LogsManager._circleId then
    LogsManager._circleId = Global.deviceId .. "_" .. cs.GameUtils.CommonUtil.GetTimeMiniStamp() .. math.floor(math.random() * 100000)
  end
  return LogsManager._circleId
end
