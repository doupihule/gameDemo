




ResourceManager = class('ResourceManager')
function ResourceManager:ctor() end
ResourceManager.PATHHEAD = "LayaScene_";
ResourceManager.resplatform = "Conventional";
ResourceManager.SPINEPATH = "spine";
function ResourceManager.__getters.instance()
  if not ResourceManager._instance then
    ResourceManager._instance = ResourceManager()
  end
  return ResourceManager._instance
end

function ResourceManager.loadMult3dmodel(models, sceneModel, callBack, thisObj, params)
  if sceneModel == nil then
    sceneModel=nil
  end
  if callBack == nil then
    callBack=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if params == nil then
    params=nil
  end
  local scenePackName = nil
  local packs = {}
  local urls = {}
  if sceneModel then
    scenePackName = ResourceManager.get3dodelPackName(sceneModel)
    if ResourceManager.check3dIsSubpack() then
      SubPackageManager.insertDynamicSubPack(scenePackName, ResourceManager.get3DModelPath(sceneModel) .. "/" .. scenePackName)
    end
    table.insert(urls, ResourceManager.get3dmodelUrl(sceneModel, true))
    table.insert(packs, scenePackName)
  end
  local i = 0
  repeat
    local packName = ResourceManager.get3dodelPackName(models[i+1])
    if ResourceManager.check3dIsSubpack() then
      SubPackageManager.insertDynamicSubPack(packName, ResourceManager.get3DModelPath(models[i+1]) .. "/" .. packName)
    end
    table.insert(urls, ResourceManager.get3dmodelUrl(models[i+1]))
    table.insert(packs, packName)
    i=i+1
  until not(i < #models)
  if not ResourceManager.check3dIsSubpack() then
    packs = {}
  end
  if params then
    LoadManager.instance:createPackAndRes(packs, urls, Laya.Handler:create(thisObj, callBack, params))
  else
    LoadManager.instance:createPackAndRes(packs, urls, Laya.Handler:create(thisObj, callBack))
  end
end

function ResourceManager.check3dIsSubpack()
  return SubPackageManager.getModelFileStyle(SubPackageConst.packName_model3d) == SubPackageConst.PATH_STYLE_SUBPACK
end

function ResourceManager.load3dmodel(modelName, isScene, callBack, thisObj, params)
  if params == nil then
    params=nil
  end
  local packName = ResourceManager.get3dodelPackName(modelName)
  SubPackageManager.insertDynamicSubPack(packName, ResourceManager.get3DModelPath(modelName) .. "/" .. packName)
  if not ResourceManager.check3dIsSubpack() then
    packName = nil
  end
  if params then
    LoadManager.instance:createPackAndRes(packName, ResourceManager.get3dmodelUrl(modelName, isScene), Laya.Handler:create(thisObj, callBack, params))
  else
    LoadManager.instance:createPackAndRes(packName, ResourceManager.get3dmodelUrl(modelName, isScene), Laya.Handler:create(thisObj, callBack))
  end
end

function ResourceManager.get3dodelPackName(modelName)
  return ResourceManager.PATHHEAD + modelName
end

function ResourceManager.get3dmodelUrl(modelName, isScene)
  if isScene == nil then
    isScene=false
  end
  local houzhui = isScene and ".ls" or ".lh"
  return ResourceManager.get3DModelPath(modelName) .. "/" .. ResourceManager.PATHHEAD .. modelName .. "/" .. ResourceManager.resplatform .. "/" .. modelName .. houzhui
end

function ResourceManager.get3dmodelRes(modelName, isScene, withClone)
  if isScene == nil then
    isScene=false
  end
  if withClone == nil then
    withClone=false
  end
  local url = ResourceManager.get3dmodelUrl(modelName, isScene)
  local res = Laya.Loader:getRes(url)
  if not res then
    LogsManager.warn("没有这个资源-", modelName)
  else
    if withClone and res.clone then
      res = res:clone()
    end
    ResourceManager.checkParticalRendeMode(res, modelName)
  end
  return res
end

ResourceManager._checkRenderModeMap = {};
function ResourceManager.checkParticalRendeMode(view, modelName)
  local partical = view
  if partical._particleSystem then
    local renmode = partical._render.renderMode
    if renmode ~= 0 then
      -- [ts2lua]ResourceManager._checkRenderModeMap下标访问可能不正确
      if not ResourceManager._checkRenderModeMap[modelName] then
        -- [ts2lua]ResourceManager._checkRenderModeMap下标访问可能不正确
        ResourceManager._checkRenderModeMap[modelName] = true
        LogsManager.warn("-----------renderMode 为mesh了")
      end
      partical._render.renderMode = 0
    end
  end
  local i = 0
  repeat
    local child = view:getChildAt(i)
    ResourceManager.checkParticalRendeMode(child, modelName)
    i=i+1
  until not(i < view.numChildren)
end

function ResourceManager.cloneOneSprite(sourceSp)
  local rt = sourceSp:clone()
  ResourceManager.checkParticalRendeMode(sourceSp, sourceSp.name or "test")
  return rt
end

ResourceManager._spineModelMap = {};
function ResourceManager.loadSpine(spineName, callBack, thisObj, params, needChangeSkin)
  if params == nil then
    params=nil
  end
  if needChangeSkin == nil then
    needChangeSkin=false
  end
  local ani = ResourceManager.createSpineAni(spineName)
  if ani then
    if callBack then
      callBack:call(thisObj, ani, params)
    end
  end
  SubPackageManager.insertDynamicSubPack(spineName, ResourceManager.SPINEPATH .. "/" .. spineName)
  local onSubPackComplete = function()
    local temp = Laya.Templet()
    temp:loadAni(ResourceManager.SPINEPATH .. "/" .. spineName .. "/" .. spineName .. ".sk")
    temp:on(Laya.Event.COMPLETE, ResourceManager, ResourceManager.onSpineComplete, {temp, spineName, callBack, thisObj, params, needChangeSkin})
    temp:on(Laya.Event.ERROR, ResourceManager, ResourceManager.onSpineLoadError, {temp, spineName, callBack, thisObj, params, needChangeSkin})
  end
  
  SubPackageManager.loadDynamics(ResourceManager.getSpineSubpack(spineName), ResourceManager.getSpinePath(spineName), onSubPackComplete, ResourceManager)
end

function ResourceManager.getSpineSubpack(shortName)
  local groupInfo = SubPackageManager.getSpineGroupInfo(shortName)
  if not groupInfo then
    return shortName
  end
  return groupInfo.name
end

function ResourceManager.getSpinePath(shortName)
  -- [ts2lua]SubPackageConst.subPackData下标访问可能不正确
  local subpak = SubPackageConst.subPackData[shortName]
  local groupInfo = SubPackageManager.getSpineGroupInfo(shortName)
  if groupInfo then
    return groupInfo.path .. "/" .. groupInfo.name .. "/" .. shortName .. "/"
  end
  local forderPath = nil
  if not subpak or subpak.style == SubPackageConst.PATH_STYLE_SUBPACK then
    forderPath = "spine"
  elseif subpak.style == SubPackageConst.PATH_STYLE_NATIVE then
    forderPath = "spine_native"
  else
    forderPath = "spine_cdn"
  end
  return forderPath .. "/" .. shortName .. "/"
end

function ResourceManager.getSpineSkUrl(shortName)
  return ResourceManager.getSpinePath(shortName) + shortName .. ".sk"
end

function ResourceManager.onSpineLoadError(spineName, callBack, thisObj, params, needChangeSkin)
  LogsManager.warn(spineName, "___创建失败")
end

function ResourceManager.onSpineComplete(temp, spineName, callBack, thisObj, params, needChangeSkin)
  if params == nil then
    params=nil
  end
  if needChangeSkin == nil then
    needChangeSkin=false
  end
  -- [ts2lua]ResourceManager._spineModelMap下标访问可能不正确
  ResourceManager._spineModelMap[spineName] = temp
  local ani = ResourceManager.createSpineAni(spineName)
  LogsManager.echo(spineName, "___spinename")
  if ani then
    if callBack then
      callBack:call(thisObj, ani, params)
    end
  else
    LogsManager.warn("创建动画失败")
  end
end

function ResourceManager.createSpineAni(spineName, needChangeSkin)
  if needChangeSkin == nil then
    needChangeSkin=false
  end
  -- [ts2lua]ResourceManager._spineModelMap下标访问可能不正确
  local tempModel = ResourceManager._spineModelMap[spineName]
  if not tempModel then
    return nil
  end
  -- [ts2lua]lua中0和空字符串也是true，此处needChangeSkin需要确认
  local t = (needChangeSkin and {1} or {0})[1]
  local ani = tempModel:buildArmature(t)
  return ani
end

function ResourceManager.get3DModelPath(model)
  local packName = ResourceManager.get3dodelPackName(model)
  -- [ts2lua]SubPackageConst.subPackData下标访问可能不正确
  local packinfo = SubPackageConst.subPackData[packName]
  if not packinfo then
    return "3dmodels"
  end
  local subStyle = packinfo.style
  if subStyle == nil then
    return "3dmodels"
  elseif subStyle == SubPackageConst.PATH_STYLE_CDN then
    return "3dcdns"
  elseif subStyle == SubPackageConst.PATH_STYLE_NATIVE then
    return "3dnatives"
  else
    return "3dmodels"
  end
end
