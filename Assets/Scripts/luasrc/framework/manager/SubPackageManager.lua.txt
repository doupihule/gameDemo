SubPackageManager = class('SubPackageManager')
SubPackageManager.subPackLoadData = {};
SubPackageManager.canSubpack = true;
SubPackageManager._hasInitGroup = false;
function SubPackageManager._initGroupSubpack()
end

function SubPackageManager._initOneGroup(arr)
    if not arr then
        return
    end
    local i = 0
    repeat
        local groupInfo = arr[i + 1]
        local packName = groupInfo.name
        local path = groupInfo.path
        SubPackageManager.insertDynamicSubPack(packName, path)
        i = i + 1
    until not (i < #arr)
end

function SubPackageManager.loadSubPackage(packageName, callback, thisObj, isShowPop)
    if callback then
        doJsCallFunc(callback, thisObj)
    end
end

function SubPackageManager.checkNeedLoad(packageName)
    return false
end

function SubPackageManager.setLoadStatus(packageName)
end

function SubPackageManager.getLoadStatus(packageName)
    return nil
end

function SubPackageManager.getNewAtlasPath(filePath)
    return filePath
end

function SubPackageManager.getTurnPath(path)
    return nil
end

SubPackageManager.loadCacheArr = {};
function SubPackageManager.load(names, callback, thisObj, isInsert)
    doJsCallFunc(callback, thisObj)
end

function SubPackageManager.insertDynamicSubPack(names, paths)
end

function SubPackageManager.loadDynamics(names, paths, callback, thisObj, isInsert)
    SubPackageManager.load(names, callback, thisObj, isInsert)
end

function SubPackageManager.checkLoad()

end

function SubPackageManager.sureLoad(info)
end

function SubPackageManager.loadNext(isSuc)

end

function SubPackageManager.getModelFileStyle(model)
    return nil
end

function SubPackageManager.checkSubModelIsNative(model)
    local info = SubPackageConst.subPackData[model]
    if not info then
        return false
    end
    return info.style == SubPackageConst.PATH_STYLE_NATIVE
end

function SubPackageManager.getPackStyle(packName)
    return SubPackageConst.PATH_STYLE_NATIVE
end

SubPackageManager._groupInfoCache = { spine = {}, sound = {}, model3d = {} };
function SubPackageManager._getGroupInfoByName(name, type, souceGroupArr)
    return nil
end

function SubPackageManager.getSpineGroupInfo(spineName)
    return SubPackageManager._getGroupInfoByName(spineName, "spine", SubPackageConst["spineGroupCfgs"])
end

function SubPackageManager.getSoundGroupInfo(sound)
    return SubPackageManager._getGroupInfoByName(sound, "sound", SubPackageConst["soundGroupCfgs"])
end

function SubPackageManager.getModel3DGroupInfo(model)
    return SubPackageManager._getGroupInfoByName(model, "model3d", SubPackageConst["model3dGroupCfgs"])
end
