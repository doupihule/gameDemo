SoundManager = class('SoundManager')

SoundManager.music = "musicStorage";
SoundManager.sound = "soundStorage";
SoundManager.isQQMusic = false;
SoundManager._soundDelayCode = {};
SoundManager._soundCountMap = {};
SoundManager.musicArr = { "main_bg" };
function SoundManager.init()
    SoundManager.BGM = ""
    SoundManager.BGS = {}
    SoundManager.ME = ""
end

function SoundManager.initSwitch()
    SoundManager.musicSwitch = SwitchModel.getInstance():getMusicSwitch()
    SoundManager.soundSwitch = SwitchModel.getInstance():getSoundSwitch()
end

function SoundManager.playBGM(url, startTime)
    LogsManager.echo("playmusic:", url)
    if not url then
        return
    end
    if (not url and SoundManager.BGM) and SoundManager.BGM ~= "" then
        url = SoundManager.BGM
    end
    url = SoundManager.getSoundUrl(url)
    SoundManager.BGM = url
end

function SoundManager.playBGS(url, soundClass, startTime)
    if SoundManager.soundSwitch then
        url = SoundManager.getSoundUrl(url)
        SoundManager.loadSound(url, SoundManager.playNewSound, SoundManager, { url, 0, nil, soundClass, startTime })
    end
end

function SoundManager.getSoundUrl(sound)
    if string.sub(sound, 1, 5) == "sound" or string.find(sound, "groupSound") ~= nil then
        return sound
    end
    local soundPath = SoundManager.getSoundPath(sound)
    return soundPath .. "/" .. sound .. SoundManager.getSoundExpandName(sound)
end

function SoundManager.getSoundExpandName(sound)
    if UserInfo.isSystemMini() then
        return ".mp3"
    elseif UserInfo.isSystemNative() then
        if SoundManager.checkIsMusic(sound) then
            return ".mp3"
        end
        if UserInfo.isSystemAndroid() then
            return ".ogg"
        end
        return ".wav"
    elseif UserInfo.isSystemIos() then
        return ".mp3"
    end
end

function SoundManager.checkIsMusic(url)
    local musicArr = SoundManager.musicArr
    local i = 0
    repeat
        local targetStr = musicArr[i + 1]
        if string.find(url, targetStr) ~= nil then
            return true
        end
        i = i + 1
    until not (i < #musicArr)
    return false
end

function SoundManager.playME(url, complete, startTime)
    SoundManager.ME = url
    url = SoundManager.getSoundUrl(url)
end

function SoundManager.playSE(url, loops, complete, soundClass, startTime)
    if loops == nil then
        loops = 1
    end
    if SoundManager.soundSwitch then
        url = SoundManager.getSoundUrl(url)
        SoundManager.loadSound(url, SoundManager.playNewSound, SoundManager, { url, loops, complete, soundClass, startTime })
    end
end

function SoundManager.loadSound(url, callBack, thisObj, callParams)

end

function SoundManager.getSoundSubPack(shortName)
end

function SoundManager.getSoundPath(shortName)
    local groupInfo = SubPackageManager.getSoundGroupInfo(shortName)
    if not groupInfo then
        return "sound/" .. shortName
    end
    return groupInfo.path .. "/" .. groupInfo.name .. "/" .. shortName
end

function SoundManager.stopMusic()
    SoundManager.BGM = ""
    SoundManager.ME = ""
    LogsManager.echo("=============ycn stop music")
end

function SoundManager.stopAllSound()
    SoundManager.BGS = ""
    for i in pairs(SoundManager._soundDelayCode) do
        SoundManager.clearSoundTimeOut(i)
    end
end

function SoundManager.stopMusicOrSound(url)
    SoundManager.clearSoundTimeOut(url)
    url = SoundManager.getSoundUrl(url)
end

function SoundManager.setSoundVol(volume, url)
    url = SoundManager.getSoundUrl(url)
end

function SoundManager.setMusicVol(volume)
end

SoundManager._soundChannelCache = {};
SoundManager._volumes = {};
SoundManager._volume = 1;
SoundManager._bgvolume = 1;
SoundManager._channelNum = 0;
function SoundManager.playNewBGM(url, loops, complete, startTime)
end

function SoundManager.stopNewBGM()
    if SoundManager._bgmSoundChannel then
        SoundManager._bgmSoundChannel:stop()
    end
end

function SoundManager.playNewSound(url, loops, complete, soundClass, startTime)

end

function SoundManager.delayResumeSoundCount(url)
end

function SoundManager.clearSoundTimeOut(url)
end

function SoundManager.getSoundShortName(url)

end

function SoundManager.getSoundLength(name)
    local info = MusicConst.soundCfgs[name]
    if not info then
        return 5000
    end
    return #info
end

function SoundManager.setSoundVolume(volume)
    SoundManager._volume = volume
end

function SoundManager._setVolume(url, volume)
end

function SoundManager.stopAllNewSound()
end

function SoundManager.stopNewSound(url)

end

function SoundManager.getChannelIns(url)
end

function SoundManager.recvMsg(cmd, data)
end
