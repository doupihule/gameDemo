WindowManager = class('WindowManager')

WindowManager.tipsContent = {};
WindowManager.tipsObject = {};
WindowManager.expandTipsContent = {};
WindowManager.expandTipsObject = {};
WindowManager.tipsCount = 0;
WindowManager.updateTipsContent = {};
WindowManager.updateTipsObject = {};
WindowManager.updateTipsCount = 0;
WindowManager.maskCount = 0;
WindowManager.maskAlpha = 0;
WindowManager.isShowUpdateTip = false;
WindowManager._currentWindowName = "";
WindowManager._allWindowMap = {};
WindowManager.UIInstance = {};



function WindowManager.switchUI(openUIName, closeUIName, params,targetRoot)
    WindowManager.switchUIComplete(openUIName, closeUIName, params,targetRoot)
end


function WindowManager.switchUIComplete(openUIName, closeUIName, params,targetRoot)

    local uicfg = WindowCfgs.getWindowCfgs(openUIName);
    local uiCobj = ResourceManager.loadUIPrefab(uicfg.prefabPath.."/".. openUIName,ResourceConst.boundle_ui);
    local uiClass = require("sys.view.".. uicfg.path.."." ..openUIName)
    local uiobj = uiClass.new();
    uiobj:setCObject(uiCobj);
    if not targetRoot then
        targetRoot = WindowManager.getWindowCtn(openUIName);
    end
    targetRoot:addChild(uiobj);
    --设置ui名字
    uiobj:setWindowName(openUIName);
    if closeUIName then
        local ui =  WindowManager.getUIByName(closeUIName);
        if ui then
            ui:close();
        end
    end
    uiobj:setData(params);
    WindowManager.updateUiVisible();
    return uiobj
end

function WindowManager.createModalView(ctn, alpha)

    return nil
end

function WindowManager:adjustUI(view)
end

function WindowManager.setPopupTip(type, content, callBack, thisObj, titleName, closeBack)
end


function WindowManager.showTip(text, timeout)
end

function WindowManager.tipComplete(args)

end

function WindowManager.closeUI(UIName)
end

function WindowManager.isUIOpened(UIName)
end

function WindowManager.getUIByName(UIName)
end

function WindowManager.openGuideUI(UIName, params)

end

function WindowManager.guideUIComplete(UIName, params)
end

function WindowManager.closeGuideUI(UIName)

end

function WindowManager.openSubGuideUI(node, UIName, params)

end

function WindowManager.subGuideUIComplete(node, UIName, params)

end

function WindowManager.closeSubGuideUI(node, UIName)
end

function WindowManager.openSubUI(UIName, rootNode, params)
end

function WindowManager.closeSubUI(UIName, rootNode)
end

WindowManager.uiMaker = LoadingUI;
function WindowManager.showLoadingUI(args)
end


function WindowManager.closeLoadingUI()
end


--根据windowname 获取对应的parent容器 默认commonui
function WindowManager.getWindowCtn(winName)
    return WindowManager.commonUILayer;
end


function WindowManager.getUIClass(winName)

end


function WindowManager.updateUiVisible()

end


function WindowManager.isUICached(windowName)

end

function WindowManager.getCurrentWindowName()
end

function WindowManager.getCurrentWindow()
end

function WindowManager.getallWindowMap()
    return WindowManager._allWindowMap
end
