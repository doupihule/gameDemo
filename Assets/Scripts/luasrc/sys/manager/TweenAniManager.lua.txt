require("framework/manager/TimerManager")
require("framework/utils/StringUtils")
require("framework/utils/BigNumUtils")

TweenAniManager = newClass({Class}, {name = 'TweenAniManager'})

function TweenAniManager:__new__() end
function TweenAniManager.__getters.instance()
  if not TweenAniManager._instance then
    TweenAniManager._instance = TweenAniManager()
  end
  return TweenAniManager._instance
end

function TweenAniManager:fadeInAni(thisObj, callback, duration, obj, firtAlpha, lastAlpha)
  if callback == nil then
    callback=nil
  end
  if duration == nil then
    duration=500
  end
  if obj == nil then
    obj=nil
  end
  if firtAlpha == nil then
    firtAlpha=0
  end
  if lastAlpha == nil then
    lastAlpha=1
  end
  thisObj.alpha = firtAlpha
  Laya.Tween:to(thisObj, {alpha=lastAlpha}, duration, nil, Laya.Handler:create(obj, function()
    callback and callback:call(obj)
  end
  ))
end

function TweenAniManager:fadeOutAni(thisObj, callback, duration, obj, firstAlpha, lastAlpha)
  if callback == nil then
    callback=nil
  end
  if duration == nil then
    duration=500
  end
  if obj == nil then
    obj=nil
  end
  if firstAlpha == nil then
    firstAlpha=1
  end
  if lastAlpha == nil then
    lastAlpha=0
  end
  thisObj.alpha = firstAlpha
  Laya.Tween:to(thisObj, {alpha=lastAlpha}, duration, nil, Laya.Handler:create(obj, function()
    callback and callback:call(obj)
  end
  ))
end

function TweenAniManager:horizontalAni(thisObj, posX, callback, obj, duration, ease)
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=200
  end
  if ease == nil then
    ease=nil
  end
  Laya.Tween:to(thisObj, {x=posX}, duration, ease, Laya.Handler:create(obj, function()
    callback and callback:call(obj)
  end
  ))
end

function TweenAniManager:verticalAni(thisObj, posY, callback, duration, ease)
  if callback == nil then
    callback=nil
  end
  if duration == nil then
    duration=1000
  end
  if ease == nil then
    ease=nil
  end
  Laya.Tween:to(thisObj, {y=posY}, duration, ease)
end

function TweenAniManager:horizontalCenterAni(thisObj, posX, callback, obj, duration)
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=200
  end
  Laya.Tween:to(thisObj, {centerX=posX}, duration, nil, Laya.Handler:create(obj, function()
    callback and callback:call(obj)
  end
  ))
end

function TweenAniManager:horizontalRightAni(thisObj, posX, callback, obj, duration)
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=200
  end
  Laya.Tween:to(thisObj, {right=posX}, duration, nil, Laya.Handler:create(obj, function()
    callback and callback:call(obj)
  end
  ))
end

function TweenAniManager:scaleAni(thisObj, callback, obj, duration)
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=100
  end
  thisObj:scale(0.76, 0.76)
  local item = thisObj:getChildAt(0)
  self:fadeInAni(item, nil, 200)
  Laya.Tween:to(thisObj, {scaleX=1, scaleY=1}, duration, nil, Laya.Handler:create(obj, function()
    Laya.Tween:to(thisObj, {scaleX=0.98, scaleY=0.98}, 100, nil, Laya.Handler:create(obj, function()
      callback and callback:call(obj)
    end
    ))
  end
  ))
end

function TweenAniManager:topAni(thisObj, top, duration)
  if duration == nil then
    duration=200
  end
  Laya.Tween:to(thisObj, {top=top}, duration)
end

function TweenAniManager:playRoleAni(firstX, role, lastX, towardRight, y)
  if towardRight == nil then
    towardRight=true
  end
  if y == nil then
    y=0.1
  end
  local offest = firstX
  role.transform.position = Laya.Vector3(offest, y, 1.3)
  local ani = function()
    if towardRight then
      if role.transform.position.x < lastX then
        offest = offest + 0.1
        role.transform.position = Laya.Vector3(offest, y, 1.3)
      else
        Laya.timer:clear(self, ani)
      end
    else
      if role.transform.position.x > lastX then
        offest = offest - 0.1
        role.transform.position = Laya.Vector3(offest, y, 1.3)
      else
        Laya.timer:clear(self, ani)
      end
    end
  end
  
  Laya.timer:frameLoop(1, self, ani)
end

function TweenAniManager:horizontalScaleAni(thisObj, width, obj, duration)
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=300
  end
  thisObj.width = 110
  Laya.Tween:to(thisObj, {width=width}, duration, nil, nil)
end

function TweenAniManager:verticalScaleAni(thisObj, height, obj, duration)
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=300
  end
  thisObj.height = 48
  Laya.Tween:to(thisObj, {height=height}, duration, nil, nil)
end

function TweenAniManager:scaleOnlyAni(thisObj, scaleX, scaleY, duration, callback, obj)
  if duration == nil then
    duration=300
  end
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  Laya.Tween:to(thisObj, {scaleX=scaleX, scaleY=scaleY}, duration, nil, Laya.Handler:create(obj, function()
    callback and callback:call(obj)
  end
  ))
end

function TweenAniManager:battleTweenBaojiAni(view, duration)
  if duration == nil then
    duration=200
  end
  view.scaleX = 0.5
  view.scaleY = 0.5
  Laya.Tween:clearTween(view)
  Laya.Tween:to(view, {scaleX=1, scaleY=1}, duration, Laya.Ease.bounceInOut)
end

function TweenAniManager:battleTweenDiedAni(view)
  view.scaleX = 0.5
  view.scaleY = 0.5
  view.alpha = 1
  Laya.Tween:clearTween(view)
  Laya.Tween:to(view, {scaleX=2, scaleY=2}, 200, Laya.Ease.bounceInOut)
  Laya.Tween:to(view, {alpha=0.5}, 200, Laya.Ease.bounceInOut, nil, 300)
end

function TweenAniManager:scaleLevelUpAni(thisObj, callback, obj, duration)
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  if duration == nil then
    duration=100
  end
  thisObj:scale(1.1, 1.1)
  local item = thisObj:getChildAt(0)
  self:fadeInAni(item, nil, 100)
  Laya.Tween:to(thisObj, {scaleX=1, scaleY=1}, duration, nil, Laya.Handler:create(obj, function()
    
  end
  ))
end

function TweenAniManager:changeNumTween(oldNum, newNum, lable, group, isBigInt, thisObj, callBack, duration, times)
  if isBigInt == nil then
    isBigInt=false
  end
  if thisObj == nil then
    thisObj=nil
  end
  if callBack == nil then
    callBack=nil
  end
  if duration == nil then
    duration=1000
  end
  if times == nil then
    times=10
  end
  if oldNum == newNum then
    return
  end
  local delay = Math:round(duration / times)
  if lable.__currentNum then
    TimerManager.instance:removeByCallBack(lable, self.numberChangeCallBack)
    lable.__currentNum = nil
  end
  TimerManager.instance:add(self.numberChangeCallBack, lable, delay, Number.MAX_VALUE, true, {oldNum, newNum, lable, group, isBigInt, thisObj, callBack, delay, times})
end

function TweenAniManager:numberChangeCallBack(oldNum, newNum, lable, group, isBigInt, thisObj, callBack, delay, times, bigIntChange)
  if thisObj == nil then
    thisObj=nil
  end
  if callBack == nil then
    callBack=nil
  end
  if bigIntChange == nil then
    bigIntChange=false
  end
  if not lable.__currentNum then
    lable.__currentNum = oldNum
  end
  if BigNumUtils.compare(newNum, oldNum) then
    local deltaNum = BigNumUtils.round(BigNumUtils.sum(BigNumUtils.round(Math:random() * 10), BigNumUtils.devide(BigNumUtils.substract(newNum, oldNum), times)))
  else
    local deltaNum = BigNumUtils.round(BigNumUtils.sum(-BigNumUtils.round(Math:random() * 10), BigNumUtils.devide(BigNumUtils.substract(newNum, oldNum), times)))
  end
  lable.__currentNum = BigNumUtils.sum(lable.__currentNum, deltaNum)
  if deltaNum > "0" and BigNumUtils.compare(lable.__currentNum, newNum) or deltaNum < "0" and not BigNumUtils.compare(lable.__currentNum, newNum) then
    -- [ts2lua]lua中0和空字符串也是true，此处isBigInt需要确认
    lable:changeText((isBigInt and {StringUtils.getCoinStr(newNum)} or {String(newNum)})[1])
    lable.__currentNum = nil
    TimerManager.instance:removeByCallBack(lable, TweenAniManager.instance.numberChangeCallBack)
    if callBack then
      callBack:apply(thisObj)
    end
  else
    Laya.Tween:to(group, {scaleX=1.1, scaleY=1.1}, delay / 3, Laya.Ease.sineIn, Laya.Handler:create(self, function()
      Laya.Tween:to(group, {scaleX=1, scaleY=1}, delay / 3, Laya.Ease.sineOut)
    end
    ))
    -- [ts2lua]lua中0和空字符串也是true，此处isBigInt需要确认
    lable:changeText((isBigInt and {StringUtils.getCoinStr(BigNumUtils.round(lable.__currentNum))} or {String(BigNumUtils.round(lable.__currentNum))})[1])
  end
end

function TweenAniManager:scaleQipaoAni(view, scale, callback, obj)
  if scale == nil then
    scale=1.5
  end
  if callback == nil then
    callback=nil
  end
  if obj == nil then
    obj=nil
  end
  Laya.Tween:clearAll(view)
  Laya.Tween:to(view, {scaleX=scale, scaleY=scale}, 800, Laya.Ease.circOut, Laya.Handler:create(self, function()
    Laya.Tween:to(view, {scaleX=1, scaleY=1}, 800, nil, Laya.Handler:create(self, function()
      self:scaleQipaoAni(view, scale, callback, obj)
    end
    ))
  end
  ))
end
