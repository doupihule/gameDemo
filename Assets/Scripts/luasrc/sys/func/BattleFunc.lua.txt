require("stringutil")
require("framework/func/BaseFunc")
require("framework/manager/LogsManager")
require("game/sys/consts/GameConsts")
require("game/sys/consts/BattleConst")
require("game/sys/func/GlobalParamsFunc")
require("game/battle/data/AttributeExtendData")
require("framework/common/GameSwitch")
require("framework/common/UserInfo")
require("game/battle/view/BattleRoleView")

BattleFunc = newClass({BaseFunc}, {name = 'BattleFunc'})
BattleFunc.debugValue = "0";
BattleFunc.idToShowMap = {};
BattleFunc.zorder_blackScreen = 2000 * 10;
BattleFunc.enterSpeed = 2.5;
BattleFunc.battleCenterY = 560;
BattleFunc.battleWaitFrame = 30;
BattleFunc.firstWavePos = 200;
BattleFunc.otherWavePos = 400;
BattleFunc.defaultShadeWidth = 120;
BattleFunc.defaultScale = 0.25;
BattleFunc.critDamgeRatio = 2;
BattleFunc.minDamageRatio = 0.01;
BattleFunc.airArmyHigh = 270;
BattleFunc.airArmyStartXLocation = 220;
BattleFunc.landArmyStartXLocation = 220;
BattleFunc.landArmyStartYLocation = {0, 20, -20, 40, -40, 60, -60};
BattleFunc.warRoleXoffest = {0, 100, 200};
BattleFunc.pylonStartXLocation = 350;
BattleFunc.pylonTwoLocation = 30;
BattleFunc.buildingAutoReduceHp = 160;
BattleFunc.buildAutoFrame = 30;
BattleFunc.deadLastFrame = 10;
BattleFunc.diedShockCount = 3;
function BattleFunc.getPropStyle(id)
  -- [ts2lua]BattleFunc.idToShowMap下标访问可能不正确
  local info = BattleFunc.idToShowMap[id]
  if not info then
    return BattleConst.PROPSTYLE_RATIO
  end
  return info.display
end

BattleFunc.moveSpeed = 1;
BattleFunc.battleRandomIndex = 3;
BattleFunc.angletoRad = Math.PI / 180;
BattleFunc.radtoAngle = 180 / Math.PI;
BattleFunc.miToPixel = 640 / 18;
BattleFunc.pixelToMi = 18 / 640;
BattleFunc.twopi = Math.PI * 2;
BattleFunc.halfpi = Math.PI / 2;
BattleFunc.defaultRoleYpos = 0;
BattleFunc.battleViewFrameScale = 2;
BattleFunc.miniSecondToFrame = 60 / 1000;
BattleFunc.frameToMiniSecode = 1000 / 60;
BattleFunc.originPoint = Laya.Vector3();
BattleFunc.tempObject = {};
BattleFunc.tempObject2 = {};
BattleFunc.tempObject3 = {};
BattleFunc.tempObject4 = {};
BattleFunc.tempRect = {x=0, y=0, width=0, height=0};
BattleFunc.tempRect2 = {x=0, y=0, width=0, height=0};
BattleFunc.tempCircle = {r=0, x=0, y=0};
BattleFunc.tempPoint = Laya.Vector3(0, 0, 0);
BattleFunc.tempPoint2 = Laya.Vector3(0, 0, 0);
BattleFunc.tempPoint3 = Laya.Vector3(0, 0, 0);
BattleFunc.tempPoint4 = Laya.Vector3(0, 0, 0);
BattleFunc.tempClickPoint = Laya.Point(0, 0);
BattleFunc.EFFECT_NOALLOW = 1;
BattleFunc.emptyArr = {};
BattleFunc._cacheTempArr = {};
function BattleFunc.getOneTempArr()
  if #BattleFunc._cacheTempArr == 0 then
    return {}
  end
  return BattleFunc._cacheTempArr:shift()
end

function BattleFunc.cacheOneTempArr(value)
  -- [ts2lua]修改数组长度需要手动处理。
  value.length = 0
  table.insert(BattleFunc._cacheTempArr, value)
end

BattleFunc.tempArr_passive = {};
BattleFunc.waveMaxFrame = 60 * 60;
BattleFunc.bossMaxFrame = 60 * 60;
BattleFunc.CreateRoleIndex = {};
BattleFunc.curBattleType = 1;
function BattleFunc.__getters.instance()
  if not BattleFunc._instance then
    BattleFunc._instance = BattleFunc()
    BattleFunc.initGlobalParams()
  end
  return BattleFunc._instance
end

function BattleFunc:getCfgsPathArr()
  return {"AttributeList", "Role", "RoleUpdate", "Scene", "Decoration", "Skill", "SkillUpdate", "Buff", "Condition", "SkillEffect", "Target", "RoleAct", "Level", "LevelWave", "PassiveSkill", "AoeEffect", "Bullet", "TranslateLevel", "TranslateMonster", "Lottery"}
end

function BattleFunc:ctor()
  self:superCall('ctor')
  self._cacheCfgMap = {baseAttr={}, addAttr={}, advanceAttr={}, rebornAttr={}};
end

function BattleFunc:getRoleInfoData(id, level)
  return self:getCfgDatasByKey("Role", id, level)
end

function BattleFunc:turnMinisecondToframe(minisecond)
  return Math:floor(Number(minisecond) * BattleFunc.miniSecondToFrame)
end

function BattleFunc:turnSpeedToFrame(secondSpeed)
  return secondSpeed / GameConsts.gameFrameRate
end

function BattleFunc:getShadeScale(instanceWid)
  local scale = instanceWid / BattleFunc.defaultShadeWidth
  if scale > 1 then
    scale = 1
  elseif scale < 0.3 then
    scale = 0.3
  end
  return scale
end

function BattleFunc:turnAddSpeedToFrame(secondAddSpeed)
  return secondAddSpeed / GameConsts.gameFrameRate / GameConsts.gameFrameRate
end

function BattleFunc:createRoleSpine(roleId, level, type, targetScale, isShowShade, isForceModifyBody)
  if targetScale == nil then
    targetScale=0.25
  end
  if isShowShade == nil then
    isShowShade=true
  end
  if isForceModifyBody == nil then
    isForceModifyBody=false
  end
  local cfgs = self:getCfgDatas("Role", roleId)
  local spineName = cfgs.spine[0+1]
  local roleUpdateInfo = self:getCfgDatasByKey("RoleUpdate", roleId, level)
  local index = roleUpdateInfo.body or 0
  if isForceModifyBody then
    index = 9
  end
  local animode = index == 0 and 0 or 1
  local sp = BattleRoleView(spineName, targetScale, index)
  if isShowShade then
    local size = roleUpdateInfo.size
    local width = Number(size[1+1])
    local shadeScale = self:getShadeScale(width)
    sp:setShade(shadeScale)
  end
  sp:play(BattleConst.LABEL_IDLE, true)
  return sp
end

function BattleFunc:countPlayerAttr(outMap, heroId, heroInfo, userData)
  if not self._cacheAttrData then
    self._cacheAttrData = AttributeExtendData(heroId, heroInfo, BattleConst.LIFE_PLAYER, userData)
  else
    self._cacheAttrData:resetData(heroId, heroInfo, BattleConst.LIFE_PLAYER, userData)
  end
  for i in pairs(self._cacheAttrData.finalAttr) do
    outMap[i+1] = self._cacheAttrData.finalAttr[i+1]
  end
  return outMap
end

function BattleFunc:turnPropArrToTable(propArr, outTable)
  if outTable == nil then
    outTable=nil
  end
  if not outTable then
    outTable = {}
  end
  if not propArr then
    LogsManager.errorTag("properror", "没有传入属性数据")
    return outTable
  end
  local i = 0
  repeat
    local info = propArr[i+1]
    if type(info) == "string" then
      info = info:split(",")
    end
    local id = info[0+1]
    -- [ts2lua]outTable下标访问可能不正确
    if not outTable[id] then
      -- [ts2lua]outTable下标访问可能不正确
      outTable[id] = {0, 0}
    end
    -- [ts2lua]outTable下标访问可能不正确
    -- [ts2lua]outTable下标访问可能不正确
    outTable[id][0+1] = outTable[id][0+1] + Number(info[1+1]) or 0
    -- [ts2lua]outTable下标访问可能不正确
    -- [ts2lua]outTable下标访问可能不正确
    outTable[id][1+1] = outTable[id][1+1] + Number(info[2+1]) or 0
    i=i+1
  until not(i < #propArr)
  return outTable
end

function BattleFunc:getCacheBaseAttr(attrId)
  -- [ts2lua]self._cacheCfgMap.baseAttr下标访问可能不正确
  if not self._cacheCfgMap.baseAttr[attrId] then
    -- [ts2lua]self._cacheCfgMap.baseAttr下标访问可能不正确
    self._cacheCfgMap.baseAttr[attrId] = self:turnPropArrToTable(self:getCfgDatasByKey("BaseAttribute", attrId, "baseAttribute"))
  end
  -- [ts2lua]self._cacheCfgMap.baseAttr下标访问可能不正确
  return self._cacheCfgMap.baseAttr[attrId]
end

function BattleFunc:getCacheAddAttr(attrId)
  -- [ts2lua]self._cacheCfgMap.addAttr下标访问可能不正确
  if not self._cacheCfgMap.addAttr[attrId] then
    -- [ts2lua]self._cacheCfgMap.addAttr下标访问可能不正确
    self._cacheCfgMap.addAttr[attrId] = self:turnPropArrToTable(self:getCfgDatasByKey("BaseAttribute", attrId, "attributeAdd"))
  end
  -- [ts2lua]self._cacheCfgMap.addAttr下标访问可能不正确
  return self._cacheCfgMap.addAttr[attrId]
end

function BattleFunc:getCacheAdvanceAttr(roleId, advance)
  local key = roleId .. "_" .. advance
  -- [ts2lua]self._cacheCfgMap.advanceAttr下标访问可能不正确
  if not self._cacheCfgMap.advanceAttr[key] then
    -- [ts2lua]self._cacheCfgMap.advanceAttr下标访问可能不正确
    self._cacheCfgMap.advanceAttr[key] = self:turnPropArrToTable(self:getCfgDatasByMultyKey("RoleAdvance", roleId, advance, "attr"))
  end
  -- [ts2lua]self._cacheCfgMap.advanceAttr下标访问可能不正确
  return self._cacheCfgMap.advanceAttr[key]
end

function BattleFunc:getCacheRebornAttr(rebornTimes)
  local key = rebornTimes
  -- [ts2lua]self._cacheCfgMap.rebornAttr下标访问可能不正确
  if not self._cacheCfgMap.rebornAttr[key] then
    -- [ts2lua]self._cacheCfgMap.rebornAttr下标访问可能不正确
    self._cacheCfgMap.rebornAttr[key] = self:turnPropArrToTable(self:getCfgDatasByKey("RebornAttribute", String(rebornTimes), "attribute"))
  end
  -- [ts2lua]self._cacheCfgMap.rebornAttr下标访问可能不正确
  return self._cacheCfgMap.rebornAttr[key]
end

function BattleFunc:getPosByFromation(zhenwei)
  return 1
end

function BattleFunc:getSkillValueByParams(key, _skillId, level, skillParams, tag)
  if key:find("_") == -1 then
    return Number(key)
  end
  if not skillParams then
    skillParams = self:getCfgDatasByMultyKey("SkillUpdate", _skillId, String(level), "params", true)
    if not skillParams then
      return Number(key)
    end
  end
  local tempArr = key:split("_")
  -- [ts2lua]skillParams下标访问可能不正确
  local arr1 = skillParams[Number(tempArr[0+1]) - 1]
  if not arr1 then
    LogsManager.errorTag("SkillCfgsError", "参数配置错误,skillId:", _skillId, "skilllv:", level, "key:", key, tag)
    return 0
  end
  -- [ts2lua]arr1下标访问可能不正确
  local rt = arr1[Number(tempArr[1+1]) - 1]
  if rt == nil then
    LogsManager.errorTag("SkillCfgsError", "参数配置错误,skillId:", _skillId, "skilllv:", level, "key:", key, tag)
    return 0
  end
  rt = Number(rt)
  if isNaN(rt) then
    LogsManager.errorTag("battleError", "错误的技能参数数据,skillId:", _skillId, "skilllv:", level, tag)
  end
  return rt
end

function BattleFunc.initGlobalParams()
  BattleFunc.critDamgeRatio = GlobalParamsFunc.instance:getDataNum("baseCritDamage") / 10000
  BattleFunc.minDamageRatio = GlobalParamsFunc.instance:getDataNum("minDamage") / 10000
  BattleFunc.battleCenterY = GlobalParamsFunc.instance:getDataNum("battleCenterY")
  BattleFunc.battleUpY = BattleFunc.battleCenterY - 180
  BattleFunc.battleDownY = BattleFunc.battleCenterY + 180
  local cfg = BattleFunc.instance:getAllCfgData("AttributeList")
  BattleFunc.reducedUnitArr = GlobalParamsFunc.instance:getDataString("reducedUnit"):split(",")
  BattleFunc.airArmyHigh = GlobalParamsFunc.instance:getDataNum("airArmyHigh")
  BattleFunc.landArmyStartYLocation = GlobalParamsFunc.instance:getDataArray("landArmyStartYLocation")
  BattleFunc.airArmyStartXLocation = GlobalParamsFunc.instance:getDataNum("airArmyStartXLocation")
  BattleFunc.landArmyStartXLocation = GlobalParamsFunc.instance:getDataNum("landArmyStartXLocation")
  BattleFunc.pylonTwoLocation = GlobalParamsFunc.instance:getDataNum("pylonTwoLocation")
  BattleFunc.pylonStartXLocation = GlobalParamsFunc.instance:getDataNum("pylonStartXLocation")
  BattleFunc.diedShockCount = GlobalParamsFunc.instance:getDataNum("deadShock")
  local buildAutoHp = GlobalParamsFunc.instance:getDataArray("buildingAutoReduceHp")
  BattleFunc.warRoleXoffest = GlobalParamsFunc.instance:getDataArray("fogBattleColumns")
  BattleFunc.buildAutoFrame = BattleFunc.instance:turnMinisecondToframe(Number(buildAutoHp[0+1]))
  BattleFunc.deadLastFrame = BattleFunc.instance:turnMinisecondToframe(GlobalParamsFunc.instance:getDataNum("pylonStartXLocation"))
  BattleFunc.buildingAutoReduceHp = Number(buildAutoHp[1+1])
  BattleFunc.idToShowMap = cfg
  BattleFunc.initFrameDates()
  if UserInfo.isWeb() then
    -- [ts2lua]tslua无法自动转换正则表达式，请手动处理。
    local re = /\@(.*)\@/g
    if window.location.href:search(re) >= 0 then
      local rt = re:exec(window.location.href)
      local str = rt[1+1]
      LogsManager.echo("战斗调试模式:", str)
      GameSwitch.switchMap.SWITCH_BATTLE_DEBUGLEVEL = str
    end
  end
end

function BattleFunc.initFrameDates()
  BattleFunc.battleViewFrameScale = GameConsts.gameFrameRate / 30
  BattleFunc.miniSecondToFrame = GameConsts.gameFrameRate / 1000
  BattleFunc.frameToMiniSecode = 1000 / GameConsts.gameFrameRate
end
