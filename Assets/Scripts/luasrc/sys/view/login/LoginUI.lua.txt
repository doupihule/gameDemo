LoginUI = class('LoginUI', ui.gameui.login.LoginUI)
LoginUI.res = { "gameui/Login.scene" };
function LoginUI:ctor()
    LoginUI.super.ctor(self)
    LoginUI.getInstance() = self
    ButtonUtils(self.loginbtn, self.onLoginClick, self)
    self.loginbtn.clickHandler = Laya.Handler:create(self, self.onLoginClick, nil, false)
end

function LoginUI:setData()
    self._saveAccount = CacheManager.getInstance():getGlobalCache(StorageCode.getStorage_acount())
    if (self._saveAccount and self._saveAccount ~= "0") and #self._saveAccount > 0 then
        self.account.text = self._saveAccount
    end
end

function LoginUI:onLoginClick()
    local account = self.account.text
    local inviteId = self.invite.text
    local shareInfo = self.shareInfo.text
    if account == "" then
        print("please input you account")
        return
    else
        self._saveAccount = account
        CacheManager.getInstance():setGlobalCache(StorageCode.getStorage_acount(), account)
        print("login account>>>>" .. account)
    end
    self:sendLogin(account, inviteId, shareInfo)
    WindowManager.CloseUI(WindowCfgs.LoginUI)
end

function LoginUI:sendLogin(account, inviteId, shareInfo)
    local params = { method = Method.global_Account_loginTest, params = { passport = account, password = self.password.text, device = Global.deviceModel, comeFrom = UserInfo.getLoginSceneInfo() } }
    UserInfo.platform.inviteBy = inviteId
    UserInfo.platform.shareInfo = shareInfo
    UserInfo.platform:reqGlobal(params)
end

function LoginUI:loginResult()
    Client.getInstance():send(Method.User_login, {}, LoginUI.getInstance().onLoginResult, LoginUI.getInstance())
end

function LoginUI:onLoginResult(result)
    WindowManager.CloseUI(WindowCfgs.LoginUI)
    MainModule.getInstance():onLoginResult(result)
end
