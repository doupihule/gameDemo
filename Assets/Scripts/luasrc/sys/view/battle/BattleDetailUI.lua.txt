



































BattleDetailUI = class('BattleDetailUI',ui.gameui.battle.BattleDetailUI)

function BattleDetailUI:ctor()
  BattleDetailUI.super.ctor(self)
  self.timeCode = 0;
  self._pickNums = 3;
  self._allMapCount = 5;
  self._areaWidth = 256;
  self._smallMapCount = 0;
  self.heroArr = {};
  self.enemyArr = {};
  self.roleTxtArr = {};
  self.enemyTxtArr = {};
  self.speakLine = 1;
  self.roleAniArr = {};
  self.extraScale = 1;
  self.equipUnlock = 20;
  self.addPercent = 1;
  (ButtonUtils(self.startGameBtn, self.onClickStartGame, self)):setBtnType(ButtonConst.BUTTON_TYPE_4)
  ButtonUtils(self.returnBtn, self.onClickReturn, self)
  ButtonUtils(self.fogFullStartBtn, self.onClickFogFull, self)
end

function BattleDetailUI:setData(data)
  self.eventInfo = {}
  self.actCost = 0
  self.viewType = FogConst.VIEW_TYPE_BATTLE_DETAIL
  BattleFunc.curBattleType = BattleConst.BATTLETYPE_NORMAL
  if data and data.event then
    local event = data.event
    self.viewType = FogConst.VIEW_TYPE_FOG_ENEMY
    self.eventInfo = event.cfgData
    self.enemyId = event.enemyId
    self.enemyType = event.enemyType
    BattleFunc.curBattleType = BattleConst.BATTLETYPE_WAR
  end
  FogFunc.enemyCell = data and data.cell
  local nextLevel = Number(UserModel.instance:getMaxBattleLevel()) + 1
  if nextLevel > LevelFunc.instance:getMaxLevel() then
    nextLevel = LevelFunc.instance:getMaxLevel()
  end
  self.equipUnlock = GlobalParamsFunc.instance:getDataNum("equipUnlock") or 20
  self._smallMapCount = 0
  self.levelId = nextLevel
  if self.viewType == FogConst.VIEW_TYPE_BATTLE_DETAIL then
    self.levelTxt.text = "第" .. self.levelId .. "关"
    self.desTxt.text = TranslateFunc.instance:getTranslate(BattleFunc.instance:getCfgDatasByKey("Level", self.levelId, "levelLoading"))
    self.actCostGroup.visible = false
  elseif self.viewType == FogConst.VIEW_TYPE_FOG_ENEMY then
    self.levelTxt.text = FogFunc.enemyCell.eventData.enemyName
    self.desTxt.text = TranslateFunc.instance:getTranslate(self.eventInfo.desc, "TranslateEvent")
    -- [ts2lua]lua中0和空字符串也是true，此处event.mobilityCost需要确认
    self.actCost = (event.mobilityCost and {event.mobilityCost} or {0})[1]
    if self.actCost then
      self.actCostGroup.visible = true
      self.costNum.text = "-" .. self.actCost
    end
  end
  self.extraScale = GlobalParamsFunc.instance:getDataNum("roleSizeInPreUi") / 10000
  self.heroArr = {}
  self.enemyArr = {}
  self.roleTxtArr = {}
  self.enemyTxtArr = {}
  self.roleAniArr = {}
  self.roleCtn:removeChildren()
  self.txtCtn:removeChildren()
  self:showRole()
  self:showMap()
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    self:setWarReward()
  else
    self:setReward()
  end
  if GuideManager.ins.nowGuideId == GuideConst.GUIDE_7_702 then
    self.returnBtn.visible = false
    GuideManager.ins:guideFin(GuideConst.GUIDE_7_702, function()
      WindowManager.CloseGuideUI(WindowCfgs.GuideUI)
    end
    , self)
  else
    self.returnBtn.visible = true
  end
  self:setFogFullBtnShow()
end

function BattleDetailUI:setWarReward()
  self.addPercent = 1
  FogPropTrigger.checkPropTriggerOnInstance(FogPropTrigger.Prop_type_AddMoneyPer, self)
  local enemy = FogFunc.enemyCell.eventData
  local reward = enemy.enemyData.reward
  -- [ts2lua]DataResourceFunc.instance:getDataResourceInfo(reward)下标访问可能不正确
  self.levelRewardImg.skin = DataResourceFunc.instance:getDataResourceInfo(reward)["img"]
  self.levelReward.text = Math:floor(reward[1+1] + reward[2+1] * FogModel.instance:getCurLayer() * self.addPercent) .. ""
end

function BattleDetailUI:setReward()
  local rewardList = LevelFunc.instance:getLevelInfoById(self.levelId).victoryReward
  local coin = 0
  local gold = 0
  for index in pairs(rewardList) do
    -- [ts2lua]rewardList下标访问可能不正确
    local reward = rewardList[index]:split(",")
    local switch = {
      [DataResourceType.COIN] = function()
        coin = coin + Number(reward[1+1])
      end,
      [DataResourceType.GOLD] = function()
        gold = gold + Number(reward[1+1])
      end
    }
    local casef = switch[Number(reward[0+1])]
    if not casef then casef = switch["default"] end
    if casef then casef() end
  end
  if gold then
    self.levelRewardImg.skin = ResourceConst.GOLD_PNG
    self.levelReward.text = StringUtils.getCoinStr(gold .. "")
  else
    self.levelRewardImg.skin = ResourceConst.COIN_PNG
    self.levelReward.text = StringUtils.getCoinStr(coin .. "")
  end
end

function BattleDetailUI:setFogFullBtnShow()
  self.fogFullStartBtn.visible = false
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    local info = GlobalParamsFunc.instance:getDataArray("fogBattleAddtion")
    local itemCount = FogModel.instance:getPropNum(info[0+1])
    if itemCount > 0 or ShareOrTvManager.instance:getShareOrTvType(ShareTvOrderFunc.SHARELINE_BATTLE_START) ~= ShareOrTvManager.TYPE_QUICKRECEIVE then
      self.fogFullStartBtn.visible = true
    end
  end
end

function BattleDetailUI:showMap()
  self.bgCtn:removeChildren()
  local mapId = nil
  if self.viewType == FogConst.VIEW_TYPE_FOG_ENEMY then
    if FogFunc.enemyCell then
      local event = FogFunc.enemyCell.eventData
      mapId = FogFunc.instance:getCfgDatasByKey("Enemy", event.params[0+1], "sceneId")
    else
      LogsManager.errorTag("", "没有当前的敌人事件格子")
    end
    mapId = "1"
  else
    mapId = BattleFunc.instance:getCfgDatasByKey("Level", self.levelId, "sceneId") or 1
  end
  local sceneInfo = BattleFunc.instance:getCfgDatas("Scene", mapId)
  local backInfo = sceneInfo.background
  local mapName = backInfo[0+1]
  self.mapName = mapName
  local mapStartIndex = Number(backInfo[1+1])
  local startOffest = Number(backInfo[2+1])
  self.mapInfo = {ctn=self.bgCtn, infoArr={}}
  self.bgCtn.x = -ScreenAdapterTools.sceneOffsetX - ScreenAdapterTools.UIOffsetX - startOffest
  local i = 1
  repeat
    self:createOneView(mapName, i, mapStartIndex)
    -- [ts2lua]lua中0和空字符串也是true，此处mapStartIndex + 1 > self._allMapCount需要确认
    mapStartIndex = (mapStartIndex + 1 > self._allMapCount and {1} or {mapStartIndex + 1})[1]
    i=i+1
  until not(i <= self._pickNums)
end

function BattleDetailUI:createOneView(firstName, index, mapId)
  local imageUrl1 = nil
  local name = nil
  local path = nil
  name = firstName .. "_0" .. mapId
  path = "map/" .. firstName .. "/" .. name
  local image = Laya.Image()
  if UserInfo.isSystemNative() then
    imageUrl1 = "map/" .. firstName .. "/" .. name .. ".png"
  else
    imageUrl1 = "map/" .. firstName .. "/" .. firstName .. "/" .. name .. ".png"
    image:scale(2 * 1 + 2 / 256, 2)
  end
  self.bgCtn:addChild(image)
  local posIndex = index - 1 * 2
  local xpos = posIndex * self._areaWidth - self._smallMapCount * 256
  if mapId == 5 then
    self._smallMapCount = self._smallMapCount + 1
  end
  image.anchorX = 0
  image.x = xpos
  image.y = 0
  local viewInfo = {view=image}
  table.insert(self.mapInfo.infoArr, viewInfo)
  local onMapComplete = function()
    image.skin = imageUrl1
  end
  
  if SubPackageManager.getPackStyle(SubPackageConst.packName_map) == SubPackageConst.PATH_STYLE_SUBPACK then
    SubPackageManager.loadDynamics(firstName, path, onMapComplete, self)
  else
    onMapComplete()
  end
end

function BattleDetailUI:showRole()
  self:setShowRole()
  local i = 0
  repeat
    local x = ScreenAdapterTools.width / 2 + 160 + 120 * Math:floor(i / 3)
    local y = 600 + 150 * i % 3
    self:setRoleAni(i, x, y, -1, self.enemyArr, self.enemyTxtArr, true)
    i=i+1
  until not(i < #self.enemyArr)
  local i = 0
  repeat
    local x = ScreenAdapterTools.width / 2 - 50 - 120 * Math:floor(i / 3)
    local y = 600 + 150 * i % 3
    self:setRoleAni(i, x, y, 1, self.heroArr, self.roleTxtArr)
    i=i+1
  until not(i < #self.heroArr)
  self:freshSpeakInfo()
  self.timeCode = TimerManager.instance:add(self.freshSpeakInfo, self, GlobalParamsFunc.instance:getDataNum("preSpeakInterval"))
end

function BattleDetailUI:setRoleAni(i, x, y, viewWay, arr, txtArr, isForce)
  if isForce == nil then
    isForce=false
  end
  local role = Laya.Image()
  role.anchorX = 0.5
  role.anchorY = 1
  self.roleCtn:addChild(role)
  local item = arr[i+1]
  local cacheItem = PoolTools.getItem(PoolCode.POOL_ROLE + item.id .. "_" .. viewWay)
  local scale = BattleFunc.instance:getCfgDatasByKey("Role", item.id, "scale") / 10000 or 1
  local showScale = scale * BattleFunc.defaultScale * self.extraScale
  if not cacheItem then
    if BattleFunc.curBattleType == BattleConst.BATTLETYPE_NORMAL then
      isForce = false
    end
    cacheItem = BattleFunc.instance:createRoleSpine(item.id, item.level, 2, showScale, true, isForce)
  else
    cacheItem:setItemViewScale(showScale)
  end
  cacheItem.scaleX = viewWay
  local size = BattleFunc.instance:getCfgDatasByMultyKey("RoleUpdate", item.id, item.level, "size")
  role:addChild(cacheItem)
  local halfWidth = size[0+1] * scale * self.extraScale / 2
  local height = size[1+1] * scale * self.extraScale
  cacheItem:play("idle", true)
  role.x = x
  role.y = y
  local ctn = self:addSpeak(viewWay)
  self.txtCtn:addChild(ctn)
  ctn.x = x + halfWidth * viewWay
  ctn.y = y - height
  ctn.visible = false
  table.insert(txtArr, {ctn=ctn, speak=BattleFunc.instance:getCfgDatasByKey("Role", item.id, "preSpeak")})
  table.insert(self.roleAniArr, {item=cacheItem, id=item.id, viewway=viewWay})
  if self.levelId >= self.equipUnlock then
    local star = Laya.Image()
    star.x = x - halfWidth
    star.y = y - height - 20
    self.txtCtn:addChild(star)
    RolesFunc.instance:addStarImg(star, item.id, 20, 20, item.starLevel)
  end
end

function BattleDetailUI:addSpeak(viewway)
  local ctn = Laya.Image()
  local img = Laya.Image()
  local txt = Laya.Label()
  img.width = 170
  img.height = 96
  if viewway == -1 then
    img.skin = "uisource/common/common/common_image_difang.png"
    txt.width = 112
    txt.height = 37
    txt.rotation = 0
    img.x = -129
    img.y = -80
    txt.x = -92
    txt.y = -47
    txt.font = "Microsoft YaHei"
    txt.fontSize = 20
    txt.color = "#000000"
    txt.overflow = "hidden"
    txt.wordWrap = true
    txt.name = "txt"
  else
    img.skin = "uisource/common/common/common_image_qipao.png"
    img.scaleX = -1
    img.x = 146
    img.y = -70
    txt.width = 112
    txt.height = 37
    txt.rotation = 0
    txt.x = 8
    txt.y = -44
    txt.font = "Microsoft YaHei"
    txt.fontSize = 20
    txt.color = "#000000"
    txt.overflow = "hidden"
    txt.wordWrap = true
    txt.name = "txt"
  end
  txt.text = ""
  ctn:addChild(img)
  ctn:addChild(txt)
  return ctn
end

function BattleDetailUI:setShowRole()
  if self.viewType == FogConst.VIEW_TYPE_BATTLE_DETAIL then
    self.enemyArr = RolesFunc.instance:getLevelMonsterArr(self.levelId)
    self.heroArr = RolesModel.instance:getInLineRole()
  elseif self.viewType == FogConst.VIEW_TYPE_FOG_ENEMY then
    self.enemyArr = FogFunc.instance:getEnemyLine(self.enemyId, self.enemyType)
    self.heroArr = RolesModel.instance:getFogRole()
  end
  self.heroArr:splice(6, #self.heroArr - 6)
end

function BattleDetailUI:freshSpeakInfo()
  if self.speakLine == 1 then
    local i = 0
    repeat
      local item = self.enemyTxtArr[i+1]
      item.ctn.visible = false
      i=i+1
    until not(i < #self.enemyTxtArr)
    local index = GameUtils.getRandomInt(0, #self.roleTxtArr - 1)
    local i = 0
    repeat
      local item = self.roleTxtArr[i+1]
      if i == index then
        item.ctn.visible = true
        local txt = item.ctn:getChildByName("txt")
        txt.text = TranslateFunc.instance:getTranslate(GameUtils.getRandomInArr(item.speak).result)
      else
        item.ctn.visible = false
      end
      i=i+1
    until not(i < #self.roleTxtArr)
    self.speakLine = 2
  else
    local i = 0
    repeat
      local item = self.roleTxtArr[i+1]
      item.ctn.visible = false
      i=i+1
    until not(i < #self.roleTxtArr)
    local index = GameUtils.getRandomInt(0, #self.enemyTxtArr - 1)
    local i = 0
    repeat
      local item = self.enemyTxtArr[i+1]
      if i == index then
        item.ctn.visible = true
        local txt = item.ctn:getChildByName("txt")
        txt.text = TranslateFunc.instance:getTranslate(GameUtils.getRandomInArr(item.speak).result)
      else
        item.ctn.visible = false
      end
      i=i+1
    until not(i < #self.enemyTxtArr)
    self.speakLine = 1
  end
end

function BattleDetailUI:cacheRole()
  local i = #self.roleAniArr - 1
  repeat
    local item = self.roleAniArr[i+1]
    local role = item.item
    local id = item.id
    PoolTools.cacheItem(PoolCode.POOL_ROLE + item.id .. "_" .. item.viewWay, role)
    self.roleAniArr:splice(i, 1)
    local ctn = self.roleCtn:getChildAt(i)
    ctn:removeChild(role)
    self.roleCtn:removeChild(ctn)
    i=i-1
  until not(i >= 0)
end

function BattleDetailUI:onClickFogFull()
  WindowManager.OpenUI(WindowCfgs.FogBattleStartAlertUI, {detail=self})
end

function BattleDetailUI:onClickStartGame()
  if self.viewType == FogConst.VIEW_TYPE_FOG_ENEMY then
    if self.actCost > FogModel.instance:getActNum() then
      FogModel.instance:checkFreeAct()
      return
    end
    self:enterBattle()
  elseif self.viewType == FogConst.VIEW_TYPE_BATTLE_DETAIL then
    self:enterBattle()
  end
end

function BattleDetailUI:enterBattle()
  local result = LevelFunc.instance:checkIsBattleAddtionInGame()
  if not result[0+1] or BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    self:dispose()
    WindowManager.SwitchUI(WindowCfgs.BattleUI, WindowCfgs.BattleDetailUI)
  else
    WindowManager.OpenUI(WindowCfgs.BattleFullEnergyUI, {battleAddtionId=result[1+1], detail=self})
  end
end

function BattleDetailUI:onClickReturn()
  self:dispose()
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_NORMAL then
    WindowManager.SwitchUI(WindowCfgs.GameMainUI, WindowCfgs.BattleDetailUI)
  elseif BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    WindowManager.CloseUI(WindowCfgs.BattleDetailUI)
  end
end

function BattleDetailUI:destoryOneLayer(mapInfo)
  local infoArr = mapInfo.infoArr
  local i = 0
  repeat
    local view = infoArr[i+1].view
    view:removeSelf()
    view:dispose()
    i=i+1
  until not(i < #infoArr)
  if not UserInfo.isSystemNative() then
    Laya.loader:clearRes("res/atlas/map/" .. self.mapName .. "/" .. self.mapName .. ".atlas")
    Laya.loader:clearRes("res/atlas/map/" .. self.mapName .. "/" .. self.mapName .. ".png")
  end
end

function BattleDetailUI:dispose()
  self:cacheRole()
  self:destoryOneLayer(self.mapInfo)
  self.mapInfo = nil
  TimerManager.instance:remove(self.timeCode)
end

function BattleDetailUI:recvMsg(cmd, data)
  local switch = {
    
  }
  local casef = switch[cmd]
  if not casef then casef = switch["default"] end
  if casef then casef() end
end
