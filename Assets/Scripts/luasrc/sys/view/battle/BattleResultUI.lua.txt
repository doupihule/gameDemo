require("stringutil")
require("ui/layaMaxUI")
require("framework/manager/WindowManager")
require("game/sys/consts/WindowCfgs")
require("game/sys/server/BattleServer")
require("game/sys/func/LevelFunc")
require("game/sys/manager/BattleSceneManager")
require("framework/manager/SoundManager")
require("game/sys/consts/MusicConst")
require("game/sys/manager/StatisticsManager")
require("game/sys/view/battle/BattleUI")
require("framework/utils/StringUtils")
require("framework/utils/ButtonUtils")
require("framework/consts/ButtonConst")
require("framework/manager/ShareOrTvManager")
require("game/sys/func/ShareTvOrderFunc")
require("framework/manager/JumpManager")
require("game/sys/consts/JumpConst")
require("game/sys/consts/ResourceConst")
require("game/sys/func/DataResourceFunc")
require("game/sys/func/DataResourceFunc/DataResourceType")
require("framework/manager/CacheManager")
require("game/sys/consts/StorageCode")
require("game/sys/func/GlobalParamsFunc")
require("game/sys/consts/BattleConst")
require("game/sys/func/BattleFunc")
require("framework/utils/PoolTools")
require("game/sys/consts/PoolCode")
require("game/sys/func/RolesFunc")
require("framework/manager/TimerManager")
require("framework/func/TranslateFunc")
require("game/sys/model/RolesModel")
require("framework/common/kakura/Client")
require("game/sys/model/UserModel")
require("game/sys/manager/GuideManager")
require("game/sys/consts/GuideConst")
require("game/sys/model/UserExtModel")
require("framework/common/Message")
require("game/sys/event/FogEvent")
require("game/sys/func/FogFunc")
require("game/sys/model/FogModel")
require("game/fog/trigger/FogEventTrigger")
require("game/fog/trigger/FogPropTrigger")
require("game/sys/server/FogServer")
require("game/sys/consts/FogConst")

BattleResultUI = newClass({ui.gameui.battle.BattleResultUI}, {name = 'BattleResultUI'})

function BattleResultUI:ctor()
  self:superCall('ctor')
  self.isWin = false;
  self.timeCode = 0;
  self.addPercent = 1;
  (ButtonUtils(self.multiReceiveBtn, self.onReceiveBtnClick, self)):setBtnType(ButtonConst.BUTTON_TYPE_4)
  ButtonUtils(self.receiveBtn, self.onCloseBtnClick, self)
  ButtonUtils(self.returnBtn, self.onClickReturn, self)
  ButtonUtils(self.againBtn, self.onClickAgain, self)
end

function BattleResultUI:setData(data)
  self.addPercent = 1
  self.type = ShareOrTvManager.instance:getShareOrTvType(ShareTvOrderFunc.SHARELINE_BATTLEWIN)
  self.isWin = data.isWin
  self.levelId = data.levelId
  self.controler = data.controler
  if self.isWin then
    self.win.visible = true
    self.lose.visible = false
    if self.type == ShareOrTvManager.TYPE_QUICKRECEIVE or UserModel.instance:getMainGuide() == 1 and UserModel.instance:getMaxBattleLevel() == 0 then
      self.multiReceiveBtn.visible = false
      self.receiveBtn.x = 300
    else
      self.multiReceiveBtn.visible = true
      self.receiveBtn.x = 133
      self.receiveImg.skin = ShareOrTvManager.instance:setShareOrTvImg(ShareTvOrderFunc.SHARELINE_BATTLEWIN, ShareOrTvManager.TYPE_SHARE)
    end
  else
    self.win.visible = false
    self.lose.visible = true
    StatisticsManager.ins:onEvent(StatisticsManager.LEVEL_FAIL, {levelId=data.levelId, time=Client.instance.serverTime - self.controler.startTime})
  end
  self:showWinReward()
  self:showRole()
end

function BattleResultUI:showWinReward()
  self.pieceGroup.visible = false
  self.rewardImg.visible = false
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    self:showFogResultReward()
  else
    self:showNormalBattleReward()
  end
  self.receiveText:changeText(self.battleResultRetio .. '倍领取')
end

function BattleResultUI:showFogResultReward()
  local enemy = FogFunc.enemyCell.eventData
  if self.isWin then
    FogServer.updateFogCount({type=FogConst.FOG_COUNT_FIGHTENEMY})
    self.rewardImg.visible = true
    self:setWarReward()
    self.battleResultCount = CacheManager.instance:getLocalCache(StorageCode.storage_fogBattleResultCount)
    if (not self.battleResultCount or self.battleResultCount == nil) or isNaN(self.battleResultCount) then
      self.battleResultCount = 0
    end
    local settlementDouble = GlobalParamsFunc.instance:getDataArray('fogBattleDouble')
    -- [ts2lua]settlementDouble下标访问可能不正确
    self.battleResultRetio = Number(settlementDouble[self.battleResultCount % #settlementDouble])
    StatisticsManager.ins:onEvent(StatisticsManager.FOG_BATTLE_VICTORY, {enemyId=enemy.enemyData.id})
    StatisticsManager.ins:onEvent(StatisticsManager.SHOWTV_FOG_BATTLE_SHOW, {doubleRate=self.battleResultRetio, enemyId=enemy.enemyData.id})
    FogServer.delFogCount({type=FogConst.fog_battle_defeat})
  else
    self.win.visible = false
    self.lose.visible = true
    FogServer.updateFogCount({type=FogConst.fog_battle_defeat})
    StatisticsManager.ins:onEvent(StatisticsManager.FOG_BATTLE_FAIL, {enemyId=enemy.enemyData.id})
  end
end

function BattleResultUI:showNormalBattleReward()
  self:setReward()
  if self.isWin then
    self.battleResultCount = CacheManager.instance:getLocalCache(StorageCode.storage_battleResultCount)
    if (not self.battleResultCount or self.battleResultCount == nil) or isNaN(self.battleResultCount) then
      self.battleResultCount = 0
    end
    local settlementDouble = GlobalParamsFunc.instance:getDataArray('settlementDouble')
    -- [ts2lua]settlementDouble下标访问可能不正确
    self.battleResultRetio = Number(settlementDouble[self.battleResultCount % #settlementDouble])
    StatisticsManager.ins:onEvent(StatisticsManager.LEVEL_VICTORY, {levelId=self.levelId, time=Client.instance.serverTime - self.controler.startTime})
    StatisticsManager.ins:onEvent(StatisticsManager.SHOWTV_BATTLEVICTORY_SHOW, {doubleRate=self.battleResultRetio})
    self:showGuide_201()
  else
    self.win.visible = false
    self.lose.visible = true
    StatisticsManager.ins:onEvent(StatisticsManager.LEVEL_FAIL, {levelId=self.levelId, time=Client.instance.serverTime - self.controler.startTime})
  end
end

function BattleResultUI:showGuide_201()
  if UserModel.instance:getMainGuide() == 1 and UserModel.instance:getMaxBattleLevel() == 0 then
    GuideManager.ins:setGuideData(GuideConst.GUIDE_2_201, GuideManager.GuideType.Static, self.receiveBtn, self)
    GuideManager.ins:openGuideUI(GuideConst.GUIDE_2_201, nil, self, self.onCloseBtnClick)
    return true
  end
  return false
end

function BattleResultUI:showGuide_201_finish()
  GuideManager.ins:guideFin(GuideConst.GUIDE_2_201, function()
    WindowManager.CloseGuideUI(WindowCfgs.GuideUI)
  end
  , self, true)
end

function BattleResultUI:showGuide_401()
  local unlock = GlobalParamsFunc.instance:getDataNum("equipUnlock")
  if Number(self.levelId) < unlock then
    return
  end
  if UserModel.instance:getMainGuide() <= 5 then
    GuideManager.ins:setGuideData(GuideConst.GUIDE_4_401, GuideManager.GuideType.Static, self.pieceGroup, self)
    GuideManager.ins:openGuideUI(GuideConst.GUIDE_4_401, self.showGuide_401_finish, self, self.onCloseBtnClick)
  end
end

function BattleResultUI:showGuide_401_finish()
  GuideManager.ins:guideFin(GuideConst.GUIDE_4_401, function()
    WindowManager.CloseGuideUI(WindowCfgs.GuideUI)
    self:showGuide_402()
  end
  , self, false)
end

function BattleResultUI:showGuide_402()
  GuideManager.ins:setGuideData(GuideConst.GUIDE_4_402, GuideManager.GuideType.Static, self.returnBtn, self)
  GuideManager.ins:openGuideUI(GuideConst.GUIDE_4_402, self.showGuide_402_finish, self, self.onCloseBtnClick)
end

function BattleResultUI:showGuide_402_finish()
  GuideManager.ins:guideFin(GuideConst.GUIDE_4_402, function()
    WindowManager.CloseGuideUI(WindowCfgs.GuideUI)
    self:onCloseBtnClick()
  end
  , self, true)
end

function BattleResultUI:setWarReward()
  FogPropTrigger.checkPropTriggerOnInstance(FogPropTrigger.Prop_type_AddMoneyPer, self)
  local enemy = FogFunc.enemyCell.eventData
  local reward = enemy.enemyData.reward
  -- [ts2lua]DataResourceFunc.instance:getDataResourceInfo(reward)下标访问可能不正确
  self.rewardImg.skin = DataResourceFunc.instance:getDataResourceInfo(reward)["img"]
  self.rewardTxt.text = Math:floor(reward[1+1] + reward[2+1] * FogModel.instance:getCurLayer() * self.addPercent) .. ""
end

function BattleResultUI:setReward()
  local reward = LevelFunc.instance:getLevelInfoById(self.levelId)
  local rewardList = nil
  if self.isWin then
    rewardList = reward.victoryReward
  else
    rewardList = reward.defeatReward
  end
  local coin = 0
  local gold = 0
  local piece = 0
  local pieceId = nil
  for index in pairs(rewardList) do
    -- [ts2lua]rewardList下标访问可能不正确
    local reward = rewardList[index]:split(",")
    local switch = {
      [DataResourceType.COIN] = function()
        coin = coin + Number(reward[1+1])
      end,
      [DataResourceType.GOLD] = function()
        gold = gold + Number(reward[1+1])
      end,
      [DataResourceType.PIECE] = function()
        pieceId = reward[1+1]
        piece = piece + Number(reward[2+1])
      end
    }
    local casef = switch[Number(reward[0+1])]
    if not casef then casef = switch["default"] end
    if casef then casef() end
  end
  self.rewardImg.x = 327
  self.rewardImg.visible = true
  if gold then
    self.rewardImg.skin = ResourceConst.GOLD_PNG
    self.rewardTxt.text = StringUtils.getCoinStr(gold .. "")
  end
  if coin then
    self.rewardImg.skin = ResourceConst.COIN_PNG
    self.rewardTxt.text = StringUtils.getCoinStr(coin .. "")
  end
  if piece then
    self.pieceIcon.skin = RolesFunc.instance:getEquipIcon(RolesFunc.instance:getCfgDatasByKey("EquipMaterial", pieceId, "icon"))
    self.pieceCount.text = piece .. ""
    self.rewardImg.x = 219
    self.pieceGroup.visible = true
    self:showGuide_401()
  end
end

function BattleResultUI:showRole()
  local randomArr = {}
  local roleInfo = nil
  local txt = nil
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_NORMAL then
    if self.isWin then
      randomArr = RolesModel.instance:getInLineRole()
      txt = self.heroTxt
    else
      randomArr = RolesFunc.instance:getLevelMonsterArr(self.levelId)
      txt = self.enemyTxt
    end
  elseif BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    if self.isWin then
      randomArr = RolesModel.instance:getFogRole()
      txt = self.heroTxt
    else
      local events = FogFunc.enemyCell.eventData
      randomArr = FogFunc.instance:getEnemyLine(events.enemyId, events.enemyType)
      txt = self.enemyTxt
    end
  end
  self.heroSpeak.visible = self.isWin
  self.enemySpeak.visible = not self.isWin
  local i = 0
  repeat
    local item = randomArr[i+1]
    if item.lifeType ~= BattleConst.LIFE_JIDI then
      roleInfo = item
      break
    end
    i=i+1
  until not(i < #randomArr)
  local id = roleInfo.id
  local level = roleInfo.level
  if self.roleAnim then
    self.aniGroup:removeChild(self.roleAnim)
    PoolTools.cacheItem(PoolCode.POOL_ROLE + self._lastRoleId, self.roleAnim)
  end
  local cacheItem = PoolTools.getItem(PoolCode.POOL_ROLE + id)
  local scale = GlobalParamsFunc.instance:getDataNum("roleSizeInSettlementUi") / 10000 or 1 * BattleFunc.defaultScale
  if not cacheItem then
    cacheItem = BattleFunc.instance:createRoleSpine(id, level, 2, scale, true, not self.win)
  else
    cacheItem:setItemViewScale(scale)
  end
  if not self.isWin then
    cacheItem.scaleX = -1
    self.failTxt.text = TranslateFunc.instance:getTranslate(BattleFunc.instance:getCfgDatasByKey("Role", id, "buttonWords"))
  else
    cacheItem.scaleX = 1
  end
  self.roleAnim = cacheItem
  self.aniGroup:addChild(self.roleAnim)
  self.roleAnim:play("idle", true)
  self._lastRoleId = id
  self.timeCode = RolesFunc.instance:setRoleSpeak(self._lastRoleId, RolesFunc.ROLE_SPEAK_RESULT, txt, self)
end

function BattleResultUI:onClickReturn()
  BattleServer.battleResult({levelId=self.levelId, doubleRate=1}, self.exitBattle, self)
end

function BattleResultUI:onClickAgain()
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    local userActNum = FogModel.instance:getActNum()
    if userActNum < Number(FogFunc.enemyCell.eventData.mobilityCost) then
      FogModel.instance:checkFreeAct()
      return
    end
  elseif BattleFunc.curBattleType == BattleConst.BATTLETYPE_NORMAL then
    if self:showGetPower() then
      return
    end
    StatisticsManager.ins:onEvent(StatisticsManager.LEVEL_START, {levelId=self.levelId, entrance="resultUI"})
  end
  BattleServer.battleResult({levelId=self.levelId, doubleRate=1}, function()
    BattleSceneManager.instance:replayBattle()
    WindowManager.CloseUI(WindowCfgs.BattleResultUI)
    TimerManager.instance:remove(self.timeCode)
  end
  , self)
end

function BattleResultUI:showGetPower()
  local power = UserExtModel.instance:getCurrentSp()
  if power < GlobalParamsFunc.instance:getDataNum('levelSpCost') then
    local freeType = ShareOrTvManager.instance:getShareOrTvType(ShareTvOrderFunc.SHARELINE_FREE_SP)
    if freeType == ShareOrTvManager.TYPE_QUICKRECEIVE then
      WindowManager.ShowTip(TranslateFunc.instance:getTranslate("#tid_battle_noenoughsp"))
    else
      WindowManager.OpenUI(WindowCfgs.FreeResourceUI, {type=DataResourceType.SP})
    end
    return true
  end
  return false
end

function BattleResultUI:onCloseBtnClick()
  if UserModel.instance:getMainGuide() == 1 and UserModel.instance:getMaxBattleLevel() == 0 then
    self:showGuide_201_finish()
  end
  BattleServer.battleResult({isWin=self.isWin, levelId=self.levelId, doubleRate=1 * self.addPercent, receiveCount=self.battleResultCount}, self.exitBattle, self)
end

function BattleResultUI:onReceiveBtnClick()
  if self.type == ShareOrTvManager.TYPE_QUICKRECEIVE then
    WindowManager.ShowTip(TranslateFunc.instance:getTranslate("#tid_ad_error"))
  else
    if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR and self.isWin then
      local enemy = FogFunc.enemyCell.eventData
      StatisticsManager.ins:onEvent(StatisticsManager.SHOWTV_FOG_BATTLE_CLICK, {doubleRate=self.battleResultRetio, enemyId=enemy.enemyData.id})
    else
      StatisticsManager.ins:onEvent(StatisticsManager.SHOWTV_BATTLEVICTORY_CLICK, {doubleRate=self.battleResultRetio})
    end
    ShareOrTvManager.instance:shareOrTv(ShareTvOrderFunc.SHARELINE_BATTLEWIN, ShareOrTvManager.TYPE_ADV, {id="1", extraData={}}, self.successCall, self.closeCall, self)
  end
end

function BattleResultUI:successCall()
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR and self.isWin then
    if self.type == ShareOrTvManager.TYPE_ADV then
      StatisticsManager.ins:onEvent(StatisticsManager.SHOWTV_FOG_BATTLE_FINISH, {doubleRate=self.battleResultRetio})
    end
    if self.type == ShareOrTvManager.TYPE_SHARE or self.type == ShareOrTvManager.TYPE_SHAREVIDEO then
      StatisticsManager.ins:onEvent(StatisticsManager.SHARE_FOG_BATTLE_FINISH, {doubleRate=self.battleResultRetio})
    end
  else
    if self.type == ShareOrTvManager.TYPE_ADV then
      StatisticsManager.ins:onEvent(StatisticsManager.SHOWTV_BATTLEVICTORY_FINISH, {doubleRate=self.battleResultRetio})
    end
    if self.type == ShareOrTvManager.TYPE_SHARE or self.type == ShareOrTvManager.TYPE_SHAREVIDEO then
      StatisticsManager.ins:onEvent(StatisticsManager.SHARE_SETTLEMENT_CLICKSUCCESS, {doubleRate=self.battleResultRetio})
    end
  end
  BattleServer.battleResult({isWin=self.isWin, levelId=self.levelId, doubleRate=self.battleResultRetio * self.addPercent, receiveCount=self.battleResultCount}, self.exitBattle, self)
end

function BattleResultUI:closeCall() end
function BattleResultUI:exitBattle()
  self:finishGuide_803()
  local battleUi = WindowManager.getUIByName(WindowCfgs.BattleUI)
  battleUi.visible = true
  battleUi:close()
  BattleSceneManager.instance:exitBattle()
  SoundManager.stopMusicOrSound(MusicConst.SOUND_BATTLE_BG)
  self:close()
end

function BattleResultUI:close()
  TimerManager.instance:remove(self.timeCode)
  WindowManager.CloseUI(WindowCfgs.BattleResultUI)
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_NORMAL then
    local levelId = self.controler.battleData.levelId
    WindowManager.OpenUI(WindowCfgs.GameMainUI, {fromResultLevel=levelId})
  elseif BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    if self.isWin then
      Message.instance:send(FogEvent.FOGEVENT_REFRESH_COMP)
      Message.instance:send(FogEvent.FOGEVENT_REFRESH_CELLEVENT, {cell=FogFunc.enemyCell, behind=1, type=FogEventTrigger.Event_logical_Enemy})
    else
      if FogModel.instance:getCountsById(FogConst.fog_battle_defeat) >= GlobalParamsFunc.instance:getDataNum("fogExitTipsTimes") then
        WindowManager.OpenUI(WindowCfgs.FogTipUI, {type=FogConst.FOG_VIEW_TYPE_DEFEAT})
      end
    end
  end
end

function BattleResultUI:finishGuide_803()
  if GuideManager.ins.recentGuideId == GuideConst.GUIDE_8_802 then
    self.controler.guideControler:checkGuide_803_finish()
  end
end

function BattleResultUI:showJump()
  JumpManager.showDrawerView(JumpConst.JUMPLIST, {result=1})
end

function BattleResultUI:recvMsg(cmd, data)
  local switch = {
    
  }
  local casef = switch[cmd]
  if not casef then casef = switch["default"] end
  if casef then casef() end
end
