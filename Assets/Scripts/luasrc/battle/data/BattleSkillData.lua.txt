BattleSkillData = class('BattleSkillData')

function BattleSkillData:ctor(skillId, level, role, skillType, relyonSkill, lifeType)
    self.leftSkillCd = 0;
    self._cfgSkillCd = 0;
    self.isActive = false;
    self.skillWaitFrame = 0;
    if relyonSkill == nil then
        relyonSkill = nil
    end
    if lifeType == nil then
        lifeType = nil
    end
    self._skillId = skillId
    self.owner = role
    self.skillType = skillType
    self.relyonSkill = relyonSkill
    self.parentLifeType = lifeType
    self:updateLevel(level)
    self.tempChooseArr = {}
end

function BattleSkillData:updateLevel(level)
    if self.parentLifeType == BattleConst.LIFE_PLAYER then
        self.isActive = true
    else
        if level == 0 then
            level = 1
            self.isActive = false
        else
            self.isActive = true
        end
    end
    if BattleDebugTool.isNoHeroCd() then
        self.isActive = true
    end
    if not self.isActive then
        self.level = level
    else
        if self.level == level then
            return
        end
    end
    self.level = level
    if self.relyonSkill then
        self.skillPropParams = BattleFunc.getInstance():getCfgDatasByMultyKey("SkillUpdate", self.relyonSkill._skillId, tostring(self.relyonSkill.level), "params", true)
    else
        self.skillPropParams = BattleFunc.getInstance():getCfgDatasByMultyKey("SkillUpdate", self._skillId, tostring(level), "params", true)
    end
    if self.skillType ~= BattleConst.skill_kind_passive then
        self.cfgData = BattleFunc.getInstance():getCfgDatas("Skill", self._skillId)
        local value = self.cfgData.action and self.cfgData.action[5]
        value = tonumber(value);
        if value and value > 0 then
            self.skillWaitFrame = BattleFunc.getInstance():turnMinisecondToframe(tonumber(value))
        end
        self.chooseTartgetCfg = BattleFunc.getInstance():getCfgDatas("Target", tostring(self.cfgData.target))
        if not self.skillLabel then
            if self.cfgData.action then
                self.skillLabel = TableUtils.copyOneArr(self.cfgData.action)
                for i = 2, #self.skillLabel do
                    self.skillLabel[i] = tonumber(self.skillLabel[i])
                end
            end
        end
        local skillEffect = self.cfgData.skillEffect
        if skillEffect then
            if not self.skillActionArr then
                self.skillActionArr = {}
                for i, info in ipairs(skillEffect) do
                    local actionData = SkillActionData.new(info[1], self.owner, self, tonumber(info[2]), tonumber(info[3]), tonumber(info[4]), tonumber(info[5]), 0)
                    table.insert(self.skillActionArr, actionData)
                end
            else
                for i, actionData in ipairs(skillEffect) do
                    actionData:updateData(self.owner, self)
                end
            end
        end
        if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR and FogFunc.warHomeSkillCd[self._skillId] then
            self._cfgSkillCd = math.ceil(FogFunc.warHomeSkillCd[self._skillId] * BattleFunc.miniSecondToFrame)
        else
            if self.cfgData.cdTime then
                self._cfgSkillCd = math.ceil(self.cfgData.cdTime * BattleFunc.miniSecondToFrame)
            end
        end
    end
end

function BattleSkillData:getActionById(id)
    local i = 0
    for i, act in ipairs(self.skillActionArr) do
        if act.skillEffectId == id then
            return act
        end
    end
    return nil
end

function BattleSkillData:resetData()
    self.leftSkillCd = 0
end

function BattleSkillData:getSkillInitCd()
    return math.ceil(self._cfgSkillCd * self.owner.attrData:getSkillCdAdded(self._skillId) / 10000)
end

function BattleSkillData:getSkillValue(key, tag)
    if tag == nil then
        tag = nil
    end
    if not self.skillPropParams then
        return tonumber(key)
    end
    return BattleFunc.getInstance():getSkillValueByParams(key, self.relyonSkill and self.relyonSkill._skillId or self._skillId, self.level, self.skillPropParams, tag)
end

function BattleSkillData:dispose()
    self.skillData = nil
    self.skillData = nil
    self.skillPropParams = nil
end
