AttributeExtendData = class('AttributeExtendData')

function AttributeExtendData:ctor(id, roleData, lifeType, userData, globalAttrMap, outRecount)
    self.level = 1;
    self.starLevel = 0;
    self.hasDataChange = false;
    self.hasCountPassive = false;
    self._hasTempAttrChange = false;
    if globalAttrMap == nil then
        globalAttrMap = nil
    end
    if outRecount == nil then
        outRecount = false
    end
    self:resetData(id, roleData, lifeType, userData, globalAttrMap)
end

function AttributeExtendData:resetData(id, roleData, lifeType, userData, globalAttrMap, outRecount)
    if globalAttrMap == nil then
        globalAttrMap = nil
    end
    if outRecount == nil then
        outRecount = false
    end
    self.id = id
    self.skillCdMap = {}
    self._data = roleData
    self._userData = userData
    self.extraAttr = {}
    self.tempOnceAttr = {}
    self.baseAttr = {}
    self.addAttr = {}
    self.finalAttr = {}
    self.hasCountPassive = false
    self.lifeType = lifeType
    self:updateData(roleData, globalAttrMap, outRecount)
end

function AttributeExtendData:updateData(roleData, globalAttrMap, outRecount)
    if globalAttrMap == nil then
        globalAttrMap = nil
    end
    if outRecount == nil then
        outRecount = false
    end
    self._globalAttrMap = globalAttrMap
    self.level = roleData.level or 1
    self.starLevel = roleData.starLevel or 0
    self.equip = roleData.equip or nil
    local attrArr = BattleFunc.getInstance():getCfgDatasByMultyKey("RoleUpdate", self.id, self.level, "attribute")
    self.baseAttr = self:resetBaseAtt(attrArr)
    self:countPassiveAttr(roleData)
    if not outRecount then
        self:countAllAttr()
    end
end

function AttributeExtendData:countSummonedAttr(level, fromAttr)
    local attrArr = BattleFunc.getInstance():getCfgDatasByMultyKey("RoleUpdate", self.id, level, "attribute")
    self.baseAttr = self:resetBaseAtt(attrArr)
    self:countAllAttr()
end

function AttributeExtendData:resetBaseAtt(attrArr)
    attrArr = BattleFunc.getInstance():turnPropArrToTable(attrArr)
    if self.lifeType ~= BattleConst.LIFE_JIDI then
        for key, info in pairs(attrArr) do
            info[1] = RolesFunc.getInstance():getAttrNumByLevel(key, self.id, self.level, self.starLevel, true, nil, self.equip)
            attrArr[key] = info
        end
    end
    return attrArr
end

function AttributeExtendData:countPassiveAttr(roleData)
    if self.lifeType == BattleConst.LIFE_PLAYER then
        return
    end
    if self.hasCountPassive then
        return
    end
    local passSkill = roleData.passiveSkills
    if not passSkill or #passSkill == 0 then
        return
    end
    self.hasCountPassive = true
    local i = 0
    for i, passiveId in ipairs(passSkill) do
        local passiveCfg = BattleFunc.getInstance():getCfgDatas("PassiveSkill", passiveId)
        local effectType = passiveCfg.effectType
        local tempArr = {}
        if effectType == BattleConst.passive_effect_attr then
            local effectParams = passiveCfg.effectParams
            for s, tempArr in ipairs(effectParams) do
                self:updateOneAttr(tempArr[1], tonumber(tempArr[2]), tonumber(tempArr[3]), self.extraAttr, true)
            end
        elseif effectType == BattleConst.passive_effect_skillcd then
            local effectParams = passiveCfg.effectParams
            local s = 0
            for s, arr in ipairs(effectParams) do
                local skillId = tostring(arr[1])
                local value = tonumber(arr[2])
                local skillValue = 10000 + value
                if skillValue < 0 then
                    skillValue = 0
                end
                self.skillCdMap[skillId] = skillValue
            end
        end
    end
end

function AttributeExtendData:countAllAttr()
    for i in pairs(BattleFunc.idToShowMap) do
        self:countOneProp(i)
    end
    self.hasDataChange = false
end

function AttributeExtendData:clearTempAttr()
    if not self._hasTempAttrChange then
        return
    end
    self._hasTempAttrChange = false
    local map = self.tempOnceAttr
    for i,tempArr in pairs(map) do
        if tempArr[1] ~= 0 or tempArr[2] ~= 0 then
            map[i][1] = 0
            map[i][2] = 0
            self:countOneProp(i)
        end
    end
end

function AttributeExtendData:countOneProp(attrId)
    local showType = BattleFunc.getPropStyle(attrId)
    local baseValue = self.baseAttr[attrId] and self.baseAttr[attrId][1] or 0
    local fixValue = self.extraAttr[attrId] and self.extraAttr[attrId][1] or 0
    local percentValue = self.extraAttr[attrId] and self.extraAttr[attrId][2] or 0
    fixValue = fixValue + self.tempOnceAttr[attrId] and self.tempOnceAttr[attrId][2] or 0
    percentValue = percentValue + self.tempOnceAttr[attrId] and self.tempOnceAttr[attrId][2] or 0
    local resultValue = nil
    if showType == BattleConst.PROPSTYLE_NUM then
        resultValue = 1 + percentValue / 10000 * baseValue + fixValue
    else
        resultValue = baseValue + fixValue
    end
    resultValue = math.floor(resultValue)
    self.finalAttr[attrId] = resultValue
end

function AttributeExtendData:changeExtraAttr(srcMap, way, recountAttr)
    if way == nil then
        way = 1
    end
    if recountAttr == nil then
        recountAttr = false
    end
    local targetMap = self.extraAttr
    for i,v in pairs(srcMap) do
        if not targetMap[i ] then
            targetMap[i] = { 0, 0 }
        end
        targetMap[i][1] = targetMap[i][1] + v[1] * way
        targetMap[i ][2] = targetMap[i][2] + v[2] * way
        if recountAttr then
            self:countOneProp(i)
        end
    end
end

function AttributeExtendData:changeTempAttr(srcMap)
    local targetMap = self.tempOnceAttr
    for i,v in pairs(srcMap) do
        self:changeOneTempAttr(i, v[1], v[2])
    end
end

function AttributeExtendData:changeOneTempAttr(attrId, fixValue, percentValue)
    self._hasTempAttrChange = true
    self:updateOneAttr(attrId, fixValue, percentValue, self.tempOnceAttr)
end

function AttributeExtendData:updateOneAttr(attrId, fixValue, percentValue, changeMap, outRecount)
    if outRecount == nil then
        outRecount = false
    end
    local arr = changeMap[attrId]
    if not arr then
        arr = { 0, 0 }
        changeMap[attrId] = arr
    end
    arr[1] = arr[1] + fixValue
    arr[2] = arr[2] + percentValue
    if not outRecount then
        self:countOneProp(attrId)
    end
end

function AttributeExtendData:getSkillCdAdded(skillId)
    return self.skillCdMap[skillId] or 10000
end

function AttributeExtendData:getOneAttr(propId)
    return self.finalAttr[propId] or 0
end
