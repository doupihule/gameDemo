PassiveSkillData = class('PassiveSkillData', BattleSkillData)

function PassiveSkillData:ctor(skillId, level, role, skillType, relyonSkill)
    PassiveSkillData.super.ctor(self, skillId, level, role, skillType, relyonSkill)
    self.triggerNums = 0;
    self.triggerFrame = 0;
    self.triggerNums = 0
    self.skillActionArr = {}
end

function PassiveSkillData:cacheOneSkillAction(skillAction)
    table.insert(self.skillActionArr, skillAction)
end

function PassiveSkillData:updateLevel(level)
    PassiveSkillData.super.updateLevel(self, level)
    self.cfgData = BattleFunc.getInstance():getCfgDatas("PassiveSkill", self._skillId)
    if self.cfgData.cdTime then
        self._cfgSkillCd = math.ceil(self.cfgData.cdTime * BattleFunc.miniSecondToFrame)
    end
    local tempArr = self.cfgData.effectParams
    local tagStr = "PassiveSkillData" .. self._skillId
    if tempArr then
        if not self.skillLogicalParams then
            self.skillLogicalParams = {}
        end
        self.skillLogicalParams = {}
        for i, temp in ipairs(tempArr) do
            if not self.skillLogicalParams[i] then
                self.skillLogicalParams[i] = {}
            end
            for s, vv in ipairs(temp) do
                self.skillLogicalParams[i][s] = self:getSkillValue(vv, tagStr)
            end
        end
    end
end
