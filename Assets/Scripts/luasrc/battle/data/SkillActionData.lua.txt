require("game/sys/func/BattleFunc")
require("framework/manager/LogsManager")

SkillActionData = class('SkillActionData')

function SkillActionData:ctor(id, owner, skill, delay, trigTimes, interval, resumeEnergy, opportunity, relyOnSill)
  self.trigTimes = 0;
  self.delay = 0;
  self.interval = 0;
  self.resumeEnergy = 0;
  self.opportunity = 0;
  if opportunity == nil then
    opportunity=0
  end
  if relyOnSill == nil then
    relyOnSill=nil
  end
  self.skillEffectId = id
  self.opportunity = opportunity
  self.trigTimes = trigTimes
  self.delay = BattleFunc.instance:turnMinisecondToframe(delay)
  self.interval = BattleFunc.instance:turnMinisecondToframe(interval)
  self.resumeEnergy = resumeEnergy
  self.cfgData = BattleFunc.instance:getCfgDatas("SkillEffect", id)
  self.tempChooseArr = {}
  self:updateData(owner, skill, relyOnSill)
  self.condition = self.cfgData.condition
end

function SkillActionData:updateData(owner, skill, relyonSkill)
  if relyonSkill == nil then
    relyonSkill=nil
  end
  if not skill then
    LogsManager.echo("noSkill------------------")
  end
  self.skill = skill
  self.relyonSkill = relyonSkill
  self.owner = owner
  if not self.cfgData.target then
    self.chooseTartgetCfg = nil
  else
    self.chooseTartgetCfg = BattleFunc.instance:getCfgDatas("Target", String(self.cfgData.target))
  end
  local tempArr = self.cfgData.logicParams
  if tempArr then
    if not self.skillLogicalParams then
      self.skillLogicalParams = {}
    end
    local targetSkillId = String(self.cfgData.numId)
    local tagStr = "SkillEffect:" .. self.skillEffectId
    if targetSkillId == self.skill._skillId then
      local i = 0
      repeat
        if not self.skillLogicalParams[i+1] then
          self.skillLogicalParams[i+1] = {}
        end
        local temp = tempArr[i+1]
        local s = 0
        repeat
          self.skillLogicalParams[i+1][s+1] = self.skill:getSkillValue(temp[s+1], tagStr)
          s=s+1
        until not(s < #temp)
        i=i+1
      until not(i < #tempArr)
    else
      local level = self.owner:getCfgSkillLevel(targetSkillId)
      local i = 0
      repeat
        if not self.skillLogicalParams[i+1] then
          self.skillLogicalParams[i+1] = {}
        end
        local temp = tempArr[i+1]
        local s = 0
        repeat
          self.skillLogicalParams[i+1][s+1] = BattleFunc.instance:getSkillValueByParams(temp[s+1], targetSkillId, level, nil, tagStr)
          s=s+1
        until not(s < #temp)
        i=i+1
      until not(i < #tempArr)
    end
  end
end
