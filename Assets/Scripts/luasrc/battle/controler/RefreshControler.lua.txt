RefreshControler = class('RefreshControler')

function RefreshControler:ctor(controler)
    self.currentWave = 0;
    self.maxWave = 0;
    self.waveTotalHp = 0;
    self.waveLeftHp = 0;
    self.expandWeightMap = {};
    self.battleResult = 0;
    self.level = 0;
    self.monsterLevel = 1;
    self.chapter = 1;
    self.leftFrame = -1;
    self.batteTotalFrame = -1;
    self.addEnergeTime = 60;
    self.enemyTab = {};
    self.enemyTab = {}
    self.controler = controler
end

function RefreshControler:initWarData()
    self.battleResult = BattleConst.battleResult_none
    local event = FogFunc.enemyCell.eventData
    local enemyInfo = FogFunc.getInstance():getCfgDatas("Enemy", event.params[1])
    local ai = event.ai
    local list = FogFunc.getInstance():getCfgDatasByKey("Ai", ai, "powerRange")
    local aiList = {}
    TableUtils.deepCopy(list, aiList)
    local result = {}
    local role = nil
    local enemyHomeId = nil
    local enemyHomeLevel = nil
    local enemyType = event.enemyType
    if enemyType == FogConst.FOG_EVENT_ENEMY_TYPE_PLAYER then
        role = FogModel.getInstance():getEnemyInfoById(event.enemyId).roles
        for key in pairs(role) do
            if not role[key].inLine then
                enemyHomeId = key
                enemyHomeLevel = role[key].level
                break
            end
        end
    else
        local waveData = FogFunc.getInstance():getCfgDatas("NpcArray", event.enemyId)
        local waveMap = waveData.waveMap
        for i, item in ipairs(waveMap) do
            self.enemyTab[item[1]] = item
        end
        role = self.enemyTab
        enemyHomeId = waveData.enemyHomeId[1]
        enemyHomeLevel = waveData.enemyHomeId[2]
    end
    self.controler.enemyHome = self.controler:createHome(enemyHomeId, { level = enemyHomeLevel }, BattleConst.LIFE_JIDI, BattleConst.ROLEGROUP_ENEMY)
    local i = 0
    for i, item in ipairs(aiList) do
        if role[item[ 1]] then
            table.insert(result, item)
        end
    end
    table.sort(result,self.sortPaixu);
    local i = 0
    for i = 1, #result do
        result[i][3] = tonumber(result[i][3])
        if i ~= 1 then
            result[i][3] = result[i][3] + tonumber(result[i - 1][3])
        end
    end

    table.sort(result,self.sortYouxianji)
    local energy = math.floor(enemyInfo.energy[1] + FogModel.getInstance():getCurLayer() * enemyInfo.energy[2] / 10000)
    local level = nil
    local starLevel = nil
    local equip = nil
    local roleInfo = nil
    local playerEnemy = nil
    while (#result > 0)
    do
        local curInfo = result[ 1]
        local id = curInfo[1]
        roleInfo = RolesFunc.getInstance():getCfgDatas("Role", id)
        if energy < roleInfo.payEnergyNmb then
            table.remove(result, 1)
            break
        end
        energy = energy - roleInfo.payEnergyNmb
        playerEnemy = role[id]
        if enemyType == FogConst.FOG_EVENT_ENEMY_TYPE_PLAYER then
            level = playerEnemy.level or 1
            starLevel = playerEnemy.starLevel or 0
            equip = playerEnemy.equip or {}
        else
            level = playerEnemy[2]
            starLevel = playerEnemy[3]
            if playerEnemy[4] then
                equip = {}
                local i = 3
                for i = 4, #playerEnemy do
                    equip[playerEnemy[i]] = 1
                end
            end
        end
        local num = roleInfo.heroNub or 1
        local offestX = 0
        for j = 1, num do
            if j ~= 1 then
                offestX = roleInfo.startSite[j ]
            end
            self.controler:createRole(id, { level = level, starLevel = starLevel, equip = equip, passivSkill = enemyInfo.passivSkill }, roleInfo.kind, BattleConst.ROLEGROUP_ENEMY, offestX)

        end

        result[1][3] = result[1][3] - tonumber(result[1][4])
        table.sort(result,self.sortYouxianji)
    end
    self:addHelpRole()
    StatisticsManager.getInstance():onEvent(StatisticsManager.FOG_BATTLE_START, { enemyId = event.enemyData.id })
end

function RefreshControler:sortPaixu(a, b)
    return a[2] - b[2]
end

function RefreshControler:sortYouxianji(a, b)
    return b[3] - a[3]
end

function RefreshControler:addHelpRole()
    FogPropTrigger.checkPropTriggerOnInstance(FogPropTrigger.Prop_type_AddRoleHelp, self.controler)
end

function RefreshControler:initData()
    self.battleResult = BattleConst.battleResult_none
    self._waveIdArr = {}
    local homeId = GlobalParamsFunc.getInstance():getDataNum("bornHomeId")
    local trueHome = homeId
    if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
        homeId = GlobalParamsFunc.getInstance():getDataNum("fogHomeId")
    end
    self.controler.myHome = self.controler:createHome(homeId, { level = 1 }, BattleConst.LIFE_JIDI, BattleConst.ROLEGROUP_MYSELF)
    if BattleFunc.curBattleType == BattleConst.BATTLETYPE_NORMAL then
        self:initNormalData()
    elseif BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
        self:initWarData()
        FogPropTrigger.checkPropTriggerOnInstance(FogPropTrigger.Prop_type_AddBattlePassive, self.controler)
    end
end

function RefreshControler:initNormalData()
    self:initLevelData(self.controler.levelCfgData.levelId)
    self:enterTargetWave(1)
end

function RefreshControler:enterTargetWave(waveIndex)
    self.battleResult = BattleConst.battleResult_none
    self.currentWave = waveIndex
    local waveInfo = string.split(self._waveIdArr[waveIndex], ",")
    local enterTime = BattleFunc.getInstance():turnMinisecondToframe(waveInfo[2])
    self.controler:setCallBack(enterTime, self.enterWave, self, waveInfo[1])
    BattleLogsManager.battleEcho("进入波次:", waveIndex, "延迟", waveInfo[2])
    ConditionTrigger.onOpportunityByArr(ConditionTrigger.opportunity_startBattle, self.controler.campArr_2)
    ConditionTrigger.onOpportunityByArr(ConditionTrigger.opportunity_startBattle, self.controler.campArr_1)
    ConditionTrigger.onOpportunityByArr(ConditionTrigger.opportunity_refreshMonster, self.controler.campArr_1)
    ConditionTrigger.onOpportunityByArr(ConditionTrigger.opportunity_refreshMonster, self.controler.campArr_2)
end

function RefreshControler:enterWave(waveId)
    local monsterArr = BattleFunc.getInstance():getCfgDatasByKey("LevelWave", waveId, "waveMap")
    if self.controler.gameMode == BattleConst.battle_game_mode_auto then
        self.leftFrame = BattleFunc.waveMaxFrame
    else
        self.leftFrame = BattleFunc.bossMaxFrame
    end
    self.batteTotalFrame = self.leftFrame
    local showTime = 0
    local equip = nil
    for i, v in ipairs(monsterArr) do
        local info = string.split(v, ",")
        local id = info[ 1]
        showTime = showTime + tonumber(info[2])
        local level = tonumber(info[3])
        local starLevel = tonumber(info[4]) or 0
        local roleInfo = BattleFunc.getInstance():getCfgDatas("Role", id)
        local num = roleInfo.heroNub or 1
        local datas = { waveAllEnemy = #monsterArr - 1, index = i, id = id, data = { level = level, starLevel = starLevel }, lifeType = roleInfo.kind, camp = BattleConst.ROLEGROUP_ENEMY }
        if info[5] then
            equip = {}
            local k = 4
            for k = 5 , #info do
                equip[info[k]] = 1
            end
            datas["data"]["equip"] = equip
        end
        for j = 1, num do
            local itemData = { data = datas, index = j }
            if num > 1 then
                itemData["offestX"] = roleInfo.startSite[j ]
            end
            self.controler:setCallBack(BattleFunc.getInstance():turnMinisecondToframe(showTime), self.initWaveEnemy, self, itemData)
        end
    end

end

function RefreshControler:initWaveEnemy(info)
    if self.controler and self.controler.isGameOver then
        return
    end
    local data = info.data
    self.controler:createRole(data.id, data.data, data.lifeType, data.camp, info.offestX)
    if data.waveAllEnemy == data.index and info.index == 0 then
        if self.currentWave == self.maxWave then
            self.currentWave = 0
        end
        self:enterTargetWave(self.currentWave + 1)
    end
end

function RefreshControler:initLevelData(level)
    self.level = tonumber(level)
    local levelInfo = BattleFunc.getInstance():getCfgDatas("Level", tostring(level))
    self._waveIdArr = levelInfo.levelWave
    self.maxWave = #self._waveIdArr
    local enemyInfo = levelInfo.enemyHomeId
    self.controler.enemyHome = self.controler:createHome(enemyInfo[1], { level = tonumber(enemyInfo[2]) }, BattleConst.LIFE_JIDI, BattleConst.ROLEGROUP_ENEMY)
end

function RefreshControler:onMonsterAllDied(monster)
    self:onGameOver(BattleConst.battleResult_win)
end

function RefreshControler:oneRoleRelive(role)
    local arr = role.toCampArr
    if #role.campArr == 1 then
        local i = 0
        for i, v in ipairs(arr) do
            v:checkMoveOrAttack(true)
        end
    end
end

function RefreshControler:updateFrame()
    self:updateBattleEnergy()
end

function RefreshControler:updateBattleEnergy()
    if self.addEnergeTime > 0 then
        self.addEnergeTime = self.addEnergeTime - 1
        return
    end
    --self.addEnergeTime = self.controler.battleUI.recoverPer
    --self.controler.battleUI:autoAddEnergy()
end

function RefreshControler:checkGameLose()
    self:onGameOver(BattleConst.battleResult_lose)
end

function RefreshControler:onUpLevelBack()
end
function RefreshControler:onGameOver(rt)
    if self.battleResult ~= BattleConst.battleResult_none then
        return
    end
    self.controler.isGameOver = true
    local campArr = self.controler.campArr_1
    local i = 0
    for i, v in ipairs(campArr) do
        v:initStand()
        v:resumeIdleAction()
    end

    campArr = self.controler.campArr_2
    for i, v in ipairs(campArr) do
        v:initStand()
        v:resumeIdleAction()
    end
    self.battleResult = rt
    if self.controler.passive then
        self.controler:clearOnePassiveAttr(self.controler.passive)
        self.controler.passive = nil
    end
    if rt == BattleConst.battleResult_lose then
        self.controler:setCallBack(120, function()
            WindowManager.OpenUI(WindowCfgs.BattleResultUI, { levelId = self.level, isWin = false, controler = self.controler })
        end
        , self)
    else
        self.controler:setCallBack(120, function()
            WindowManager.OpenUI(WindowCfgs.BattleResultUI, { levelId = self.level, isWin = true, controler = self.controler })
        end
        , self)
    end
end

function RefreshControler:reliveAllHeros()
    local diedArr = self.controler.diedArr_1
    local campArr = self.controler.campArr_1
    local i = 0
    for i, role in ipairs(campArr) do
        role:changeHp(role:getMaxHp() - role.hp)
    end
    for i = #diedArr,1,-1  do
        local role = diedArr[i]
        role:doRelive(role:getMaxHp(), nil)
    end
end

function RefreshControler:restartLevel()
    self.controler:destoryInstanceArr(self.controler.campArr_2)
    self.controler:destoryInstanceArr(self.controler.diedArr_2)
    self:onUpLevelBack()
end

function RefreshControler:changeWaveHp(value)
    self.waveLeftHp = self.waveLeftHp + value
    --self.controler.battleUI:updateBlood(self.waveLeftHp, self.waveTotalHp)
end

function RefreshControler:setFormationWeight(formation, changeValue)
end
function RefreshControler:recvMsg(msg, data)
end
function RefreshControler:dispose()
    Message.getInstance():removeObjEvents(self)
    self.controler = nil
end
