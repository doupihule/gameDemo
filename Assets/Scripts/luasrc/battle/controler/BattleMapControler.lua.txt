






BattleMapControler = class('BattleMapControler')

function BattleMapControler:ctor(controler)
  self._areaWidth = 256;
  self._pickNums = 4;
  self._allMapCount = 5;
  self._mapX = 0;
  self._mapY = 0;
  self._smallMapCount = 0;
  self.startMapIndex = 1;
  self._maxSceneWidth = 768 * 2;
  self.controler = controler
end

function BattleMapControler:setData(sceneId)
  local sceneInfo = BattleFunc.getInstance():getCfgDatas("Scene", sceneId)
  local backInfo = sceneInfo.background
  local mapName = backInfo[0+1]
  self.mapName = mapName
  local mapStartIndex = tonumber(backInfo[1+1])
  self.startMapIndex = mapStartIndex
  local startOffest = tonumber(backInfo[2+1])
  self._maxSceneWidth = sceneInfo.long
  self:setMapSize()
  local ctn1 = Laya.Sprite()
  ctn1.x = -ScreenAdapterTools.sceneOffsetX - ScreenAdapterTools.UIOffsetX - startOffest
  self.controler.layerControler.a1:addChild(ctn1)
  self._mapInfo = {anchor=0, infoArr={}, decorateArr={}, ctn=ctn1, initY=-(ScreenAdapterTools.maxHeight - ScreenAdapterTools.designHeight) / 2, speed=0.5}
  local i = 1
  repeat
    self:createOneView(mapName, i, mapStartIndex, self._mapInfo)
    -- [ts2lua]lua中0和空字符串也是true，此处mapStartIndex + 1 > self._allMapCount需要确认
    mapStartIndex = (mapStartIndex + 1 > self._allMapCount and {1} or {mapStartIndex + 1})[1]
    i=i+1
  until not(i <= self._pickNums)
  self:createDecoration(sceneInfo.Decoration, mapName, ctn1)
end

function BattleMapControler:setMapSize()
  self._pickNums = math.ceil(self._maxSceneWidth / self._areaWidth / 2) + 1
  self.controler.layerControler:setSceneInfo()
end

function BattleMapControler:createDecoration(arr, firstName, ctn)
  local i = 0
  repeat
    local item = arr[i+1]
    local info = BattleFunc.getInstance():getCfgDatas("Decoration", item[0+1])
    local path = "map/" .. firstName .. "/" .. info.pic
    local imageUrl1 = nil
    if UserInfo.isSystemNative() then
      imageUrl1 = "map/" .. firstName .. "/" .. info.pic .. ".png"
    else
      imageUrl1 = "map/" .. firstName .. "/" .. firstName .. "/" .. info.pic .. ".png"
    end
    local image = Laya.Image()
    image:scale(info.scale / 10000, info.scale / 10000)
    ctn:addChild(image)
    table.insert(self._mapInfo.decorateArr, {view=image})
    if self.startMapIndex ~= 1 then
      local missWidth = self.startMapIndex - 1 * 256 * 2
      if tonumber(item[1+1]) - missWidth < 0 then
        image.x = 256 * 9 - missWidth + tonumber(item[1+1])
      else
        image.x = tonumber(item[1+1]) - missWidth
      end
    else
      image.x = tonumber(item[1+1])
    end
    image.y = -tonumber(item[2+1])
    local onMapComplete = function()
      image.skin = imageUrl1
    end
    
    if SubPackageManager.getPackStyle(SubPackageConst.packName_map) == SubPackageConst.PATH_STYLE_SUBPACK then
      SubPackageManager.loadDynamics(firstName, path, onMapComplete, self)
    else
      onMapComplete()
    end
    i=i+1
  until not(i < #arr)
end

function BattleMapControler:destoryOneLayer(mapInfo)
  local infoArr = mapInfo.infoArr
  local i = 0
  repeat
    local view = infoArr[i+1].view
    view:removeSelf()
    view:dispose()
    i=i+1
  until not(i < #infoArr)
  local decorateArr = mapInfo.decorateArr
  local i = 0
  repeat
    local view = decorateArr[i+1].view
    view:removeSelf()
    view:dispose()
    i=i+1
  until not(i < #decorateArr)
  if not UserInfo.isSystemNative() then
    Laya.loader:clearRes("res/atlas/map/" .. self.mapName .. "/" .. self.mapName .. ".atlas")
    Laya.loader:clearRes("res/atlas/map/" .. self.mapName .. "/" .. self.mapName .. ".png")
  end
  mapInfo.ctn:removeSelf()
end

function BattleMapControler:createOneView(firstName, index, mapId, mpInfo)
  local imageUrl1 = nil
  local name = nil
  local path = nil
  name = firstName .. "_0" .. mapId
  path = "map/" .. firstName .. "/" .. name
  local image = Laya.Image()
  if UserInfo.isSystemNative() then
    imageUrl1 = "map/" .. firstName .. "/" .. name .. ".png"
    image:scale(1 + 2 / 256, 1)
  else
    imageUrl1 = "map/" .. firstName .. "/" .. firstName .. "/" .. name .. ".png"
    image:scale(2 * 1 + 2 / 128, 2)
  end
  mpInfo.ctn:addChild(image)
  local posIndex = index - 1 * 2
  local xpos = posIndex * self._areaWidth - self._smallMapCount * 256
  if mapId == 5 then
    self._smallMapCount = self._smallMapCount + 1
  end
  image.anchorX = 0
  image.anchorY = mpInfo.anchor
  image.x = xpos
  image.y = 0
  local viewInfo = {view=image}
  table.insert(mpInfo.infoArr, viewInfo)
  local onMapComplete = function()
    image.skin = imageUrl1
  end
  
  if SubPackageManager.getPackStyle(SubPackageConst.packName_map) == SubPackageConst.PATH_STYLE_SUBPACK then
    SubPackageManager.loadDynamics(firstName, path, onMapComplete, self)
  else
    onMapComplete()
  end
  LogsManager.echo("id:", mapId, "pos:", xpos)
end

function BattleMapControler:onMapMove(targety, pos)
  if pos == nil then
    pos=0
  end
  self._mapY = targety
  self:updateOneLayer(self._mapInfo, targety, pos)
end

function BattleMapControler:updateOneLayer(mapInfo, targety, pos)
  if targety == nil then
    targety=0
  end
  mapInfo.ctn.x = mapInfo.ctn.x + pos
end

function BattleMapControler:destoryMap()
  self:destoryOneLayer(self._mapInfo)
end

function BattleMapControler:dispose()
  self:destoryMap()
  self._mapInfo = nil
  self.controler = nil
end
