BattleControler = class('BattleControler')
--[[
* 游戏的控制器 基类.
* 是一个中枢.
* 保证游戏所有对象都能通过controler 访问到.
]]
function BattleControler:ctor(ctn)

    self._isGamePause = false;      --是否游戏暂停
    self.isSkillPause = false;      --是否技能暂停
    self._leftFrameDt = 0;          --剩余追帧时间差
    self.callFuncNums = 0;          -- 回调函数数量
    self.updateCount = 0;           --刷新的帧数
    self._lastFrameTime = 0;        --上次刷新时间
    self.stillFrame = 0;            --硬直时间
    self._leftScaleFrame = 0;       --剩余追速度帧数
    --视图表现控制器
    self.performanceControler = PerformanceControler.new(self)
    --存储所有实例的数组,并会对实例进行深度排列
    self._allInstanceArr = {}
    --战斗状态. 默认0非占丢
    self.battleState = BattleConst.battleState_out
    --镜头控制器
    self.cameraControler = CameraControler.new(self)
    --计时器map表
    self._timeList = {}
    --缓存的计时器对对象
    self._cacheTimeArr = {}
    --回调map
    self.updateCallFuncGroup = {}
    --一帧的时间
    self._oneFrameDt = math.round(1000 / GameConsts.gameFrameRate)
    --一帧最多最的帧数 .防止切后台回来卡死
    self._maxFrameDt = 5 * self._oneFrameDt
    --缓动控制器
    self.tweenControler = BattleTweenControler.new(self)
    --战斗调试工具
    self.battleDebugTool = BattleDebugTool.new(self)
    --刷新速度
    self.updateScale = BattleDebugTool.getBattleAddSped()
    if self.updateScale == nil then
        self.updateScale = 1
    end
end

--执行一次刷新逻辑
function BattleControler:onceUpdateFrame()
    if self.updateScale == 1 then
        self:updateFrame()
    else
        --如果游戏加速或者减速. 采用每帧时间累积方式. 计算量小.
        self._leftScaleFrame = self._leftScaleFrame + self.updateScale
        local s = 0
        for s = 0, self._leftScaleFrame - 1 do
            self:updateFrame()
        end
        self._leftScaleFrame = self._leftScaleFrame - s
    end
end

--刷新函数
function BattleControler:updateFrame()
    self.updateCount = self.updateCount + 1
    --刷怪
    self.refreshControler:updateFrame()
    --调用所有的实例刷新
    self:runInstanceUpdate()
    --镜头刷新
    self.cameraControler:updateFrame()
    --缓动刷新
    self.tweenControler:updateFrame()
    --计时器回调
    self:doDelayCallFunc()
    --遍历注册的刷新函数
    for i in pairs(self.updateCallFuncGroup) do
        local info = self.updateCallFuncGroup[i]
        doJsCallFunc(info.callBack, info.thisObj, info.params)
        if info.frame > 0 then
            info.frame = info.frame - 1
            if info.frame == 0 then
                self.updateCallFuncGroup[i] = nil
            end
        end
    end
    self:sortChildren()
end

--深度排列
function BattleControler:sortChildren()
    if self.updateCount % 60 ~= 0 then
        return
    end
    self:sortOneArr(self._allInstanceArr)
end

--强制深度排列
function BattleControler:forceSortChildren()
    self:sortOneArr(self._allInstanceArr)
end

function BattleControler:sortOneArr(campArr)
    local i = 0
    for i, v in ipairs(campArr) do
        v:updateViewZorder()
    end
end

--执行延迟回调
function BattleControler:doDelayCallFunc()
    if #self._timeList == 0 then
        return
    end
    if not self.isSkillPause then
        for i = #self._timeList, 1, -1 do
            local info = self._timeList[i]
            if not info then
                BattleLogsManager.battleEcho("_在延迟回调里面做了清理延迟回调事情,导致序列变了")
                break
            end
            self:doOneCallInfo(info, i)
            local obj = info.thisObj
            if obj and obj.upTimeScale then
                info.frame = info.frame - obj.upTimeScale
            else
                info.frame = info.frame - 1
            end
        end
    else
        for i = #self._timeList, 1, -1 do
            local info = self._timeList[i]
            if not info then
                BattleLogsManager.battleEcho("_在延迟回调里面做了清理延迟回调事情,导致序列变了")
                break
            end
            local thisObj = info.thisObj
            local isRunWithSkillPause = true
            if (thisObj and thisObj.isRunWithSkillPause) and not thisObj:isRunWithSkillPause() then
                isRunWithSkillPause = false
            end
            if isRunWithSkillPause then
                self:doOneCallInfo(info, i)
                if thisObj and thisObj.upTimeScale then
                    info.frame = info.frame - thisObj.upTimeScale
                else
                    info.frame = info.frame - 1
                end
            end
        end
    end
end
--执行某一个延迟回调
function BattleControler:doOneCallInfo(info, i)
    if i == nil then
        i = -1
    end
    if info.frame <= 0 then
        if info.times > 0 then
            info.times = info.times - 1
        end
        local doApplyOrCall = info.doApplyOrCall
        local callBack = info.callBack
        local thisObj = info.thisObj
        local params = info.params
        local endCallBack = info.endCallBack
        local endParams = info.endParams
        if info.times == 0 then
            table.insert(self._cacheTimeArr, info)
            if i ~= -1 then
                table.remove(self._timeList, i)
            end
            if endCallBack then
                if doApplyOrCall then
                    doJsApplyFunc(endCallBack, thisObj, endParams)
                else
                    doJsCallFunc(endCallBack, thisObj, endParams)
                end
            end
        else
            info.frame = info.interval
        end
        if callBack then
            if doApplyOrCall then
                doJsApplyFunc(callBack, thisObj, params)
            else
                doJsCallFunc(callBack, thisObj, params)
            end
        end
    end
end

function BattleControler:getOneCacheTimeObj()
    if #self._cacheTimeArr == 0 then
        return {}
    else
        return table.shiftArray(self._cacheTimeArr)
    end
end

function BattleControler:runInstanceUpdate()
    if self.player then
        self.player:updateFrame()
    end
    local len = #self._allInstanceArr
    local i = len - 1
    for i = len, 1, -1 do
        local instance = self._allInstanceArr[i]
        if instance and instance:checkIsUsing() then
            if not self.isSkillPause or instance:isRunWithSkillPause() then
                instance:updateFrame()
            end
        end
    end
    self:checkHit()
    len = #self._allInstanceArr
    for i = len, 1, -1 do
        local instance = self._allInstanceArr[i]
        if instance and instance:checkIsUsing() then
            if not self.isSkillPause or instance:isRunWithSkillPause() then
                instance:updateFrameLater()
            end
        end
    end
end

function BattleControler:checkHit()
end
function BattleControler:setCallBack(frame, callBack, thisObj, params, doApplyOrCall)
    if doApplyOrCall == nil then
        doApplyOrCall = false
    end
    if frame == nil or number.isNan(frame) then
        LogsManager.errorTag("battleerror", "没有传入frame,直接做回调")
    end
    local obj = self:getOneCacheTimeObj()
    if (not frame) or (frame == 0) then
        if doApplyOrCall then
            doJsApplyFunc(callBack, thisObj, params)
        else
            doJsCallFunc(callBack, thisObj, params)
        end
        return
    end
    obj.frame = frame
    obj.interval = frame
    obj.times = 1
    obj.callBack = callBack
    obj.thisObj = thisObj
    obj.params = params
    obj.doApplyOrCall = doApplyOrCall
    table.insert(self._timeList, obj)
end

function BattleControler:setLastCallBack(delay, interval, times, callBack, thisObj, params, endCallBack, endParams, doApplyOrCall)
    if params == nil then
        params = nil
    end
    if endCallBack == nil then
        endCallBack = nil
    end
    if endParams == nil then
        endParams = nil
    end
    if doApplyOrCall == nil then
        doApplyOrCall = false
    end
    if delay == nil or number.isNan(delay) then
        LogsManager.errorTag("battleerror", "没有传入frame")
        return
    end
    local obj = self:getOneCacheTimeObj()
    obj.frame = delay
    obj.interval = interval
    obj.times = times
    obj.callBack = callBack
    obj.thisObj = thisObj
    obj.params = params
    obj.doApplyOrCall = doApplyOrCall
    obj.endCallBack = endCallBack
    obj.endParams = endParams
    table.insert(self._timeList, obj)
    self:doOneCallInfo(obj, #self._timeList)
end

function BattleControler:clearCallBack(thisObj, callBack, params)
    if callBack == nil then
        callBack = nil
    end
    if params == nil then
        params = nil
    end
    local len = #self._timeList
    for i = len, 1, -1 do
        local obj = self._timeList[i]
        if thisObj == obj.thisObj then
            if not callBack then
                table.remove(self._timeList, i)
            else
                if callBack == obj.callBack then
                    if params == nil then
                        table.remove(self._timeList, i)
                    else
                        if params == obj.params then
                            table.remove(self._timeList, i)
                        end
                    end
                end
            end
        end
    end

end

function BattleControler:registObjUpdate(callFunc, callThisObj, params, frame)
    if params == nil then
        params = nil
    end
    if frame == nil then
        frame = -1
    end
    self.callFuncNums = self.callFuncNums + 1
    self.updateCallFuncGroup[self.callFuncNums] = { callBack = callFunc, thisObj = callThisObj, params = params, frame = frame }
    return self.callFuncNums
end

function BattleControler:insterInstanceToArr(instance)
    if table.findArrValue(self._allInstanceArr, instance) == -1 then
        table.insert(self._allInstanceArr, instance)
    end
end

function BattleControler:getAllInstanceArr()
    return self._allInstanceArr
end

function BattleControler:setBattleState(value)
    self.battleState = value
end

function BattleControler:setGamePlayOrPause(value)
    self._isGamePause = value
end

function BattleControler:dispose()
    if self._isDisposed then
        return
    end
    self._timeList = {}
end
