











InstanceLogical = class('InstanceLogical',InstanceLife)
function InstanceLogical:ctor(...)
  InstanceLogical.super.ctor(self, unpack({...}))
  self.leftWaitFrame = 0;
end

function InstanceLogical:doAiLogical()
  InstanceLogical.super.doAiLogical(self)
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR and BattleFunc.curGameState ~= BattleConst.WARSTATE_INFIGHT then
    return
  end
  if self.leftWaitFrame > 0 then
    self.leftWaitFrame=self.leftWaitFrame-1
    return
  end
  self:checkMoveOrAttack()
  self:updateCds()
  self:updateAutoMissHp()
  self:updateTxtCreateFrame()
end

function InstanceLogical:updateTxtCreateFrame()
  if self.txtUpdateCount > 0 then
    self.txtUpdateCount=self.txtUpdateCount-1
  end
end

function InstanceLogical:updateCds()
  self:updateSkillCd()
  if self.skillWaitFrame > 0 then
    self.skillWaitFrame=self.skillWaitFrame-1
  end
  if self.updateCount % GameConsts.gameFrameRate == 0 then
    if self.energyResumeValue > 0 and self.energy < self.maxEnergy then
      self:changeEnergy(self.energyResumeValue)
    end
  end
end

function InstanceLogical:updateAutoMissHp()
  if self.lifeType ~= BattleConst.LIFE_LANDBUILD then
    return
  end
  if self.hp <= 0 then
    return
  end
  if self.buildCheckFrame <= 0 then
    self.buildCheckFrame = BattleFunc.buildAutoFrame
    self:changeHp(-self.reduceBlood)
  end
  self.buildCheckFrame=self.buildCheckFrame-1
end

function InstanceLogical:updateSkillCd()
  local cdcheck = 20
  if self.updateCount % cdcheck ~= 0 then
    return
  end
  local i = 0
  repeat
    local skill = self.normalSkills[i+1]
    if skill.leftSkillCd > 0 then
      skill.leftSkillCd = skill.leftSkillCd - cdcheck
      if skill.leftSkillCd < 0 then
        skill.leftSkillCd = 0
      end
    end
    i=i+1
  until not(i < #self.normalSkills)
  if self.passiveSkills then
    local i = 0
    repeat
      local skill2 = self.passiveSkills[i+1]
      if skill2.leftSkillCd > 0 then
        skill2.leftSkillCd = skill2.leftSkillCd - cdcheck
        if skill2.leftSkillCd < 0 then
          skill2.leftSkillCd = 0
        end
      end
      i=i+1
    until not(i < #self.passiveSkills)
  end
  if self.energySkill then
    if self.energySkill.leftSkillCd > 0 then
      self.energySkill.leftSkillCd = self.energySkill.leftSkillCd - cdcheck
      if self.energySkill.leftSkillCd < 0 then
        self.energySkill.leftSkillCd = 0
      end
    end
  end
end

function InstanceLogical:checkMoveOrAttack(force)
  if force == nil then
    force=false
  end
  if self.controler and self.controler.isGameOver then
    return
  end
  if self.hp <= 0 then
    return
  end
  if #self.toCampArr == 0 then
    return
  end
  if self.ctrlBuffBit & BuffTrigger.forceCtrlBuffBit then
    return
  end
  if self.label ~= BattleConst.LABEL_IDLE and self.label ~= BattleConst.LABEL_WALK then
    return
  end
  if not force and self.updateCount % 3 ~= 0 then
    return
  end
  if self.movePointType ~= InstanceMove.moveType_none then
    return
  end
  self:checkAttack()
end

function InstanceLogical:onToCampAllDied()
  if self.camp == 2 then
    if self._myState ~= BattleConst.state_jump then
      self:initStand()
      self:resumeIdleAction()
    end
  end
end

function InstanceLogical:onBeHit(attacker, skill, skillAction, dmgResult, isFanshang)
  if isFanshang == nil then
    isFanshang=false
  end
  if self.invincibleNum > 0 then
    return
  end
  self.lastAttacker = attacker
  local rt = dmgResult[0+1]
  local dmgValue = dmgResult[1+1]
  if self.camp == 2 then
    self.controler.statistControler:onDmage(dmgValue)
  end
  local otherValue = dmgResult[2+1]
  local resistValue = 0
  local leftDmg = dmgValue
  if rt ~= BattleConst.damage_miss then
    if #self.shieldInfoArr > 0 then
      local i = #self.shieldInfoArr - 1
      repeat
        local value = self.shieldInfoArr[i+1].value
        if value > leftDmg then
          self.shieldInfoArr[i+1].value = self.shieldInfoArr[i+1].value - dmgValue
          leftDmg = 0
          resistValue = resistValue + dmgValue
          break
        else
          self.shieldInfoArr[i+1].value = 0
          leftDmg = leftDmg - value
          resistValue = resistValue + value
          self:clearOneBuff(self.shieldInfoArr[i+1].buff, BattleConst.buff_remove_hudun)
        end
        i=i-1
      until not(i >= 0)
    end
  end
  if not isFanshang then
    local fanshangValue = self.attrData:getOneAttr(BattleConst.attr_fanshang)
    if fanshangValue > 0 then
      BattleLogsManager.debugByRole(self.dataId, "造成反伤,反伤率", fanshangValue, "受到的伤害:", dmgValue)
      attacker:onBeFanshang(math.ceil(fanshangValue * dmgValue / 10000), self)
    end
  end
  self:changeHp(-leftDmg)
  if self.hp <= 0 then
    attacker:killOneRole(self)
  end
  if leftDmg == 0 and resistValue > 0 then
    self.controler.performanceControler:createNumEff(BattleConst.effect_label_hudun, dmgValue, self)
  else
    if rt == BattleConst.damage_baoji then
      self.controler.performanceControler:createNumEff(BattleConst.effect_label_crit, dmgValue, self)
    elseif rt == BattleConst.damage_miss then
      self.controler.performanceControler:createNumEff(BattleConst.effect_label_miss, 0, self)
    else
      self.controler.performanceControler:createNumEff(BattleConst.effect_label_dmg, dmgValue, self)
    end
  end
  self:hitedflash()
end

function InstanceLogical:onBeFanshang(dmg, fromRole)
  if self.hp == 0 then
    BattleLogsManager.battleEcho("触发反伤时 死亡了-", self.dataId)
    return
  end
  if dmg > self.hp then
    dmg = self.hp - 1
  end
  local tempArr = BattleFunc.getOneTempArr()
  tempArr[0+1] = BattleConst.damage_normal
  tempArr[1+1] = dmg
  self:onBeHit(fromRole, nil, nil, tempArr, true)
  BattleFunc.cacheOneTempArr(tempArr)
end

function InstanceLogical:onBeTrit(attacker, skill, skillAction, dmgResult)
  local rt = dmgResult[0+1]
  local value = dmgResult[1+1]
  if self.hp <= 0 then
    BattleLogsManager.battleEcho("在血量为0的情况下收到治疗效果了,id:", self.dataId, "skillId:", skill._skillId)
    return
  end
  self:changeHp(value)
  if rt == BattleConst.damage_baoji then
    self.controler.performanceControler:createNumEff(BattleConst.effect_label_tritCrit, value, self)
  else
    self.controler.performanceControler:createNumEff(BattleConst.effect_label_trit, value, self)
  end
end

function InstanceLogical:onXixue(value)
  if self.hp <= 0 then
    BattleLogsManager.battleEcho("在血量为0的情况下吸血了:", self.dataId, "skillId:", value)
    return
  end
  self:changeHp(value)
  self.controler.performanceControler:createNumEff(BattleConst.effect_label_trit, value, self)
end

function InstanceLogical:killOneRole(beKilled)
  self:changeEnergy(self.killResumeEnergy)
end

function InstanceLogical:onHitLand()
  if self:checkHasOneBuff(BuffTrigger.buff_logical_jifei) then
    self:initMove(self.speed.x, 0, self.speed.z, true)
  end
end

function InstanceLogical:checkAttack()
  local tempArr = BattleFunc.getOneTempArr()
  ChooseTrigger.chooseSkillToOut(self, tempArr)
  local rt = tempArr[0+1]
  if rt == -2 then
    BattleLogsManager.battleWarn("没有可攻击的技能,不应该走到这里来,id:", self.dataId, "lifeType:", self.lifeType)
    self:moveFollowNearRole(nil)
    return
  end
  local skill = tempArr[1+1]
  if self.skillWaitFrame > 0 then
    rt = -2
  else
    if rt == 0 then
      self:initStand()
      self:giveOutSkill(skill)
    elseif rt == -1 then
      -- [ts2lua]修改数组长度需要手动处理。
      tempArr.length = 0
      ChooseTrigger.getSkillTargetRole(self, skill, skill.chooseTartgetCfg, tempArr, nil, nil, true)
      if self:checkCanMove() then
        if #tempArr > 0 then
          local nearHero = tempArr[0+1]
          local disx = nearHero.pos.x - self.pos.x
          local absDis = math.abs(disx)
          if absDis > self.battleKeepDis then
            if self._myState ~= BattleConst.state_jump then
              self:initMove(self.walkSpeed * absDis / disx)
              self:playAction(BattleConst.LABEL_WALK, true)
            end
            return
          end
        end
      end
      if skill and skill.leftSkillCd == 0 then
        if self:checkCanMove() then
          self:moveFollowNearRole(tempArr[0+1])
        end
      end
    end
  end
  BattleFunc.cacheOneTempArr(tempArr)
  if rt == -2 then
    if self._myState == BattleConst.state_move then
      self:initStand()
      self:playAction(BattleConst.LABEL_IDLE, true)
    end
  end
  return rt
end

function InstanceLogical:giveOutSkill(skill)
  if self.ctrlBuffBit then
    return false
  end
  self.currentSkill = skill
  if skill == self.energySkill then
    self:changeEnergy(-self.maxEnergy)
    if self.blackFrame > 0 then
      self.controler.performanceControler:showBlackScreen(self, self.blackFrame)
    end
  end
  local skillSpeedValue = self:getSkillSpeedUpValue(skill._skillId)
  skill.leftSkillCd = self:getSkillLeftCd(skill)
  local skillLabel = skill.skillLabel
  self:initStand()
  if skillLabel then
    local sysTime = Number(skillLabel[1+1])
    self.controler:clearCallBack(self, self.resumeIdleAction)
    if sysTime == -1 then
      self:playAction(skillLabel[0+1], false)
      self:setAniPlaySpeed(skillSpeedValue)
    else
      self:setAniPlaySpeed(skillSpeedValue)
      self:playSpecialSysAction(skillLabel[0+1], sysTime, Number(skillLabel[2+1]), Number(skillLabel[3+1]), self:getActionFrame(skillLabel[0+1]))
    end
  end
  local expandParams = {follow=BattleFunc.EFFECT_NOALLOW, ignoreScale=self.ignoreTimeScale}
  self:createEffByParams(skill.cfgData.specialEffect, false, false, expandParams, skillSpeedValue)
  self:createSoundByParams(skill.cfgData.sound)
  SkillExpandTrigger.onCheckExpand(self, skill, skill.cfgData.expand, skill.tempChooseArr)
  local skillActions = skill.skillActionArr
  local i = 0
  repeat
    local skillact = skillActions[i+1]
    self.controler:setLastCallBack(math.round(skillact.delay / skillSpeedValue), math.round(skillact.interval / skillSpeedValue), skillact.trigTimes, self.checkSkillEffect, self, skillact)
    i=i+1
  until not(i < #skillActions)
end

function InstanceLogical:checkSkillEffect(skillAction)
  if self.hp == 0 then
    BattleLogsManager.debugByRole(self.dataId, "检测的是死亡技", skillAction.skillEffectId)
  end
  SkillActionTrigger.checkSkillAction(self, skillAction, nil)
end

function InstanceLogical:interruptSkill(targetRole)
  if self.currentSkill then
    ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_offskill, self, BattleFunc.emptyArr, nil, targetRole)
    self.controler:clearCallBack(self, self.checkSkillEffect)
    self.controler:clearCallBack(self, self.playSound)
  end
end

function InstanceLogical:moveFollowNearRole(targetRole)
  if self.beTauntTargetInfo.target then
    targetRole = self.beTauntTargetInfo.target
  end
  if not targetRole then
    targetRole = ChooseTrigger.chooseAbsNearRole(self, self.toCampArr)
  end
  if not targetRole then
    return
  end
  local dx = targetRole.pos.x - self.pos.x
  local dz = targetRole.pos.z - self.pos.z
  if dx * dx + dz * dz < 400 then
    self:initStand()
    self:playAction(BattleConst.LABEL_IDLE, true)
    return
  end
  local ang = math.atan2(dz, dx)
  local spdx = self.walkSpeed * math.cos(ang)
  local spdz = self.walkSpeed * math.sin(ang)
  self:initMove(spdx, 0, spdz)
  self:playAction(BattleConst.LABEL_WALK, true)
end

function InstanceLogical:checkIsInAttackDis()
  local nearHero = ChooseTrigger.chooseNearRole(self, self.toCampArr)
  if not nearHero then
    return false
  end
  local disx = nearHero.pos.x - self.pos.x
  local absDis = math.abs(disx)
  if absDis > self.battleKeepDis then
    return false
  end
  return true
end

function InstanceLogical:setWaitFrame(value)
  self.leftWaitFrame = value
end
