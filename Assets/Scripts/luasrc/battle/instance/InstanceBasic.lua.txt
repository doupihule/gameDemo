InstanceBasic = class('InstanceBasic')

InstanceBasic._instanceCount = 0;
function InstanceBasic:ctor(controler)
    self.useState = 0;
    self.zorderOffset = 0;
    self.updateCount = 0;
    self.instanceId = 0;
    self.viewScale = 1;
    self._viewWay = 1;
    self._aniPlaySpeed = 1;
    self.upTimeScale = 1;
    self.radian = 0;
    self.runWithSkill = false;
    self.ignoreTimeScale = false;
    self.leftFrameTime = 0;
    self.laterFrameTime = 0;
    self.controler = controler
    self.pos = VectorTools.createVector3()
    InstanceBasic._instanceCount = InstanceBasic._instanceCount + 1
    self.instanceId = InstanceBasic._instanceCount
    self.rotation = VectorTools.createVector3()
    self.rotationRad = VectorTools.createVector3()
end

function InstanceBasic:setData(data)
    self._viewWay = 1
    self.upTimeScale = 1
    self.ignoreTimeScale = false
    self.useState = BattleConst.instance_use_normal
    self:resetProperty()
    self._data = data
    if data and data.id then
        self.dataId = data.id
    end
end

function InstanceBasic:setUpTimeScale(scale)
    self.upTimeScale = scale
    self.leftFrameTime = 0
    self.laterFrameTime = 0
    self:setAniPlaySpeed(self._aniPlaySpeed)
end

function InstanceBasic:resetProperty()
    self.updateCount = 0
end

function InstanceBasic:getData()
    return self._data
end

function InstanceBasic:onDataChange(changeData)
    self:updateView()
end

function InstanceBasic:updateView()
end
function InstanceBasic:setView(view, x, y, z, parent)
    if x == nil then
        x = 0
    end
    if y == nil then
        y = 0
    end
    if z == nil then
        z = 0
    end
    if parent == nil then
        parent = nil
    end
    if self._myView ~= view then
        self:disposeView()
    end
    self._myView = view
    self:setPos(x, y, z)
    self:updateView()
    self:setAniPlaySpeed(1)
end

function InstanceBasic:setView2(view)
    self._myView2 = view
end

function InstanceBasic:setViewName(value)
    self.viewName = value
end

function InstanceBasic:setPos(x, y, z)
    if x == nil then
        x = 0
    end
    if y == nil then
        y = 0
    end
    if z == nil then
        z = 0
    end
    self.pos.x = x
    self.pos.y = y
    self.pos.z = z
    self:realShowView()
end

function InstanceBasic:updateFrame()
    self.leftFrameTime = self.leftFrameTime + self.upTimeScale
    local nums = self.leftFrameTime;
    for i = 1, nums do
        self.updateCount = self.updateCount + 1
        self:doAiLogical()
        self:updateSpeed()
        self.leftFrameTime = self.leftFrameTime - 1
    end

end

function InstanceBasic:updateFrameLater()
    self.laterFrameTime = self.laterFrameTime + self.upTimeScale
    local nums = self.laterFrameTime
    for i = 1, nums do
        self:movePos()
        self:realShowView()
        self.laterFrameTime = self.laterFrameTime - 1
    end

end

function InstanceBasic:doAiLogical()
end
function InstanceBasic:updateSpeed()
end
function InstanceBasic:movePos()
end
function InstanceBasic:realShowView()
    if not self._myView then
        return
    end
    local x = self.pos.x
    local y = (self.pos.y + self.pos.z) * BattleFunc.yCoordinateWay
    UITools.setPos(self._myView, x, y);
    if self._myView2 then
        UITools.setPos(self._myView2, x, y);
    end
end

function InstanceBasic:setRotation(value)
    self.radian = BattleFunc.angletoRad * value
    if self._myView then
        UITools.setRotation(self._myView, value * BattleFunc.yCoordinateWay);
    end
    if self._myView2 then
        UITools.setRotation(self._myView2, value * BattleFunc.yCoordinateWay);
    end
end

function InstanceBasic:setRotationRad(value)
    self.radian = BattleFunc.angletoRad * value
    local ang = BattleFunc.radtoAngle * value
    if self._myView then
        UITools.setRotation(self._myView, ang * BattleFunc.yCoordinateWay);
    end
    if self._myView2 then
        UITools.setRotation(self._myView2, ang * BattleFunc.yCoordinateWay);
    end
end

function InstanceBasic:setViewWay(value)
    if (self._viewWay == value and self._myView) and self._myView:getScale().x == self.viewScale * self._viewWay then
        return
    end
    self._viewWay = value
    self:setViewScale(self.viewScale)
end

function InstanceBasic:setViewScale(scale)
    self.viewScale = scale
    if self._myView then
        UITools.setScale(self._myView, self._viewWay * scale, scale);
    end
    if self._myView2 then
        UITools.setScale(self._myView2, self._viewWay * scale, scale);
    end
end

function InstanceBasic:setViewAlpha(alpha)
    if self._myView then
        UITools.setViewAlpha(self._myView, alpha)
    end
    if self._myView2 then
        UITools.setViewAlpha(self._myView2, alpha)
    end
end

function InstanceBasic:getView()
    return self._myView
end

function InstanceBasic:checkIsUsing()
    return self.useState == BattleConst.instance_use_normal
end

function InstanceBasic:setZorderOffset(value)
    self.zorderOffset = value
end

function InstanceBasic:updateViewZorder()
    if not self._myView then
        return
    end
    local targetZorder = math.round(self.pos.z) * 10 + self.zorderOffset
    self._myView.zOrder = targetZorder
    if self._myView2 then
        self._myView2.zOrder = math.round(self.pos.z) * 10 + self.zorderOffset + 4
    end
end

function InstanceBasic:isRunWithSkillPause()
    return self.runWithSkill
end

function InstanceBasic:resumeAction()
end
function InstanceBasic:stopAction()
end
function InstanceBasic:setAniPlaySpeed(value)
    self._aniPlaySpeed = value
    if not self.ignoreTimeScale then
        value = value * self.upTimeScale * self.controler.updateScale
    end
    if self._myView then
        self._myView:setPlaySpeed(value)
    end
end

function InstanceBasic:createEfect(effectName, aniIndex, isLoop, ofx, ofy, ofz, isFollow, layerIndex, withTargetWay, frame, aniSpeed)
    if aniIndex == nil then
        aniIndex = 0
    end
    if isFollow == nil then
        isFollow = true
    end
    if layerIndex == nil then
        layerIndex = 2
    end
    if withTargetWay == nil then
        withTargetWay = 0
    end
    if frame == nil then
        frame = -1
    end
    if aniSpeed == nil then
        aniSpeed = 1
    end
    local eff = self.controler:createEffect({ id = effectName, index = aniIndex })
    if not isFollow then
        self.controler.performanceControler:setCacheEffect(eff, eff.cacheId)
    end
    if not self.controler.layerControler then
        LogsManager.errorTag("battleEffectError", "战斗销毁了还在创建特效-")
        return nil
    end
    local ctnIndex = layerIndex
    if layerIndex == 2 then
        eff.zorderOffset = self.zorderOffset - 1
        ctnIndex = 2
    elseif layerIndex == 3 or layerIndex == 5 then
        eff.zorderOffset = self.zorderOffset + 1
        ctnIndex = 2
    end
    eff:setPos(self.pos.x + ofx * self._viewWay, self.pos.y + ofy, self.pos.z + ofz)
    if isFollow or layerIndex == 5 then
        eff:setFollowTarget(self, ofx, ofy, ofz, layerIndex, withTargetWay)
    else
        eff:setFollowOffest(ofx, ofy, ofz)
    end
    self.controler:insterInstanceToArr(eff)
    if withTargetWay == 0 then
        eff:setViewWay(self._viewWay)
    else
        eff:setViewWay(withTargetWay)
    end
    eff:getView():play(aniIndex, isLoop, true)
    eff:setAniPlaySpeed(aniSpeed)
    eff:setLastFrame(frame)
    if ctnIndex > 3 then
        ctnIndex = 3
    end
    local layerCtn = self.controler.layerControler["a2" .. ctnIndex]
    layerCtn:addChild(eff:getView())
    eff:updateViewZorder()
    return eff
end

function InstanceBasic:playSpecialSysAction(actionName, sysTime, startTime, endTime, actionLength, aniSpeed)
    if actionLength == nil then
        actionLength = 0
    end
    if aniSpeed == nil then
        aniSpeed = 1
    end
    if not self._tempAnimObj then
        self._tempAnimObj = {}
    end
    self._tempAnimObj.startTime = startTime
    self._tempAnimObj.sysTime = sysTime
    self._tempAnimObj.endTime = endTime
    self._tempAnimObj.actionName = actionName
    if self._myView then
        self._myView:play(self._tempAnimObj.actionName, false, true)
    end
    local frame = BattleFunc.getInstance():turnMinisecondToframe(startTime)
    local sysFrame = BattleFunc.getInstance():turnMinisecondToframe(sysTime)
    local endFrame = BattleFunc.getInstance():turnMinisecondToframe(endTime)
    self.controler:setCallBack(math.round(frame / aniSpeed), self.onStartActionComp, self)
    self.controler:setCallBack(math.round((frame + sysFrame) / aniSpeed), self.onSysActionComp, self)
    return actionLength + sysFrame + frame - endFrame
end

function InstanceBasic:onStartActionComp()
    if not self._myView then
        return
    end
    local aniParams = self._tempAnimObj
    self._myView:play(self._tempAnimObj.actionName, true, true, aniParams.startTime, aniParams.endTime)
end

function InstanceBasic:onSysActionComp()
    if not self._myView then
        return
    end
    local aniParams = self._tempAnimObj
    self._myView:play(self._tempAnimObj.actionName, false, true, aniParams.endTime)
end

function InstanceBasic:resetSysAction()
    self.controler:clearCallBack(self, self.onStartActionComp)
    self.controler:clearCallBack(self, self.onSysActionComp)
end

function InstanceBasic:onSetToCache()
    local view = self._myView
    if view then
        view:removeSelf()
        if view.stop then
            view:stop()
        end
        view:setScale(1, 1)
    end
    if self._myView2 then
        self._myView2:removeSelf()
        self._myView2:stop()
        view:setScale(1, 1)
    end
    self.controler:clearCallBack(self)
    self.useState = BattleConst.instance_use_cache
end

function InstanceBasic:dispose()
    if self.useState == BattleConst.instance_use_destory then
        return
    end
    self.useState = BattleConst.instance_use_destory
    self:disposeView()
end

function InstanceBasic:disposeView()
    if self._myView then
        if self._myView.parent then
            self._myView.parent:removeChild(self._myView)
        end
        self._myView = nil
        if self._myView2 then
            if self._myView2.parent then
                self._myView2.parent:removeChild(self._myView2)
            end
            self._myView2 = nil
        end
    end
end

--转字符串输出方法
function InstanceBasic:tostring()
    return "id:" .. self.dataId .. ",pos:" .. this.pos.x .. "_" .. this.pos.z;
end
