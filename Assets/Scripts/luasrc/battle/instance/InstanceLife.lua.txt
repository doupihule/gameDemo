



















InstanceLife = class('InstanceLife',InstancePerformance)

function InstanceLife.__getters:maxHp()
  return self.attrData:getOneAttr(BattleConst.attr_maxHp)
end

function InstanceLife:ctor(controler)
  InstanceLife.super.ctor(self,controler)
  self.camp = 1;
  self.toCamp = 2;
  self.hp = 50;
  self.hpPercent = 1;
  self.level = 1;
  self.starLevel = 0;
  self.passSkillArr = nil;
  self.normalSkillArr = nil;
  self.energy = 0;
  self.energyResumeValue = 0;
  self.killResumeEnergy = 0;
  self.maxEnergy = 0;
  self.battleKeepDis = 0;
  self.isAutoSKill = false;
  self.blackFrame = 0;
  self.currentSkillIndex = 0;
  self.skillWaitFrame = 0;
  self.invincibleNum = 0;
  self.ctrlBuffBit = 0;
  self.tempSortPriority = 0;
  self.buildCheckFrame = 30;
  self.reduceBlood = 1;
  self.shieldInfoArr = {}
  self.tempBeUsedValue = {}
  self.tempUseValue = {}
  self.beTauntTargetInfo = {}
  self.passSkillArr = nil
  self.normalSkillArr = nil
end

function InstanceLife:setData(data)
  InstanceLife.super.setData(self,data)
  self:initStand()
  self.invincibleNum = 0
  -- [ts2lua]修改数组长度需要手动处理。
  self.shieldInfoArr.length = 0
  self.energy = 0
  self.diedState = 0
  self.shadeOffestX = 0
  self.ctrlBuffBit = 0
  self.buffInfo = {}
  self.buffAttrInfo = {}
  self.beTauntTargetInfo.target = nil
  self.beTauntTargetInfo.buff = nil
  self.passSkillArr = nil
  self.normalSkillArr = nil
  if self.movePointType ~= InstanceMove.moveType_none then
    self.movePointType = InstanceMove.moveType_none
  end
  if self.lifeType ~= BattleConst.LIFE_PLAYER then
    self.roleType = data.type
    self.level = data.level
    self.starLevel = data.starLevel
    self.cfgData = BattleFunc.instance:getCfgDatasByKey("RoleUpdate", self.dataId, data.level)
    self:initSkillData()
    if not self.attrData then
      data.passiveSkills = self.passSkillArr
      self.attrData = AttributeExtendData(self.dataId, data, self.lifeType, UserModel.instance:getData(), self.controler.globalAttrMap)
    else
      self._data.passiveSkills = self.passSkillArr
      self.attrData:resetData(self.dataId, self._data, self.lifeType, UserModel.instance:getData(), self.controler.globalAttrMap)
    end
    self.hp = self.maxHp
    local baseData = BattleFunc.instance:getCfgDatas("Role", self.dataId)
    if baseData.scale then
      self.cfgScale = baseData.scale / 10000
    end
    self.mass = baseData.weight or 1
    self.battleKeepDis = baseData.battleDis or 100
    self:playAction(BattleConst.LABEL_IDLE, true)
    if self.cfgData.expand then
      SkillExpandTrigger.onCheckExpand(self, nil, self.cfgData.expand, nil)
    end
    self.realSize[0+1] = self.cfgData.size[0+1] * self.cfgScale
    self.realSize[1+1] = self.cfgData.size[1+1] * self.cfgScale
  else
    self.attrData = self.controler.myHome.attrData
  end
end

function InstanceLife.__getters:walkSpeed()
  return self.attrData:getOneAttr(BattleConst.attr_speed) / GameConsts.gameFrameRate
end

function InstanceLife:initSkillData()
  local thisObj = self
  local passCfg = self:getPassiveSkills()
  self.passiveSkills = {}
  if passCfg then
    local i = 0
    repeat
      local info = passCfg[i+1]
      local skillId = nil
      local level = 1
      skillId = tostring(info)
      local debugPassiveSkillData = BattleDebugTool.getDebugPassiveSkill()
      if debugPassiveSkillData then
        local passive = PassiveSkillData(debugPassiveSkillData[0+1], Number(debugPassiveSkillData[1+1]) or 1, thisObj, BattleConst.skill_kind_passive)
        table.insert(self.passiveSkills, passive)
        break
      end
      local passive = PassiveSkillData(skillId, level, thisObj, BattleConst.skill_kind_passive)
      table.insert(self.passiveSkills, passive)
      i=i+1
    until not(i < #passCfg)
  end
  self:initNormalSkill(thisObj)
  if self.cfgData.energySkill and self.cfgData.energyParams then
    local level = nil
    level = 1
    self.energySkill = self.controler:createSkillData(self.cfgData.energySkill, level, thisObj, BattleConst.skill_kind_energy)
    self.maxEnergy = self.cfgData.energyParams[1+1]
    self.energyResumeValue = self.cfgData.energyParams[0+1]
    self.blackFrame = Math:floor(self.cfgData.energyParams[2+1] * BattleFunc.miniSecondToFrame)
    self.killResumeEnergy = self.cfgData.energyParams[3+1] or 0
  end
end

function InstanceLife:initNormalSkill(thisObj, lifeType)
  if lifeType == nil then
    lifeType=nil
  end
  self.currentSkillIndex = 0
  self.normalSkills = {}
  local normalCfg = self:getNormalSkills()
  local debugSkillData = BattleDebugTool.getDebugSkill()
  local i = 0
  repeat
    local info = normalCfg[i+1]
    local level = 1
    local skillId = nil
    local skill = nil
    skillId = tostring(info)
    if debugSkillData then
      skill = self.controler:createSkillData(debugSkillData[0+1], Number(debugSkillData[1+1]) or 1, thisObj, BattleConst.skill_kind_noraml, lifeType)
      table.insert(self.normalSkills, skill)
      break
    else
      if i == #normalCfg - 1 then
        if level == 0 then
          level = 1
        end
        skill = self.controler:createSkillData(skillId, level, thisObj, BattleConst.skill_kind_noraml, lifeType)
      else
        skill = self.controler:createSkillData(skillId, level, thisObj, BattleConst.skill_kind_small, lifeType)
      end
    end
    if self.lifeType == BattleConst.LIFE_PLAYER then
      skill.leftSkillCd = self:getSkillLeftCd(skill)
    end
    table.insert(self.normalSkills, skill)
    i=i+1
  until not(i < #normalCfg)
end

function InstanceLife:getSkillLeftCd(skill)
  local skillSpeedValue = self:getSkillSpeedUpValue(skill._skillId)
  return Math:round(skill.skillInitCd / skillSpeedValue)
end

function InstanceLife:getNormalSkills()
  if self.normalSkillArr then
    return self.normalSkillArr
  end
  return self.cfgData.skill
end

function InstanceLife:getPassiveSkills()
  if not self.passSkillArr then
    self.passSkillArr = {}
    if self.lifeType == BattleConst.LIFE_JIDI then
      return self.passSkillArr
    end
    local basePassive = self.cfgData.passiveSkill
    if basePassive and #basePassive > 0 then
      local s = 0
      repeat
        table.insert(self.passSkillArr, basePassive[s+1])
        s=s+1
      until not(s < #basePassive)
    end
    local allInfo = RolesFunc.instance:getCfgDatas("RoleStar", self.dataId)
    for key in pairs(allInfo) do
      if allInfo:hasOwnProperty(key) then
        -- [ts2lua]allInfo下标访问可能不正确
        local item = allInfo[key]
        if self.starLevel >= item.star and item.passiveSkill then
          local i = 0
          repeat
            table.insert(self.passSkillArr, item.passiveSkill[i+1])
            i=i+1
          until not(i < #item.passiveSkill)
        end
      end
    end
  end
  self:getLastNormalAndPassSkill()
  return self.passSkillArr
end

function InstanceLife:getLastNormalAndPassSkill()
  if #self.passSkillArr == 0 then
    return
  end
  local eff = nil
  local changeSkill = nil
  local firstID = nil
  local secondID = nil
  local skillType = nil
  local tempArr = BattleFunc.getOneTempArr()
  tempArr = TableUtils.copyOneArr(self.passSkillArr, tempArr)
  self.normalSkillArr = TableUtils.copyOneArr(self.cfgData.skill)
  local i = 0
  repeat
    local item = tempArr[i+1]
    local data = BattleFunc.instance:getCfgDatas("PassiveSkill", item)
    if data.effectType == BattleConst.passive_effect_changeSkill then
      eff = data.effectParams
      local j = 0
      repeat
        changeSkill = eff[j+1]
        firstID = Number(changeSkill[0+1])
        secondID = Number(changeSkill[1+1])
        skillType = Number(changeSkill[2+1])
        if skillType == BattleConst.skillType_passive then
          local passIndex = self.passSkillArr:find(firstID)
          if passIndex ~= -1 then
            -- [ts2lua]self.passSkillArr下标访问可能不正确
            self.passSkillArr[passIndex] = secondID
          end
        elseif skillType == BattleConst.skillType_normal then
          local normalIndex = self.normalSkillArr:find(firstID)
          if normalIndex ~= -1 then
            -- [ts2lua]self.normalSkillArr下标访问可能不正确
            self.normalSkillArr[normalIndex] = secondID
          end
        end
        j=j+1
      until not(j < #eff)
    end
    i=i+1
  until not(i < #tempArr)
  BattleFunc.cacheOneTempArr(tempArr)
end

function InstanceLife:resetProperty()
  self.label = nil
  InstanceLife.super.resetProperty(self)
end

function InstanceLife:setLifeType(type)
  self.lifeType = type
  if self.lifeType == BattleConst.LIFE_LANDBUILD then
    self.buildCheckFrame = BattleFunc.buildAutoFrame
    self.reduceBlood = self.maxHp * BattleFunc.buildingAutoReduceHp / 10000
  end
  self:initPointOnSmallMap()
  if self.camp == BattleConst.ROLEGROUP_MYSELF and (self.lifeType == BattleConst.LIFE_LANDHERO or self.lifeType == BattleConst.LIFE_LANDBUILD) then
    self:showBornAni()
  end
end

function InstanceLife:setCamp(value)
  self.camp = value
  if value == 1 then
    self.toCamp = 2
    self.campArr = self.controler.campArr_1
    self.toCampArr = self.controler.campArr_2
    self.diedArr = self.controler.diedArr_1
  else
    self.toCamp = 1
    self.campArr = self.controler.campArr_2
    self.toCampArr = self.controler.campArr_1
    self.diedArr = self.controler.diedArr_2
  end
  if self.lifeType ~= BattleConst.LIFE_PLAYER then
    self:createShade()
    if self.lifeType == BattleConst.LIFE_JIDI then
      self.shadeOffestX = self.realSize[0+1] / 2 - 50
    end
    if self.camp == 1 then
      self.shadeOffestX = -self.shadeOffestX
    end
  end
end

function InstanceLife:changeEnergy(value)
  self.energy = self.energy + value
  if self.energy < 0 then
    self.energy = 0
  elseif self.energy > self.maxEnergy then
    self.energy = self.maxEnergy
  end
end

function InstanceLife:changeHp(value)
  if (UserModel.instance:getMainGuide() == 0 and self.lifeType == BattleConst.LIFE_JIDI) and self.camp == BattleConst.ROLEGROUP_MYSELF then
    return
  end
  if value < 0 then
    local debugVale = BattleDebugTool.isInfiniteHp()
    if debugVale then
      local debugCamp = Number(debugVale[0+1]) or 0
      if (debugCamp == 0 or debugCamp == 3) or self.camp == debugCamp then
        value = 1
      end
    end
  end
  if self.hp <= 0 and value > 0 then
    LogsManager.errorTag("hpError", "死亡的角色还在被治疗")
  end
  self.hp = self.hp + value
  local changeValue = value
  if self.hp <= 0 then
    value = value - self.hp
    self.hp = 0
    self:doDiedLogical()
  elseif self.hp > self.maxHp then
    value = value - self.hp - self.maxHp
    self.hp = self.maxHp
  end
  if not self.hpBar then
    LogsManager.errorTag("instanceError", "血条没了----")
  else
    self.hpBar:onHpChange()
  end
  if self.camp == 2 then
    self.controler.refreshControler:changeWaveHp(value)
  end
end

function InstanceLife:doDiedLogical()
  self.controler:clearCallBack(self)
  self.diedState = BattleConst.DIED_STATE_ING
  self:clearAllBuff()
  self:destroyPoint()
  TableUtils.removeValue(self.campArr, self)
  table.insert(self.diedArr, self)
  self:startDoDiedPerformance()
  if self.camp == 2 then
    self.controler.statistControler:onKillRole(1)
  end
  SkillExpandTrigger.skillExpand_6(nil, nil, {1, BattleFunc.diedShockCount}, nil)
  if #self.campArr == 0 or self.lifeType == BattleConst.LIFE_JIDI then
    self:doResult()
    return
  end
  if BattleFunc.curBattleType == BattleConst.BATTLETYPE_WAR then
    if #self.campArr == 1 then
      local item = self.campArr[0+1]
      if item.lifeType == BattleConst.LIFE_JIDI then
        self:doResult()
      end
    end
  end
end

function InstanceLife:doResult()
  local toArr = self.toCampArr
  local i = 0
  repeat
    local instance = toArr[i+1]
    instance:onToCampAllDied()
    i=i+1
  until not(i < #toArr)
  if self.camp == 2 then
    self.controler.refreshControler:onMonsterAllDied(self)
  else
    self.controler.refreshControler:checkGameLose()
  end
end

function InstanceLife:doEndDiedLogical()
  InstanceLife.super.doEndDiedLogical(self)
  local anythis = self
  ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_onDied, anythis)
  if self.hp > 0 then
    return
  end
  TableUtils.removeValue(self.diedArr, self)
  if self.camp == 2 then
    self.controler:destoryMonster(anythis)
  else
    self.controler:destoryHero(anythis)
  end
end

function InstanceLife:moveToOnePoint(x, y, z, spd, callFunc, thisObj, callParams, expandParams, movePointType)
  if z == nil then
    z=0
  end
  if spd == nil then
    spd=0
  end
  if callFunc == nil then
    callFunc=nil
  end
  if thisObj == nil then
    thisObj=nil
  end
  if callParams == nil then
    callParams=nil
  end
  if expandParams == nil then
    expandParams=nil
  end
  if movePointType == nil then
    movePointType=1
  end
  if self.label == BattleConst.LABEL_IDLE then
    self:playAction(BattleConst.LABEL_WALK, true)
  end
  InstanceLife.super.moveToOnePoint(self,x, y, z, spd, callFunc, thisObj, callParams, expandParams, movePointType)
end

function InstanceLife:overFinalPoint()
  self:playAction(BattleConst.LABEL_IDLE, true)
  InstanceLife.super.overFinalPoint(self)
end

function InstanceLife:movePos()
  InstanceLife.super.movePos(self)
  if self._myState ~= BattleConst.state_stand then
    if self.hpBar then
      self.hpBar:followTarget()
    end
    if self.mapPoint then
      self.controler.battleUI:setSmallMapXByScreen(self.mapPoint, self.pos)
    end
    if self.buffBar then
      self.buffBar:followTarget()
    end
  end
end

function InstanceLife:playAction(label, loop, resumeIdle, force, start, tsvar_end)
  if resumeIdle == nil then
    resumeIdle=true
  end
  if force == nil then
    force=false
  end
  if start == nil then
    start=0
  end
  if tsvar_end == nil then
    tsvar_end=0
  end
  InstanceLife.super.playAction(self,label, loop, resumeIdle, force, start, tsvar_end)
  if self._myView then
    self:setAniPlaySpeed(1)
  end
  if (label == BattleConst.LABEL_IDLE or label == BattleConst.LABEL_WALK) or label == BattleConst.LABEL_DEAD then
    self.currentSkill = nil
  end
end

function InstanceLife:resumeIdleAction()
  if self.currentSkill then
    self.skillWaitFrame = Math:round(self.currentSkill.skillWaitFrame / self._aniPlaySpeed)
  end
  InstanceLife.super.resumeIdleAction(self)
end

function InstanceLife:insterOneBuff(buff)
  local anythis = self
  local logicalType = buff.logicType
  local buffInfo = self.buffInfo
  -- [ts2lua]buffInfo下标访问可能不正确
  if not buffInfo[logicalType] then
    -- [ts2lua]buffInfo下标访问可能不正确
    buffInfo[logicalType] = {}
  end
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  local buffbit = BuffTrigger.buffTypeToBit[logicalType]
  if buffbit then
    self.ctrlBuffBit = self.ctrlBuffBit | buffbit
  end
  -- [ts2lua]buffInfo下标访问可能不正确
  table.insert(buffInfo[logicalType], buff)
  InstanceLife.super.insterOneBuff(self,buff)
  if self.buffBar and self.buffBar.onBuffChange then
    self.buffBar:onBuffChange(buff)
  end
  if buff.leftTimes == 1 then
    self:delayCheckBuff(buff)
  else
    self.controler:setLastCallBack(0, buff.interval, buff.leftTimes, self.delayCheckBuff, self, buff)
  end
  if buff.leftFrame > 0 then
    self.controler:setCallBack(buff.leftFrame, self.clearOneBuff, self, buff)
  end
  ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_getbuff, anythis, BattleFunc.emptyArr, buff.skillAction.skill, buff)
end

function InstanceLife:delayCheckBuff(buffObj)
  BuffTrigger.runOneBuffEffect(buffObj.onwer, self, buffObj.skillAction, buffObj)
end

function InstanceLife:clearOneBuff(buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  local anythis = self
  InstanceLife.super.clearOneBuff(self,buff)
  local logicalType = buff.logicType
  self.controler:clearCallBack(self, self.delayCheckBuff, buff)
  local buffInfo = self.buffInfo
  -- [ts2lua]buffInfo下标访问可能不正确
  if not buffInfo[logicalType] then
    -- [ts2lua]buffInfo下标访问可能不正确
    buffInfo[logicalType] = {}
  end
  -- [ts2lua]buffInfo下标访问可能不正确
  local arr = buffInfo[logicalType]
  local removeResult = false
  local i = #arr - 1
  repeat
    if arr[i+1] == buff then
      arr:splice(i, 1)
      removeResult = true
      break
    end
    i=i-1
  until not(i >= 0)
  if removeChance ~= BattleConst.buff_remove_diedClear then
    if #arr == 0 then
      -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
      local buffbit = BuffTrigger.buffTypeToBit[logicalType]
      if buffbit and self.ctrlBuffBit then
        if self.ctrlBuffBit & buffbit then
          self.ctrlBuffBit = self.ctrlBuffBit ^ buffbit
        else
          BattleLogsManager.battleWarn("xd buffbit错误:", self.ctrlBuffBit, buffbit, "buffid:", buff._id)
        end
      end
    end
  end
  if removeResult then
    BuffTrigger.onClearBuff(self, buff, removeChance)
  end
  if removeChance ~= BattleConst.buff_remove_diedClear and removeChance ~= BattleConst.buff_remove_cover then
    ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_usedbuffRmoved, anythis, BattleFunc.emptyArr, buff.skillAction.skill, buff, removeChance)
    ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_ownerbuffRemoved, buff.onwer, BattleFunc.emptyArr, buff.skillAction.skill, buff, removeChance)
  end
  if self.buffBar and self.buffBar.onBuffChange then
    self.buffBar:onBuffChange(buff)
  end
end

function InstanceLife:clearAllBuff()
  for i in pairs(self.buffInfo) do
    local arr = self.buffInfo[i+1]
    if arr and #arr > 0 then
      local s = #arr - 1
      repeat
        local buff = arr[s+1]
        if buff.leftFrame ~= -1 then
          self:clearOneBuff(arr[s+1], BattleConst.buff_remove_diedClear)
        end
        s=s-1
      until not(s >= 0)
    end
  end
end

function InstanceLife:clearControlBuff()
  for i in pairs(self.buffInfo) do
    local arr = self.buffInfo[i+1]
    if arr and #arr > 0 then
      -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
      if BuffTrigger.buffTypeToBit[Number(i)] then
        local s = #arr - 1
        repeat
          local buff = arr[s+1]
          if buff.leftFrame ~= -1 then
            self:clearOneBuff(arr[s+1])
          end
          s=s-1
        until not(s >= 0)
      end
    end
  end
end

function InstanceLife:checkHasOneBuff(logicalType)
  -- [ts2lua]self.buffInfo下标访问可能不正确
  -- [ts2lua]self.buffInfo下标访问可能不正确
  return self.buffInfo[logicalType] and #self.buffInfo[logicalType] > 0
end

function InstanceLife:getBuffById(buffId)
  for i in pairs(self.buffInfo) do
    local tempArr = self.buffInfo[i+1]
    if #tempArr > 0 then
      local s = 0
      repeat
        local buff = tempArr[s+1]
        if buff._id == buffId then
          return buff
        end
        s=s+1
      until not(s < #tempArr)
    end
  end
  return nil
end

function InstanceLife:refreshBuffTimeById(buffId)
  for i in pairs(self.buffInfo) do
    local tempArr = self.buffInfo[i+1]
    if #tempArr > 0 then
      local s = 0
      repeat
        local buff = tempArr[s+1]
        if buff._id == buffId then
          self:resetOneBuffLastTime(buff)
        end
        s=s+1
      until not(s < #tempArr)
    end
  end
  return nil
end

function InstanceLife:resetOneBuffLastTime(buff)
  self.controler:clearCallBack(self, self.clearOneBuff, buff)
  if buff.leftFrame > 0 then
    self.controler:setCallBack(buff.leftFrame, self.clearOneBuff, self, buff)
  end
end

function InstanceLife:getBuffByGroup(groupId)
  for i in pairs(self.buffInfo) do
    local tempArr = self.buffInfo[i+1]
    if #tempArr > 0 then
      local s = 0
      repeat
        local buff = tempArr[s+1]
        if buff.group == groupId then
          return buff
        end
        s=s+1
      until not(s < #tempArr)
    end
  end
  return nil
end

function InstanceLife:doRelive(hp, skillAct)
  if hp == nil then
    hp=0
  end
  BattleLogsManager.battleEcho("xd 复活---", self.dataId)
  if self.hp > 0 then
    BattleLogsManager.battleEcho("已经复活了")
    TableUtils.removeValue(self.diedArr, self)
    if self.campArr:find(self) == -1 then
      table.insert(self.campArr, self)
    end
    return
  end
  local anyThis = self
  if skillAct then
    ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_relive, anyThis, BattleFunc.emptyArr, skillAct)
  end
  self.controler:clearCallBack(self, self.doRelive)
  self.hp = hp
  self.diedState = BattleConst.DIED_STATE_NONE
  self._myView.alpha = 1
  self._myView2 and (self._myView2.alpha = 1)
  TableUtils.removeValue(self.diedArr, self)
  if self.campArr:find(self) == -1 then
    table.insert(self.campArr, self)
  end
  self:doRelivePerformance()
  self:resumeIdleAction()
  self:initStand()
  self.hpBar:onHpChange()
  self.hpBar:followTarget()
  self.buffBar:onBuffChange()
  self.buffBar:followTarget()
  self.controler.refreshControler:oneRoleRelive(self)
end

function InstanceLife:isRunWithSkillPause()
  if self.currentSkill and self.currentSkill == self.energySkill then
    return true
  end
  return false
end

function InstanceLife:getSkillById(skillId, skillType)
  if skillType == BattleConst.skill_kind_energy then
    return self.energySkill
  elseif skillType == BattleConst.skill_kind_noraml or skillType == BattleConst.skill_kind_small then
    return self:getSkillByGroup(skillId, self.normalSkills)
  elseif skillType == BattleConst.skill_kind_passive then
    return self:getSkillByGroup(skillId, self.passiveSkills)
  end
end

function InstanceLife:getSkillByGroup(skillId, skillArr)
  local i = 0
  repeat
    if skillArr[i+1]._skillId == skillId then
      return skillArr[i+1]
    end
    i=i+1
  until not(i < #skillArr)
  return nil
end

function InstanceLife:getCfgSkillLevel(targetSkillId)
  local normalCfg = self.cfgData.normalSkill
  -- [ts2lua]self._data.normalSkills下标访问可能不正确
  if (self._data and self._data.normalSkills) and self._data.normalSkills[targetSkillId] then
    -- [ts2lua]self._data.normalSkills下标访问可能不正确
    return self._data.normalSkills[targetSkillId]
  end
  -- [ts2lua]self._data.passiveSkills下标访问可能不正确
  if (self._data and self._data.passiveSkills) and self._data.passiveSkills[targetSkillId] then
    -- [ts2lua]self._data.passiveSkills下标访问可能不正确
    return self._data.passiveSkills[targetSkillId]
  end
  if self._data and self.energySkill then
    local level = self._data.energySkill and self._data.energySkill.level or 1
    local skillId = self.cfgData.energySkill
    if self.energySkill._skillId == targetSkillId then
      return self.energySkill.level
    end
  end
  return 1
end

function InstanceLife:getSheildValue()
  local value = 0
  local i = 0
  repeat
    value = value + self.shieldInfoArr[i+1].value
    i=i+1
  until not(i < #self.shieldInfoArr)
  return value
end

function InstanceLife:onSetToCache()
  InstanceLife.super.onSetToCache(self)
  if self.hpBar then
    PoolTools.cacheItem(PoolCode.POOL_HPBAR + self.camp, self.hpBar)
    self.hpBar:onSetToCache()
    self.hpBar = nil
  end
  if self.buffBar then
    PoolTools.cacheItem(PoolCode.POOL_BUFFBAR + self.camp, self.buffBar)
    self.buffBar:onSetToCache()
    self.buffBar = nil
  end
end

function InstanceLife:initPointOnSmallMap()
  self.mapPoint = self.controler.battleUI:createOneMapPoint(self)
end

function InstanceLife:destroyPoint()
  if not self.mapPoint then
    return
  end
  local type = self.lifeType
  if self.camp == BattleConst.ROLEGROUP_MYSELF then
    if type == BattleConst.LIFE_JIDI then
      PoolTools.cacheItem(PoolCode.SELF_MAP_HOME_POINT_POOL, self.mapPoint)
    elseif type == BattleConst.LIFE_AIRHERO then
      PoolTools.cacheItem(PoolCode.SELF_MAP_SKY_POINT_POOL, self.mapPoint)
    else
      PoolTools.cacheItem(PoolCode.SELF_MAP_POINT_POOL, self.mapPoint)
    end
  else
    if type == BattleConst.LIFE_JIDI then
      PoolTools.cacheItem(PoolCode.ENEMY_MAP_HOME_POINT_POOL, self.mapPoint)
    elseif type == BattleConst.LIFE_AIRHERO then
      PoolTools.cacheItem(PoolCode.ENEMY_MAP_SKY_POINT_POOL, self.mapPoint)
    else
      PoolTools.cacheItem(PoolCode.ENEMY_MAP_POINT_POOL, self.mapPoint)
    end
  end
  (self.mapPoint and self.mapPoint.parent) and self.mapPoint.parent:removeChild(self.mapPoint)
  self.mapPoint = nil
end

function InstanceLife:showBornAni()
  local eff = self:createEfect(ResourceConst.EFFECT_BORN_LANDROLE, 0, false, 0, 0, 0, false, 2, 0, 120)
end

function InstanceLife:dispose()
  InstanceLife.super.dispose(self)
  if self.hpBar then
    PoolTools.cacheItem(PoolCode.POOL_HPBAR + self.camp, self.hpBar)
    self.hpBar:onSetToCache()
    self.hpBar = nil
  end
  if self.buffBar then
    PoolTools.cacheItem(PoolCode.POOL_BUFFBAR + self.camp, self.buffBar)
    self.buffBar:onSetToCache()
    self.buffBar = nil
  end
  self.campArr = nil
  self.toCampArr = nil
end
