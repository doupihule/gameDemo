











InstanceBullet = class('InstanceBullet',InstanceMove)

function InstanceBullet:ctor(controler)
  InstanceBullet.super.ctor(self,controler)
  self.moveSpeed = 0;
  table.clearArray(self.mov);
  self.leftCollisionTimes = 1;
  self._hasHitNums = 0;
  self._repeatCheckFrame = 0;
  self.moveFrame = 0;
  self.initOffsetY = 0;
  self.classModel = BattleConst.model_bullet
end

function InstanceBullet:setData(data)
  if not self._mingzhongArr then
    self._mingzhongArr = {}
  else
    -- [ts2lua]修改数组长度需要手动处理。
    table.clearArray(self._mingzhongArr)
  end
  InstanceBullet.super.setData(self,data)
  self._followRole = nil
  self:setViewWay(1)
  self:setRotation(0)
  self.cfgData = BattleFunc.getInstance():getCfgDatas("Bullet", data.id)
  self.collisionType = self.cfgData.collisionRange
  self.collisionParams = self.cfgData.rangeParams
  if not self.skillActionArr then
    self.skillActionArr = {}
  end
  if not self.hitLandActionArr then
    self.hitLandActionArr = {}
  end
end

function InstanceBullet:setOwner(owner, skillAction, rotation, targetRole)
  self.owner = owner
  self.cfgScale = owner.cfgScale
  self.skillAction = skillAction
  self._rotationStyle = rotation
  local collisionParams = self.cfgData.collisionAction
  local tagStr = "Bullet:" .. self.dataId
  if collisionParams then
    self._collisionParams = {}
    self._collisionParams[0+1] = tonumber(collisionParams[0+1])
    self._collisionParams[1+1] = self.skillAction.skill:getSkillValue(collisionParams[1+1], tagStr)
    if self._collisionParams[0+1] == BattleConst.bullet_hit_bounce then
      self._repeatCheckFrame = 60
    else
      self._repeatCheckFrame = tonumber(collisionParams[2+1])
      if self._repeatCheckFrame > 0 then
        self._repeatCheckFrame = BattleFunc.getInstance():turnMinisecondToframe(self._repeatCheckFrame)
      end
    end
  end
  if self._myView then
    self._myView:play(0, true, true)
  end
  self.initOffsetY = self.pos.y - owner.pos.y
  if owner._myView and self._myView then
    self._myView:setSpace(owner._myView._xSpace, owner._myView._ySpace)
    self._myView:changeViewNums(owner._myView.currentViewNums)
  end
  self.leftCollisionTimes = tonumber(self.cfgData.collisionTimes)
  self._hasHitNums = 0
  local targetType = self.cfgData.targetType
  if targetType == 1 then
    if not targetRole then
      LogsManager.errorTag("bulletError", "没有传入目标角色")
      self._chooseTargetArr = {}
    else
      self._chooseTargetArr = {targetRole}
    end
  elseif targetType == 2 then
    self._chooseTargetArr = owner.campArr
  else
    self._chooseTargetArr = owner.toCampArr
  end
  local skillEff = self.cfgData.skillEffect
  if skillEff then
    local i = 0
    repeat
      if not self.skillActionArr[i+1] then
        local skillAction = SkillActionData.new(tostring(skillEff[i+1]), owner, skillAction.skill, 0, 0, 0, 0, 0)
        self.skillActionArr[i+1] = skillAction
      else
        self.skillActionArr[i+1]:updateData(owner, skillAction.skill)
      end
      i=i+1
    until not(i < #skillEff)
  end
  self:resetMoveAct(targetRole)
  local offset = self.cfgData.offset or 0
  if offset then
    self:adjustInitPos(targetRole)
    self.initOffsetY = self.pos.y - owner.pos.y
    self:resetMoveAct(targetRole)
  end
end

function InstanceBullet:adjustInitPos(targetRole)
  local offset = self.cfgData.offset or 0 * self.cfgScale
  if not offset then
    return
  end
  local spdAbs = math.sqrt(self.speed.x * self.speed.x + self.speed.y * self.speed.y + self.speed.z * self.speed.z)
  if spdAbs == 0 then
    return
  end
  local ofx = self.speed.x / spdAbs * offset
  local ofy = self.speed.y / spdAbs * offset
  local ofz = self.speed.z / spdAbs * offset
  self:setPos(self.pos.x + ofx, self.pos.y + ofy, self.pos.z + ofz)
  local disX1 = targetRole.pos.x - self.owner.pos.x
  local disZ1 = targetRole.pos.z - self.owner.pos.z
  local disX2 = self.pos.x - self.owner.pos.x
  local disZ2 = self.pos.z - self.owner.pos.z
  local disSq1 = disX1 * disX1 + disZ1 * disZ1
  local disSq2 = disX2 * disX2 + disZ2 * disZ2
  if disSq2 > disSq1 then
    self:setPos(targetRole.pos.x + self.owner.pos.x / 2, self.pos.y, targetRole.pos.z + self.owner.pos.z / 2)
  end
end

function InstanceBullet:doAiLogical()
  self:checkAdjustAngle()
  self:checkFollowRole()
  self:checkAttack(self.skillActionArr)
  self:updateLeftTime()
  self:checkHitLandAction()
end

function InstanceBullet:checkHitLandAction()
  if self.speed.y <= 0 then
    return
  end
  if self.pos.y - self.speed.y <= 10 then
    return
  end
  self.speed.y = 0
  local fallEffect = self.cfgData.fallEffect
  if fallEffect then
    local i = 0
    repeat
      local aoeId = fallEffect[i+1]
      local aoeData = PoolTools.getItem(PoolCode.POOL_AOEDATA + aoeId)
      if not aoeData then
        aoeData = BattleAoeData.new(aoeId)
      end
      aoeData:setData(self.skillActionArr[0+1], self.owner)
      aoeData:doAoeAction(self.owner, self.pos, self)
      i=i+1
    until not(i < #fallEffect)
  end
  self.controler:destroyBullet(self)
end

function InstanceBullet:checkAdjustAngle()
  if self._myState ~= BattleConst.state_jump then
    return
  end
  if self.updateCount % 2 == 0 then
    return
  end
  local ang = math.atan2(self.speed.z + self.speed.y, self.speed.x)
  self:setRotationRad(ang)
end

function InstanceBullet:checkFollowRole()
  if not self._followRole then
    return
  end
  if self._followRole.hp <= 0 then
    self._followRole = nil
    self.controler:destroyBullet(self)
    return
  end
  self:resetMoveAct(self._followRole)
end

function InstanceBullet:checkAttack(skillActionArr)
  if self.leftCollisionTimes == 0 then
    return
  end
  local tempArr = BattleFunc.getOneTempArr()
  if self.collisionType == ChooseTrigger.RANGE_CIRCLE then
    ChooseTrigger.chooseRoleByCircle(self, self.collisionParams[0+1] * self.cfgScale, 0, 0, self._chooseTargetArr, 1, tempArr, self._mingzhongArr)
  elseif self.collisionType == ChooseTrigger.RANGE_RECT then
    ChooseTrigger.chooseRoleByRect(self, self.collisionParams[0+1] * self.cfgScale, self.collisionParams[1+1] * self.cfgScale, 0, 0, self._chooseTargetArr, 1, tempArr, self._mingzhongArr)
  end
  ChooseTrigger.excludeUnChooseRole(self.owner, tempArr)
  if #tempArr > 0 then
    self.leftCollisionTimes=self.leftCollisionTimes-1
    self._hasHitNums=self._hasHitNums+1
    local i = 0
    repeat
      table.insert(self._mingzhongArr, tempArr[i+1])
      i=i+1
    until not(i < #tempArr)
    local hitRatio = 0
    if self.cfgData.collisionDamage then
      -- [ts2lua]self.cfgData.collisionDamage下标访问可能不正确
      hitRatio = self.cfgData.collisionDamage[self._hasHitNums - 2] or 0
    end
    local s = 0
    repeat
      if hitRatio ~= 0 then
        self.owner.attrData:changeOneTempAttr(BattleConst.attr_final_damage, hitRatio, 0)
      end
      SkillActionTrigger.checkSkillAction(self.owner, skillActionArr[s+1], tempArr)
      s=s+1
    until not(s < #skillActionArr)
    if self._repeatCheckFrame > 0 then
      self.controler:setCallBack(self._repeatCheckFrame, self.clearHitArr, self)
    end
    if self.leftCollisionTimes == 0 then
      self.controler:destroyBullet(self)
    else
      self:doAfterHit()
    end
  end
  BattleFunc.cacheOneTempArr(tempArr)
end

function InstanceBullet:clearHitArr()
  -- [ts2lua]修改数组长度需要手动处理。
  table.clearArray(self._mingzhongArr)
end

function InstanceBullet:doAfterHit()
  if not self._collisionParams then
    return
  end
  local type = self._collisionParams[0+1]
  if type == BattleConst.bullet_hit_through then
    return
  elseif type == BattleConst.bullet_hit_bounce then
    if not self:checkHitRatio() then
      self._followRole = nil
      self.controler:destroyBullet(self)
      return
    end
    local nearRole = ChooseTrigger.chooseAbsNearRole(self, self._chooseTargetArr, self._mingzhongArr, self.cfgData.pathParams[1+1])
    if nearRole then
      self:resetMoveAct(nearRole)
    else
      if #self._mingzhongArr >= 2 then
        table.spliceArray(self._mingzhongArr,1, #self._mingzhongArr-1 )
        nearRole = ChooseTrigger.chooseAbsNearRole(self, self._chooseTargetArr, self._mingzhongArr, self.cfgData.pathParams[1+1])
        if nearRole then
          self:resetMoveAct(nearRole)
          return
        end
      end
      self._followRole = nil
    end
    if not nearRole then
      self.controler:destroyBullet(self)
    end
  elseif type == BattleConst.bullet_hit_back then
    if not self:checkHitRatio() then
      return
    end
    self:resetMoveAct(self.owner)
  end
end

function InstanceBullet:checkHitRatio()
  local raqtio = self._collisionParams[1+1]
  if not raqtio then
    return true
  end
  local random = RandomUtis.getOneRandom()
  if random * 10000 > raqtio then
    return false
  end
  return true
end

function InstanceBullet:resetMoveAct(targetRole)
  local rotation = self._rotationStyle
  local moveType = self.cfgData.type
  self._bulletMoveType = moveType
  local xspd = nil
  local yspd = 0
  local zspd = nil
  local ang = nil
  local spdValue = BattleFunc.getInstance():turnSpeedToFrame(self.cfgData.pathParams[0+1])
  local dy = targetRole.pos.y - self.pos.y + self.initOffsetY
  local dx = targetRole.pos.x - self.pos.x
  local dz = targetRole.pos.z - self.pos.z
  local absDy = math.abs(dy)
  local dis = nil
  local pathParams = self.cfgData.pathParams
  local tempArr = nil
  if targetRole.lifeType == BattleConst.LIFE_AIRHERO then
    moveType = BattleConst.BULLET_MOVE_LINE
    tempArr = BattleFunc.getOneTempArr()
    tempArr[0+1] = pathParams[0+1] * 1.2
    tempArr[1+1] = 1000
    pathParams = tempArr
  end
  if moveType == BattleConst.BULLET_MOVE_LINE then
    self.gravityAble = false
    if rotation == -1 then
      if absDy > 10 then
        dis = math.sqrt(dx * dx + dz * dz + dy * dy)
        local spdperDis = spdValue / dis
        yspd = dy * spdperDis
        xspd = dx * spdperDis
        zspd = dz * spdperDis
      else
        dis = math.sqrt(dx * dx + dz * dz)
        local spdperDis = spdValue / dis
        xspd = dx * spdperDis
        zspd = dz * spdperDis
      end
      local r = math.atan2(yspd + zspd, xspd)
      ang = r
      rotation = r * BattleFunc.radtoAngle
    else
      if self.owner._viewWay == -1 then
        rotation = 180 - rotation
      end
      ang = rotation * BattleFunc.angletoRad
      xspd = math.cos(ang) * spdValue
      zspd = math.sin(ang) * spdValue
    end
    self:setRotation(rotation)
    if not self._followRole or self._followRole ~= targetRole then
      self.moveFrame = math.floor(pathParams[1+1] / spdValue)
    end
    self:initMove(xspd, yspd, zspd, true)
    if self._collisionParams[0+1] == BattleConst.bullet_hit_bounce then
      self._followRole = targetRole
    end
  elseif moveType == BattleConst.BULLET_MOVE_CURVE then
    self.gravityAble = true
    dis = math.sqrt(dx * dx + dz * dz)
    local flyDisTance = pathParams[1+1] / 10000 * dis
    local maxFlyDis = pathParams[2+1]
    if flyDisTance > maxFlyDis then
      flyDisTance = maxFlyDis
    end
    self.moveFrame = math.ceil(dis / spdValue)
    local ang = math.atan2(dz, dx)
    xspd = math.cos(ang) * spdValue
    zspd = math.sin(ang) * spdValue
    self:initMove(xspd, 0, zspd, true)
    local halft = self.moveFrame / 2
    self.addSpeed.y = flyDisTance * 2 / halft * halft
    self:initJump(-self.addSpeed.y * halft)
    self.moveFrame = self.moveFrame + 120
  end
  if tempArr then
    BattleFunc.cacheOneTempArr(tempArr)
  end
end

function InstanceBullet:updateLeftTime()
  if not self:checkIsUsing() then
    return
  end
  self.moveFrame=self.moveFrame-1
  if self.moveFrame == 0 then
    self.controler:destroyBullet(self)
  end
end
