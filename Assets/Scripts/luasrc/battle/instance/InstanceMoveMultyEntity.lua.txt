InstanceMoveMultyEntity = class('InstanceMoveMultyEntity')
function InstanceMoveMultyEntity:ctor(...)
    InstanceMoveMultyEntity.super.ctor(self, unpack({ ... }))
    self.currentStep = 0;
    self.isGrid = false;
    self.currentLoopIndex = 0;
end

function InstanceMoveMultyEntity:ctor()
end
function InstanceMoveMultyEntity:initData(pointArr, speed, callFunc, thisObj, loopParams, isGrid)
    if speed == nil then
        speed = 0
    end
    if isGrid == nil then
        isGrid = false
    end
    self.pointArr = pointArr
    self.spd = speed
    self.callFunc = callFunc
    self.thisObj = thisObj
    self.totalStep = #self.pointArr
    self.currentEntity = InstanceMoveEntity.new(pointArr[1 + 1], speed)
    self.loopParams = loopParams
    self.isGrid = isGrid
    self.currentStep = 0
end

function InstanceMoveMultyEntity:getNextpos()
    self.currentStep = self.currentStep + 1
    if self.loopParams then
        return self:getLoopPos()
    end
    if self.currentStep == self.totalStep + 1 then
        return nil
    end
    self.currentEntity.target = self.pointArr[self.currentStep ]
    if self.expandParams and #self.expandParams > 0 then
        if #self.expandParams == 1 then
            self.currentEntity.expandParams = self.expandParams[1]
        else
            self.currentEntity.expandParams = self.expandParams[self.currentStep ]
        end
    end
    return self.currentEntity
end

function InstanceMoveMultyEntity:getLoopPos()
    local roundNum = math.floor(self.currentStep / self.totalStep)
    local pos = self.currentStep % self.totalStep
    if roundNum % 2 == 0 then
        self.currentEntity.target = self.pointArr[pos+1]
    else
        self.currentEntity.target = self.pointArr[self.totalStep - pos]
    end
    return self.currentEntity
end

function InstanceMoveMultyEntity:dispose()
    self.currentEntity = nil
    self.callFunc = nil
    self.thisObj = nil
end
