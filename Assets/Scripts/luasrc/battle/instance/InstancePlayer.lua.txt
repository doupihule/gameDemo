require("game/sys/consts/BattleConst")
require("game/sys/func/BattleFunc")
require("game/battle/trigger/ChooseTrigger")
require("framework/manager/LogsManager")
require("game/battle/instance/InstanceHero")
require("framework/utils/ButtonUtils")
require("game/sys/consts/GameConsts")
require("framework/manager/WindowManager")
require("framework/func/TranslateFunc")

InstancePlayer = newClass({InstanceHero}, {name = 'InstancePlayer'})

function InstancePlayer:ctor(controler)
  self:superCall('ctor',controler)
  self.lifeType = BattleConst.LIFE_PLAYER
  self.classModel = BattleConst.model_player
  self.targetRole = self.controler.myHome
  self.skillGroup = {}
  self._myView = self.targetRole._myView
  self.pos = self.targetRole.pos
end

function InstancePlayer:doAiLogical()
  self:updateSkillCd()
end

function InstancePlayer:updateSkillCd()
  local cdcheck = 20
  if self.updateCount % cdcheck ~= 0 then
    return
  end
  local i = 0
  repeat
    repeat
      if not self.skillGroup[i+1] then
        break
      end
      local skill = self.normalSkills[i+1]
      if skill.leftSkillCd > 0 then
        skill.leftSkillCd = skill.leftSkillCd - cdcheck
        if skill.leftSkillCd < 0 then
          skill.leftSkillCd = 0
          if self.skillGroup[i+1]:getChildByName("mask").visible then
            self.skillGroup[i+1]:getChildByName("mask").visible = false
            self.skillGroup[i+1]:getChildByName("timeTxt").text = ""
          end
        end
        if not self.skillGroup[i+1]:getChildByName("mask").visible then
          self.skillGroup[i+1]:getChildByName("mask").visible = true
        end
        self.skillGroup[i+1]:getChildByName("timeTxt").text = Math:ceil(skill.leftSkillCd / GameConsts.gameFrameRate)
      else
        if self.skillGroup[i+1]:getChildByName("mask").visible then
          self.skillGroup[i+1]:getChildByName("mask").visible = false
        end
        self.skillGroup[i+1]:getChildByName("timeTxt").text = ""
      end
    until true
    i=i+1
  until not(i < #self.normalSkills)
end

function InstancePlayer:setData(data)
  self.cfgData = data
  self:superCall('setData',data)
  self.ignoreTimeScale = true
end

function InstancePlayer:setSkillInfo(arr, parnet)
  self.skillArr = arr
  self.cfgData.skill = self.skillArr
  self.skillParnet = parnet
  self:initNormalSkill(self.targetRole, self.lifeType)
  self:addSkillIcon()
end

function InstancePlayer:addSkillIcon()
  local i = 0
  repeat
    local item = self.skillArr[i+1]
    local skillInfo = BattleFunc.instance:getCfgDatas("Skill", item)
    local img = Laya.Image()
    img.skin = "uisource/skill/skill/" .. skillInfo.pic .. ".png"
    img.height = 92
    img.width = img.height
    img.x = -i * img.width + 10
    self.skillParnet:addChild(img)
    local mask = Laya.Image("uisource/battle/battle/battle_image_jiangli.png")
    mask.height = 92
    mask.width = mask.height
    mask.sizeGrid = "13,13,13,13"
    mask.name = "mask"
    local timeTxt = Laya.Label()
    timeTxt.width = 92
    timeTxt.height = 49
    timeTxt.y = 25
    timeTxt.font = "Microsoft YaHei"
    timeTxt.fontSize = 36
    timeTxt.valign = "middle"
    timeTxt.align = "center"
    timeTxt.name = "timeTxt"
    timeTxt.color = "#ffffff"
    timeTxt.text = Math:ceil(self.normalSkills[i+1].leftSkillCd / GameConsts.gameFrameRate) .. ""
    img:addChild(mask)
    img:addChild(timeTxt)
    table.insert(self.skillGroup, img)
    ButtonUtils(img, self.onClickSkill, self, nil, nil, i)
    i=i+1
  until not(i < #self.skillArr)
end

function InstancePlayer:onClickSkill(index)
  -- [ts2lua]self.normalSkills下标访问可能不正确
  local skillData = self.normalSkills[index]
  if not skillData then
    return
  end
  if skillData.isActive and skillData.leftSkillCd <= 0 then
    local tempArr = BattleFunc.getOneTempArr()
    ChooseTrigger.getIsCanUseSkill(self.targetRole, skillData, tempArr)
    if tempArr[0+1] ~= -1 then
      LogsManager.echo("使用了技能------------------")
      self:giveOutSkill(tempArr[1+1])
    else
      WindowManager.ShowTip(TranslateFunc.instance:getTranslate("tid_battle_noAim"))
    end
    BattleFunc.cacheOneTempArr(tempArr)
  end
end
