InstancePlayer = class('InstancePlayer', InstanceHero)

function InstancePlayer:ctor(controler)
    InstancePlayer.super.ctor(self, controler)
    self.lifeType = BattleConst.LIFE_PLAYER
    self.classModel = BattleConst.model_player
    self.targetRole = self.controler.myHome
    self.skillGroup = {}
    self._myView = self.targetRole._myView
    self.pos = self.targetRole.pos
end

function InstancePlayer:doAiLogical()
    self:updateSkillCd()
end

function InstancePlayer:updateSkillCd()
    local cdcheck = 20
    if self.updateCount % cdcheck ~= 0 then
        return
    end
    local i = 0
    for i, skill in ipairs(self.normalSkills) do
        local skillView = self.skillGroup[i];
        if not skillView then
            break
        end

        --if skill.leftSkillCd > 0 then
        --    skill.leftSkillCd = skill.leftSkillCd - cdcheck
        --    if skill.leftSkillCd < 0 then
        --        skill.leftSkillCd = 0
        --        if skillView:getChildByName("mask").visible then
        --            skillView:getChildByName("mask").visible = false
        --            skillView:getChildByName("timeTxt").text = ""
        --        end
        --    end
        --    if not skillView:getChildByName("mask").visible then
        --        skillView:getChildByName("mask").visible = true
        --    end
        --    skillView:getChildByName("timeTxt").text = math.ceil(skill.leftSkillCd / GameConsts.gameFrameRate)
        --else
        --    if skillView:getChildByName("mask").visible then
        --        skillView:getChildByName("mask").visible = false
        --    end
        --    skillView:getChildByName("timeTxt").text = ""
        --end
    end
end

function InstancePlayer:setData(data)
    self.cfgData = data
    InstancePlayer.super.setData(self, data)
    self.ignoreTimeScale = true
end

function InstancePlayer:setSkillInfo(arr, parnet)
    self.skillArr = arr
    self.cfgData.skill = self.skillArr
    self.skillParnet = parnet
    self:initNormalSkill(self.targetRole, self.lifeType)
end

function InstancePlayer:addSkillIcon()
end

function InstancePlayer:onClickSkill(index)
    local skillData = self.normalSkills[index]
    if not skillData then
        return
    end
    if skillData.isActive and skillData.leftSkillCd <= 0 then
        local tempArr = BattleFunc.getOneTempArr()
        ChooseTrigger.getIsCanUseSkill(self.targetRole, skillData, tempArr)
        if tempArr[1] ~= -1 then
            LogsManager.echo("使用了技能------------------")
            self:giveOutSkill(tempArr[2])
        else
            WindowManager.ShowTip(TranslateFunc.getInstance():getTranslate("tid_battle_noAim"))
        end
        BattleFunc.cacheOneTempArr(tempArr)
    end
end
