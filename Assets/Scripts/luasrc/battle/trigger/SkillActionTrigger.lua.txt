SkillActionTrigger = class('SkillActionTrigger')
SkillActionTrigger.action_dmage = 1;
SkillActionTrigger.action_resumehp = 2;
SkillActionTrigger.action_xixue = 3;
SkillActionTrigger.action_xijin = 4;
SkillActionTrigger.action_addbuff = 5;
SkillActionTrigger.action_rmbuff = 6;
SkillActionTrigger.action_energy = 7;
SkillActionTrigger.action_shunyi = 8;
SkillActionTrigger.action_fuhuo = 9;
SkillActionTrigger.action_fanshang = 10;
SkillActionTrigger.action_zhaohuan = 11;
SkillActionTrigger.action_aoe = 12;
SkillActionTrigger.action_bullet = 13;
function SkillActionTrigger.checkSkillAction(attacker, skillAction, useArr)
    local replaceArr = BattleFunc.getOneTempArr()
    local skill = skillAction.skill
    if skill.skillType ~= BattleConst.skill_kind_passive and not skillAction.relyonSkill then
        ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_createAction, attacker, BattleFunc.emptyArr, skillAction, replaceArr)
    end
    if #replaceArr > 0 then
        local i = 0
        for i, v in ipairs(replaceArr) do
            SkillActionTrigger.beforRunSkillAction(attacker, v, useArr)
        end
    else
        SkillActionTrigger.beforRunSkillAction(attacker, skillAction, useArr)
    end
    BattleFunc.cacheOneTempArr(replaceArr)
end

function SkillActionTrigger.beforRunSkillAction(attacker, skillAction, useArr)
    local chooseArr = nil
    local hasHit = false
    local needCahce = false
    if useArr then
        chooseArr = useArr
    else
        if #skillAction.tempChooseArr > 0 then
            chooseArr = BattleFunc.getOneTempArr()
            needCahce = true
            TableUtils.copyOneArr(skillAction.tempChooseArr, chooseArr)
        else
            if not skillAction.chooseTartgetCfg then
                chooseArr = skillAction.skill.tempChooseArr
            else
                chooseArr = BattleFunc.getOneTempArr()
                ChooseTrigger.getSkillTargetRole(attacker, skillAction.skill, skillAction.chooseTartgetCfg, chooseArr)
                needCahce = true
            end
        end
    end
    if #chooseArr > 0 then
        hasHit = true
        SkillActionTrigger.runOneSkillAction(attacker, skillAction.skill, skillAction, chooseArr)
    end
    if needCahce then
        BattleFunc.cacheOneTempArr(chooseArr)
    end
    if attacker.attrData then
        attacker.attrData:clearTempAttr()
    end
    return hasHit
end

function SkillActionTrigger.runOneSkillAction(attacker, skill, skillAction, useArr)
    local logicType = skillAction.cfgData.logicType
    if skillAction.condition then
        local rt = ConditionTrigger.checkOneOpportunity(attacker, skill, skillAction.condition, useArr, skillAction)
        if not rt then
            return
        end
    end
    if skillAction.cfgData.sound then
        attacker.controler:playSound(skillAction.cfgData.sound)
    end
    if skillAction.cfgData.effect then

    end
    attacker:changeEnergy(skillAction.resumeEnergy)
    local targetSound = skillAction.cfgData.sound
    local effectParams = skillAction.cfgData.effect
    if (useArr and #useArr > 0) and effectParams then
        for i, v in ipairs(useArr) do
            if v.hp > 0 then
                v:createEffByParams(effectParams, false, false)
            end
        end
    end
    local skillTempChooseArr = skillAction.tempChooseArr
    table.clearArray(skillTempChooseArr)
    for i, v in ipairs(useArr) do
        table.insert(skillTempChooseArr, v)
    end
    if skill.skillType ~= BattleConst.skill_kind_passive then
        ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_action_usedBefore, attacker, useArr, skillAction)
    end
    local func = SkillActionTrigger["runSkillAction_" .. logicType]
    if not func then
        LogsManager.errorTag("skillactionError", "没有对应的效果类型:", logicType)
        return 0
    else
        local rt = doJsCallFunc(func, SkillActionTrigger, attacker, skill, skillAction, useArr)
        ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_action_usedAfter, attacker, useArr, skillAction)
        SkillExpandTrigger.onCheckExpand(attacker, skill, skillAction.cfgData.expand, useArr)
        table.clearArray(skillTempChooseArr)
        return rt
    end
end

function SkillActionTrigger.runSkillAction_1(attacker, skill, skillAction, useArr)
    local skillParams = skillAction.skillLogicalParams
    for i, defer in ipairs(useArr) do
        if defer.hp > 0 then
            if skillParams[1][4] then
                BattleFormulaTrigger.dmgByAttr(attacker, defer, skillAction, skillParams[1][1], skillParams[1][2])
            else
                BattleFormulaTrigger.damage(attacker, defer, skillAction, skillParams[1][1], skillParams[1][2])
            end
        end
    end
end

function SkillActionTrigger.runSkillAction_2(attacker, skill, skillAction, useArr)
    local i = 0
    for i, defer in ipairs(useArr) do
        BattleFormulaTrigger.trit(attacker, defer, skill, skillAction)
    end
end

function SkillActionTrigger.runSkillAction_3(attacker, skill, skillAction, useArr)
    attacker.attrData:changeOneTempAttr(BattleConst.attr_xixue, skillAction.skillLogicalParams[1][1], 0)
end

function SkillActionTrigger.runSkillAction_4(attacker, skill, skillAction, useArr)
end
function SkillActionTrigger.runSkillAction_5(attacker, skill, skillAction, useArr)
    local logicalParams = skillAction.skillLogicalParams
    for i, v in ipairs(logicalParams) do
        local buffId = v[1]
        local cengshu = v[2]
        local cacheBuff = PoolTools.getItem("buff_" .. buffId)
        if not cacheBuff then
            cacheBuff = BattleBuffData.new(buffId)
        end
        cacheBuff:setData(attacker, skillAction, cengshu)
        for s, targetInstance in ipairs(useArr) do
            BuffTrigger.setOneBuff(attacker, useArr[s], skillAction, cacheBuff)
        end
    end
end

function SkillActionTrigger.runSkillAction_6(attacker, skill, skillAction, useArr)
    for i, defer in ipairs(useArr) do
        local skillParams = skillAction.skillLogicalParams
        for s, tempArr in ipairs(skillParams) do
            local kind = tempArr[1]
            for m = 2, #tempArr do
                SkillActionTrigger.removeBuffByKind(defer, kind, tempArr[m])
            end
        end
    end
end

function SkillActionTrigger.removeBuffByKind(user, kind, value)
    local buffMapInfo = user.buffInfo
    for i in pairs(buffMapInfo) do
        local buffArr = buffMapInfo[i]
        local len = #buffArr
        for s=len,1,-1 do
            local buff = buffArr[s]
            if SkillActionTrigger.checkBuffKind(buff, kind, value) then
                user:clearOneBuff(buff, BattleConst.buff_remove_qusan)
            end
        end
    end
end

function SkillActionTrigger.checkBuffKind(buff, kind, value)
    if kind == BattleConst.buff_kind_group then
        return buff.group == value
    elseif kind == BattleConst.buff_kind_fu then
        return buff.type == value
    elseif kind == BattleConst.buff_kind_zheng then
        return buff.type == value
    elseif kind == BattleConst.buff_kind_type then
        return buff.logicType == value
    elseif kind == BattleConst.buff_kind_id then
        return buff._id == tostring(value)
    end
    return false
end

function SkillActionTrigger.runSkillAction_7(attacker, skill, skillAction, useArr)
    local i = 0
    for i, v in ipairs(useArr) do
       v:changeEnergy(skillAction.skillLogicalParams[1][1])
    end
end

function SkillActionTrigger.runSkillAction_8(attacker, skill, skillAction, useArr)
    local defer = useArr[1]
    local params = skillAction.skillLogicalParams[1]
    local keepDis = params[2] and params[2] or 60
    if not defer then
        return
    end
    local targetX = defer.pos.x + defer._viewWay * keepDis
    attacker:setLastPos(attacker.pos.x, attacker.pos.y, attacker.pos.z)
    attacker:setPos(targetX, 0, defer.pos.z)
    local lastFrame = BattleFunc.getInstance():turnMinisecondToframe(params[1])
    attacker.controler:setCallBack(lastFrame, attacker.resumeToLastPos, attacker)
    BattleLogsManager.battleEcho("xd 触发瞬移了---lastFrame:", lastFrame)
end

function SkillActionTrigger.runSkillAction_9(attacker, skill, skillAction, useArr)
    local ratio = skillAction.skillLogicalParams[1][1] / 10000
    for i, targetIns in ipairs(useArr) do
        targetIns:doRelive(math.floor(targetIns:getMaxHp() * ratio), skillAction)
    end
end

function SkillActionTrigger.runSkillAction_10(attacker, skill, skillAction, useArr)
    local value = skillAction.skillLogicalParams[1][1]
    local tempBeUsedValue = attacker.tempBeUsedValue
    if not tempBeUsedValue then
        return
    end
    local dmgValue = tempBeUsedValue[2]
    if not dmgValue then
        return
    end
    local fanshangValue = math.floor(dmgValue * value / 10000)
    for i, targetIns in ipairs(useArr) do
        targetIns:onBeFanshang(dmgValue, attacker)
    end
end

function SkillActionTrigger.runSkillAction_11(attacker, skill, skillAction, useArr)
    local params = skillAction.skillLogicalParams
    local s = 0
    for s, v in ipairs(useArr) do
        for i, info in ipairs(params) do
            local targetRole = v
            local x = info[1] / attacker._viewWay + targetRole.pos.x
            local z = -info[2] + attacker.pos.z
            local id = tostring(info[3])
            local lifeFrame = BattleFunc.getInstance():turnMinisecondToframe(info[4])
            attacker.controler:createSummoned(id, { level = attacker:getData().level, id = id, starLevel = attacker:getData().starLevel }, x, z, attacker, lifeFrame)
        end
    end
end

function SkillActionTrigger.runSkillAction_12(attacker, skill, skillAction, useArr)
    local aoeIdArr = skillAction.skillLogicalParams[1]
    for i, v in ipairs(useArr) do
        for s, aoeId in ipairs(aoeIdArr) do
            local aoeData = PoolTools.getItem(PoolCode.POOL_AOEDATA .. aoeId)
            if not aoeData then
                aoeData = BattleAoeData.new(aoeId)
            end
            aoeData:setData(skillAction, attacker)
            aoeData:doAoeAction(v)
        end
    end
end

function SkillActionTrigger.runSkillAction_13(attacker, skill, skillAction, useArr)
    local paramsArr = skillAction.skillLogicalParams
    for i, info in ipairs(paramsArr) do
        local bulletId = tostring(info[1])
        local x = info[2] * attacker.cfgScale * attacker._viewWay
        local y = -info[3] * attacker.cfgScale
        local rotation = info[4]
        local offz = info[5] or 0
        local s = 0
        for s, v in ipairs(useArr) do
            attacker.controler:createBullet(bulletId, attacker, skillAction, x + attacker.pos.x, attacker.pos.y + y, rotation, v, offz)
            if #useArr > 1 and #paramsArr > 1 then
                LogsManager.errorTag("skillactionError", "技能效果id:", skillAction.skillEffectId, "_选择了多个目标.同时配置了多个子弹.不符合逻辑")
                break
            end
        end
    end
end

function SkillActionTrigger.runSkillAction_14(attacker, skill, skillAction, useArr)
    if #useArr == 0 then
        return
    end
    local targetRole = useArr[1]
    local paramsArr = skillAction.skillLogicalParams
    local pointArr = {}
    local expandArr = {}
    local i = 0
    for i, info in ipairs(paramsArr) do
        local frame = BattleFunc.getInstance():turnMinisecondToframe(info[1])
        local isFollow = info[4]
        local x = nil
        local z = nil
        local expandParams = { frame = frame }
        if isFollow == 1 then
            x = info[2] * attacker._viewWay
            z = info[3]
            expandParams.target = targetRole
        else
            x = info[2] * attacker._viewWay + targetRole.pos.x
            z = info[3] + targetRole.pos.z
        end
        table.insert(pointArr, VectorTools.createVector3(x, 0, z))
        table.insert(expandArr, expandParams)
    end
    attacker:moveToGroupPoints(pointArr, 0, nil, nil, expandArr)
end
