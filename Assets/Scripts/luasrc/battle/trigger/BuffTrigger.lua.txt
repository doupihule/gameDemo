









BuffTrigger = class('BuffTrigger')
BuffTrigger.buff_logical_dmage = 1;
BuffTrigger.buff_logical_prop = 2;
BuffTrigger.buff_logical_otherprop = 3;
BuffTrigger.buff_logical_xuanyun = 4;
BuffTrigger.buff_logical_bingdong = 5;
BuffTrigger.buff_logical_jitui = 6;
BuffTrigger.buff_logical_jifei = 7;
BuffTrigger.buff_logical_chenmo = 8;
BuffTrigger.buff_logical_nuqi = 9;
BuffTrigger.buff_logical_hudun = 10;
BuffTrigger.buff_logical_wudi = 11;
BuffTrigger.buff_logical_mianyi = 12;
BuffTrigger.buff_logical_biedong = 13;
BuffTrigger.buff_logical_change_skill = 14;
BuffTrigger.buff_logical_add_skill = 15;
BuffTrigger.buff_logical_chaofeng = 16;
BuffTrigger.buff_logical_safe = 19;
BuffTrigger.buff_logical_safe_all = 20;
BuffTrigger.buffTypeToBit = {4=1, 5=2, 6=4, 7=8, 8=16, 19=512, 20=1024};
BuffTrigger._hasInit = false;
function BuffTrigger.init()
  if BuffTrigger._hasInit then
    return
  end
  BuffTrigger._hasInit = true
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  BuffTrigger.safeBuffBit = BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_safe]
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  BuffTrigger.safeByAllBuffBit = BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_safe_all]
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  BuffTrigger.forceCtrlBuffBit = BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_bingdong] | BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_xuanyun] | BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_jifei] | BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_jitui] | BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_chaofeng]
  -- [ts2lua]BuffTrigger.buffTypeToBit下标访问可能不正确
  BuffTrigger.ctrlBuffBit = BuffTrigger.forceCtrlBuffBit & BuffTrigger.buffTypeToBit[BuffTrigger.buff_logical_chenmo]
end

function BuffTrigger.setOneBuff(attacker, defer, skillAction, buff)
  local logicType = buff.logicType
  -- [ts2lua]BuffTrigger下标访问可能不正确
  local func = BuffTrigger["runBuff_" .. logicType]
  if defer.hp <= 0 then
    return
  end
  if defer.invincibleNum > 0 and buff.type == BattleConst.buff_jianyi then
    return
  end
  if BuffTrigger.checkMianyiBuff(defer, buff) then
    return
  end
  local oldBuff = defer:getBuffById(buff._id)
  local targetLayerNumer = 1
  if oldBuff then
    local maxLayer = buff:getMaxLayer()
    if maxLayer == -1 then
      maxLayer = 9999
    end
    if maxLayer > 0 then
      targetLayerNumer = oldBuff.layerNums + buff.layerNums
      if targetLayerNumer > maxLayer then
        targetLayerNumer = maxLayer
      end
      buff.layerNums = targetLayerNumer
      defer:clearOneBuff(oldBuff, BattleConst.buff_remove_cover)
    elseif maxLayer == -2 then
      defer:refreshBuffTimeById(buff._id)
    end
  end
  defer:insterOneBuff(buff)
end

function BuffTrigger.checkMianyiBuff(defer, buff)
  return false
end

function BuffTrigger.runOneBuffEffect(attacker, defer, skillAction, buff)
  local logicType = buff.logicType
  -- [ts2lua]BuffTrigger下标访问可能不正确
  local func = BuffTrigger["runBuff_" .. logicType]
  ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_beUsedBuff, defer, BattleFunc.emptyArr, buff.skillAction, buff)
  local tempArr = BattleFunc.getOneTempArr()
  table.insert(tempArr, defer)
  ConditionTrigger.onOpportunityByInstance(ConditionTrigger.opportunity_buffUsed, attacker, tempArr, buff.skillAction, buff)
  BattleFunc.cacheOneTempArr(tempArr)
  if not func then
    LogsManager.errorTag("buffError", "没有对应的buff效果类型:", logicType)
  else
    func:call(BuffTrigger, attacker, defer, skillAction, buff)
  end
end

function BuffTrigger.runBuff_1(attacker, defer, skillAction, buff)
  BattleFormulaTrigger.damage(attacker, defer, skillAction, buff.skillLogicalParams[0+1][0+1], buff.skillLogicalParams[0+1][1+1], buff)
end

function BuffTrigger.runBuff_2(attacker, defer, skillAction, buff)
  local params = buff.skillLogicalParams
  local tb = {}
  local i = 0
  repeat
    local tempInfo = params[i+1]
    local attrId = tempInfo[0+1]
    local value = BuffTrigger.getValueByFrom(attacker, defer, tempInfo[2+1], tempInfo[3+1], tempInfo[4+1]) + tempInfo[1+1]
    value = value * buff.layerNums or 1
    -- [ts2lua]tb下标访问可能不正确
    tb[attrId] = value
    defer.attrData:updateOneAttr(attrId, value, 0, defer.attrData.extraAttr)
    i=i+1
  until not(i < #params)
  table.insert(defer.buffAttrInfo, {buff=buff, attr=tb})
end

function BuffTrigger.runBuff_3(attacker, defer, skillAction, buff)
  LogsManager.warn("暂时废弃的buff生效类型3,buffid:", buff._id)
end

function BuffTrigger.runBuff_4(attacker, defer, skillAction, buff)
  defer:initStand()
  defer:playAction(BattleConst.LABEL_IDLE, true)
  defer:interruptSkill(attacker)
end

function BuffTrigger.runBuff_5(attacker, defer, skillAction, buff)
  defer:changeViewPauseValue(1)
  defer:initStand()
  defer:interruptSkill(attacker)
end

function BuffTrigger.runBuff_6(attacker, defer, skillAction, buff)
  local localParams = buff.skillLogicalParams
  local frame = Number(localParams[0+1][1+1])
  frame = BattleFunc.instance:turnMinisecondToframe(frame)
  defer:interruptSkill(attacker)
  defer:onHitedBack(attacker, localParams[0+1][0+1], localParams[0+1][2+1] or 0, frame)
  defer.controler:setCallBack(frame, defer.clearOneBuff, defer, buff)
end

function BuffTrigger.runBuff_7(attacker, defer, skillAction, buff)
  local params = buff.skillLogicalParams[0+1]
  defer:onBeHitFly(params, attacker)
end

function BuffTrigger.runBuff_8(attacker, defer, skillAction, buff) end
function BuffTrigger.runBuff_9(attacker, defer, skillAction, buff)
  local value = buff.skillLogicalParams[0+1][0+1]
  defer:changeEnergy(value)
end

function BuffTrigger.runBuff_10(attacker, defer, skillAction, buff)
  local value = 0
  local params = buff.skillLogicalParams[0+1]
  value = BuffTrigger.getValueByFrom(attacker, defer, params[1+1], params[2+1], params[3+1])
  value = value + params[0+1]
  BattleLogsManager.debugByRole(attacker.dataId, "获得护盾值:", value, "技能效果id:", skillAction.skillEffectId)
  table.insert(defer.shieldInfoArr, {value=value, buff=buff})
end

function BuffTrigger.runBuff_11(attacker, defer, skillAction, buff)
  defer.invincibleNum=defer.invincibleNum+1
  BattleLogsManager.debugByRole(attacker.dataId, attacker.dataId .. "给" .. defer.dataId .. "添加无敌效果")
end

function BuffTrigger.runBuff_12(attacker, defer, skillAction, buff) end
function BuffTrigger.runBuff_13(attacker, defer, skillAction, buff)
  local arr = buff.skillLogicalParams
  local i = 0
  repeat
    local passiveId = String(arr[i+1][0+1])
    local level = skillAction.skill.level
    local passiveSkill = attacker.controler:createPassiveSkill(passiveId, level, defer, buff.skillAction.relyonSkill or buff.skillAction.skill)
    table.insert(attacker.passiveSkills, passiveSkill)
    passiveSkill.fromValue = buff
    i=i+1
  until not(i < #arr)
end

function BuffTrigger.runBuff_14(attacker, defer, skillAction, buff) end
function BuffTrigger.runBuff_15(attacker, defer, skillAction, buff)
  local params = buff.skillLogicalParams
  local i = 0
  repeat
    local tempArr = params[i+1]
    local id = tempArr[0+1]
    local value = tempArr[1+1]
    defer:setSkillSpeedUpValue(id, value)
    i=i+1
  until not(i < #params)
end

function BuffTrigger.runBuff_16(attacker, defer, skillAction, buff)
  defer.beTauntTargetInfo.target = attacker
  defer.beTauntTargetInfo.buff = buff
end

function BuffTrigger.runBuff_17(attacker, defer, skillAction, buff)
  local skill = skillAction.skill
  local tempArr = buff.skillLogicalParams
  local i = 0
  repeat
    local tempInfo = tempArr[i+1]
    local id = tempInfo[0+1]
    local act = skill:getActionById(id)
    local useSkill = skill
    act = SkillActionData(id, skill.owner, useSkill, 0, 1, 1, 0, 0, skillAction.relyonSkill)
    defer:checkSkillEffect(act)
    i=i+1
  until not(i < #tempArr)
end

function BuffTrigger.runBuff_18(attacker, defer, skillAction, buff)
  local value = 0
  local params = buff.skillLogicalParams[0+1]
  value = BuffTrigger.getValueByFrom(attacker, defer, params[1+1], params[2+1], params[3+1])
  value = value + params[0+1]
  local tempArr = BattleFunc.getOneTempArr()
  tempArr[0+1] = BattleConst.damage_normal
  tempArr[1+1] = value
  defer:onBeTrit(attacker, skillAction.skill, skillAction, tempArr)
  BattleFunc.cacheOneTempArr(tempArr)
end

function BuffTrigger.runBuff_19(attacker, defer, skillAction, buff) end
function BuffTrigger.runBuff_20(attacker, defer, skillAction, buff) end
function BuffTrigger.getValueByFrom(attacker, defer, percentValue, fromType, attrId)
  local value = nil
  if not fromType then
    return 0
  end
  if fromType == 1 then
    value = percentValue / 10000 * attacker.attrData:getOneAttr(attrId)
  elseif fromType == 2 then
    value = percentValue / 10000 * defer.attrData:getOneAttr(attrId)
  elseif fromType == 3 then
    if defer.tempUseValue then
      if defer.tempUseValue[1+1] then
        value = Number(defer.tempUseValue[1+1])
        if not value then
          value = 0
        else
          value = value * percentValue / 10000
        end
      else
        value = 0
      end
    else
      value = 0
    end
  elseif fromType == 4 then
    value = percentValue / 10000 * defer.attrData:getOneAttr(attrId)
  end
  return Math:floor(value)
end

function BuffTrigger.onClearBuff(defer, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  local logicalType = buff.logicType
  -- [ts2lua]BuffTrigger下标访问可能不正确
  local func = BuffTrigger["clearBuff_" .. logicalType]
  if not func then
    return
  end
  func:call(BuffTrigger, buff.onwer, defer, buff.skillAction, buff)
end

function BuffTrigger.clearBuff_1(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_2(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  local i = #defer.buffAttrInfo - 1
  repeat
    local info = defer.buffAttrInfo[i+1]
    if info.buff == buff then
      local attr = info.attr
      for s in pairs(attr) do
        defer.attrData:updateOneAttr(s, -attr[s+1], 0, defer.attrData.extraAttr)
      end
      defer.buffAttrInfo:splice(i, 1)
    end
    i=i-1
  until not(i >= 0)
end

function BuffTrigger.clearBuff_3(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_4(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_5(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  defer:changeViewPauseValue(-1)
  defer:resumeIdleAction()
end

function BuffTrigger.clearBuff_6(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_7(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_8(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_9(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_10(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  local arr = defer.shieldInfoArr
  if #arr > 0 then
    local i = #arr - 1
    repeat
      local info = arr[i+1]
      if info.buff == buff then
        arr:splice(i, 1)
      end
      i=i-1
    until not(i >= 0)
  end
end

function BuffTrigger.clearBuff_11(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  if defer.invincibleNum > 0 then
    defer.invincibleNum=defer.invincibleNum-1
  end
end

function BuffTrigger.clearBuff_12(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_13(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  local arr = defer.passiveSkills
  local i = #arr - 1
  repeat
    local passSkill = arr[i+1]
    if passSkill.fromValue == buff then
      arr:splice(i, 1)
      PoolTools.cacheItem(PoolCode.POOL_PASSIVE, passSkill)
    end
    i=i-1
  until not(i >= 0)
end

function BuffTrigger.clearBuff_14(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_15(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  local params = buff.skillLogicalParams
  local i = 0
  repeat
    local tempArr = params[i+1]
    local id = tempArr[0+1]
    local value = tempArr[1+1]
    defer:setSkillSpeedUpValue(id, -value)
    i=i+1
  until not(i < #params)
end

function BuffTrigger.clearBuff_16(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  defer.beTauntTargetInfo.target = nil
  defer.beTauntTargetInfo.buff = nil
end

function BuffTrigger.clearBuff_17(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_18(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_19(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end

function BuffTrigger.clearBuff_20(attacker, defer, skillAction, buff, removeChance)
  if removeChance == nil then
    removeChance=1
  end
  

end
