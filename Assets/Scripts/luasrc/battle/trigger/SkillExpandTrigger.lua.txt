SkillExpandTrigger = class('SkillExpandTrigger')
SkillExpandTrigger.EXPAND_TYLE_LINEEFFECT = "1";
function SkillExpandTrigger.onCheckExpand(instance, skill, expandParams, useArr, isFollow)
    if isFollow == nil then
        isFollow = false
    end
    if not expandParams then
        return
    end
    for i, info in ipairs(expandParams) do
        local type = info[1]
        local func = SkillExpandTrigger["skillExpand_" .. type]
        if not func then
            LogsManager.errorTag("skillExpandError", "错误的技能扩展类型:" .. type)
        else
            func(instance, skill, info, useArr, isFollow)
        end
    end
end

function SkillExpandTrigger.skillExpand_1(instance, skill, params, useArr, isFollow)
    if not useArr then
        BattleLogsManager.battleWarn("连线特效没有目标,skill:", skill._skillId)
        return
    end
    local sourceLenth = tonumber(params[14])
    local tweenTime = tonumber(params[15])
    for i, targetRole in ipairs(useArr) do
        local tempArr = table.sliceArray(params, 1, 13)
        local expandPams = { type = params[1], length = tonumber(sourceLenth), frame = math.floor(tweenTime * BattleFunc.miniSecondToFrame), role = targetRole }
        instance:createOneEffByParam(tempArr, isFollow, false, expandPams)
    end
end

function SkillExpandTrigger.skillExpand_2(instance, skill, params, useArr)
    local delayTime = tonumber(params[2])
    if delayTime > 0 then
        delayTime = BattleFunc.getInstance():turnMinisecondToframe(delayTime)
        instance.controler:setCallBack(delayTime, instance.controler.cameraControler.shakeCameraByParams, instance.controler.cameraControler, params)
    else
        instance.controler.cameraControler:shakeCameraByParams(params)
    end
end

function SkillExpandTrigger.skillExpand_3(instance, skill, params, useArr)
    local sound = params[4]
    local delayTime = tonumber(params[2])
    if delayTime > 0 then
        delayTime = BattleFunc.getInstance():turnMinisecondToframe(delayTime)
    end
    instance.controler:setCallBack(delayTime, instance.controler.playSoundByParams, instance.controler, params)
end

function SkillExpandTrigger.skillExpand_4(instance, skill, params, useArr)
    local view = instance:getView()
    for i, slotName in ipairs(params) do
        view:showOrHideSlot(slotName, false)
    end
end

function SkillExpandTrigger.skillExpand_5(instance, skill, params, useArr)
    local name = params[2]
    local continueTime = tonumber(params[3])
    local scaleRate = tonumber(params[4]) / 10000
    --instance.controler.battleUI:freshSkillTipGroup(name, continueTime, scaleRate)
end

function SkillExpandTrigger.skillExpand_6(instance, skill, params, useArr)
    if SwitchModel.getInstance():getSwitchByType(SwitchModel.shake_switch) then
        return
    end
    local shakeNums = tonumber(params[2])
    --@xd_test 屏蔽震动接口
    --UserInfo.platform:vibrateByCount(shakeNums)
end

function SkillExpandTrigger.skillExpand_7(instance, skill, params, useArr)
    if #useArr == 0 then
        return
    end
    for i, targetInstance in ipairs(useArr) do
        local frame = tonumber(params[4])
        local delayTime = tonumber(params[2])
        local ratio = tonumber(params[7])
        if #params < 7 then
            LogsManager.errorTag("battleCfgsError", "受击抖动配置长度错误,skillId:" .. skill._skillId)
        end
        if targetInstance:checkCanMove() and (ratio >= 10000 or RandomUtis.getOneRandomInt(10000, 0, BattleFunc.battleRandomIndex) < ratio) then
            local tempParams = params
            local dx = targetInstance.pos.x - instance.pos.x
            if dx < 0 then
                tempParams = TableUtils.copyOneArr(params)
                tempParams[5] = -tonumber(tempParams[5])
            end
            if delayTime > 0 then
                delayTime = BattleFunc.getInstance():turnMinisecondToframe(delayTime)
                targetInstance.controler:setCallBack(delayTime, instance.shakeCameraByParams, targetInstance, tempParams)
            else
                targetInstance:shakeCameraByParams(tempParams)
            end
        end
        targetInstance:setShakeParams(frame, tonumber(params[3]), tonumber(params[5]), tonumber(params[6]))
    end
end
