ChooseTrigger = class('ChooseTrigger')
function ChooseTrigger.chooseNearRole(targetRole, instanceArr)
    local resultRole = nil
    local targetDis = 0
    local i = 0
    for i, role2 in ipairs(instanceArr) do
        local dis = math.abs(role2.pos.x - targetRole.pos.x)
        if not resultRole then
            resultRole = role2
            targetDis = dis
        else
            if dis < targetDis then
                resultRole = role2
                targetDis = dis
            end
        end
    end
    return resultRole
end

function ChooseTrigger.chooseAbsNearRole(targetInstance, instanceArr, excludeArr, extraDis)
    if extraDis == nil then
        extraDis = 0
    end
    local resultRole = nil
    local targetDis = 0
    local i = 0
    for i, role2 in ipairs(instanceArr) do
        if excludeArr and table.findArrValue(excludeArr, role2) ~= -1 then
            break
        end
        local dis = ChooseTrigger.getPowerDis(role2.pos, targetInstance.pos)
        if not resultRole then
            resultRole = role2
            targetDis = dis
        else
            if dis < targetDis then
                resultRole = role2
                targetDis = dis
            end
        end
        if extraDis and targetDis > extraDis * extraDis then
            resultRole = nil
        end
    end
    return resultRole
end

function ChooseTrigger.getRoleByType(targetRole, type, compareValue, out)
    if type == 1 then
        table.insert(out, targetRole)
    elseif type == 2 then
        local campArr = targetRole.campArr
        for i, v in ipairs(campArr) do
            table.insert(out, v)
        end
    elseif type == 3 or type == 4 then
        if type == 3 then
            compareValue = BattleConst.POSTYPE_QIANPAI
        else
            compareValue = BattleConst.POSTYPE_HOUPAI
        end
        local campArr = targetRole.campArr
        for i, instance in ipairs(campArr) do
            if instance.posType == compareValue then
                table.insert(out, instance)
            end
        end
    elseif type == 5 then
        local campArr = targetRole.campArr
        local i = 0
        for i, instance in ipairs(campArr) do
            if instance.dataId == compareValue then
                table.insert(out, instance)
            end
        end
    end
    return out
end

function ChooseTrigger.getPowerDis(p1, p2)
    local dx = p1.x - p2.x
    local dz = p1.z - p2.z
    return dx * dx + dz * dz
end

function ChooseTrigger.chooseSkillToOut(targetRole, out)
    local skill = nil
    local tempArr = nil
    out[1] = -2
    if (targetRole.isAutoSKill and targetRole.energy == targetRole.maxEnergy) and targetRole.energySkill then
        skill = targetRole.energySkill
        tempArr = ChooseTrigger._initSkillChoose(targetRole, skill)
        if #tempArr > 0 then
            out[1] = 0
            out[2] = skill
            return
        else
            out[1] = -1
            out[2] = skill
        end
    end
    if targetRole.ctrlBuffBit & BuffTrigger.buff_logical_chenmo > 0 then
        BattleLogsManager.battleEcho("id:", targetRole.dataId, "_被沉默了.释放普攻")
        skill = targetRole.normalSkills[#targetRole.normalSkills]
        tempArr = ChooseTrigger._initSkillChoose(targetRole, skill)
        if #tempArr > 0 then
            out[1] = 0
            out[2] = skill
            return
        end
    end
    local i = 0

        for i, skill in ipairs(targetRole.normalSkills) do
        if skill.isActive and skill.leftSkillCd <= 0 then
            tempArr = ChooseTrigger._initSkillChoose(targetRole, skill)
            if #tempArr > 0 then
                out[1] = 0
                out[2] = skill
                return skill
            else
                out[1] = -1
                out[2] = skill
            end
        end
    end
    if out[1] == -2 then
        out[1] = -1
        out[2] = targetRole.normalSkills[#targetRole.normalSkills ]
        ChooseTrigger._initSkillChoose(targetRole, out[2])
    end
    return
end

function ChooseTrigger.getIsCanUseSkill(targetRole, skill, out)
    local tempArr = {}
    if skill.isActive and skill.leftSkillCd <= 0 then
        tempArr = ChooseTrigger._initSkillChoose(targetRole, skill)
        if #tempArr > 0 then
            out[1] = 0
            out[2] = skill
        else
            out[1] = -1
            out[2] = skill
        end
    end
end

function ChooseTrigger._initSkillChoose(targetRole, skill)
    local tempArr = skill.tempChooseArr
    table.clearArray(tempArr)
    ChooseTrigger.getSkillTargetRole(targetRole, skill, skill.chooseTartgetCfg, tempArr)
    return tempArr
end

ChooseTrigger.RANGE_CIRCLE = 1;
ChooseTrigger.RANGE_RECT = 2;
ChooseTrigger.RANGE_SECTOR = 3;
ChooseTrigger.RANGE_FULLSCREEN = 4;
ChooseTrigger.choose_self = 0;
ChooseTrigger.choose_selfcamp = 1;
ChooseTrigger.choose_tocamp = 2;
ChooseTrigger.choose_summoned = 3;
ChooseTrigger.choose_campoutself = 4;
ChooseTrigger.choose_hitself = 5;
ChooseTrigger.choose_campwithdied = 11;
function ChooseTrigger.getSkillTargetRole(instance, skill, targetData, out, usedDisInstance, soucePos, outArea)
    if outArea == nil then       outArea = false    end
    local rangeType = targetData.targetRange
    local chooseType = targetData.targetGroup
    local targetArr = nil
    if not usedDisInstance then
        usedDisInstance = instance
    end
    local tempArr = nil
    local targetNumber = targetData.targetNumber
    table.clearArray(out)
    if chooseType == ChooseTrigger.choose_self then
        table.insert(out, instance)
        return out
    elseif chooseType == ChooseTrigger.choose_selfcamp then
        targetArr = instance.campArr
    elseif chooseType == ChooseTrigger.choose_tocamp then
        targetArr = instance.toCampArr
        local betauntTarget = instance.beTauntTargetInfo.target
        if betauntTarget then
            if betauntTarget.hp == 0 then
                if instance.beTauntTargetInfo.buff then
                    instance:clearOneBuff(instance.beTauntTargetInfo.buff)
                end
            else
                if targetNumber == 1 then
                    tempArr = BattleFunc.getOneTempArr()
                    table.insert(tempArr, betauntTarget)
                    targetArr = tempArr
                end
            end
        end
    elseif chooseType == ChooseTrigger.choose_campoutself then
        tempArr = BattleFunc.getOneTempArr()
        local i = 0
        for i, tempInstance in ipairs(instance.tempArr) do
            if tempInstance ~= instance then
                table.insert(tempArr, tempInstance)
            end
        end
        targetArr = tempArr
    elseif chooseType == ChooseTrigger.choose_campwithdied then
        tempArr = BattleFunc.getOneTempArr()
        if #instance.diedArr > 0 then
            for i, tempInstance in ipairs(instance.campArr) do
                table.insert(tempArr, tempInstance)
            end
            for i, tempInstance in ipairs(instance.diedArr) do
                table.insert(tempArr, tempInstance)
            end
            targetArr = tempArr
        else
            targetArr = instance.campArr
        end
    elseif chooseType == ChooseTrigger.choose_hitself then
        tempArr = BattleFunc.getOneTempArr()
        if instance.tempBeUsedValue and instance.tempBeUsedValue[3] then
            table.insert(tempArr, instance.tempBeUsedValue[3])
        end
        targetArr = tempArr
    end
    if not soucePos then
        soucePos = instance.pos
    end
    local rangeParams = targetData.rangeParams
    if not outArea then
        if rangeType == ChooseTrigger.RANGE_CIRCLE or rangeType == ChooseTrigger.RANGE_SECTOR then
            ChooseTrigger.chooseRoleByCircle(usedDisInstance, rangeParams[1], rangeParams[2], rangeParams[3], targetArr, -1, out, nil, rangeParams[4] or 360, soucePos)
        elseif rangeType == ChooseTrigger.RANGE_RECT then
            ChooseTrigger.chooseRoleByRect(usedDisInstance, rangeParams[1], rangeParams[2], rangeParams[3], rangeParams[4], targetArr, -1, out, nil, soucePos)
        elseif rangeType == ChooseTrigger.RANGE_FULLSCREEN then
            if targetArr then
                TableUtils.insertAtoB(targetArr,out)
            end
        else
            TableUtils.insertAtoB(targetArr,out)
        end
    else
        TableUtils.insertAtoB(targetArr,out)
    end
    ChooseTrigger.initArrpriority(out)
    ChooseTrigger.excludeUnChooseRole(instance, out)
    if #out > 0 then
        if targetData.targetType then
            ChooseTrigger.chooseByTargetType(out, targetData.targetType)
        end
        if targetData.targetChoose then
            local chooseCondArr = targetData.targetChoose
            local i = 0
            for i, v in ipairs(chooseCondArr) do
                local func = ChooseTrigger["chooseRoleBy_" .. v]
                if not func then
                    LogsManager.errorTag("cfgerror", "battle 没有对应的选择类型,targetId:", targetData.id, "targetChoose:", i)
                else
                    func(instance, out)
                end
            end
        end
        if outArea then
            ChooseTrigger.chooseRoleBy_7(instance, out)
        end
        if targetNumber > 0 and targetNumber < #out then
            table.spliceArray(out, targetNumber + 1, #out)
        end
    end
    if tempArr then
        BattleFunc.cacheOneTempArr(tempArr)
    end
    return out
end

function ChooseTrigger.getAoeTargetRole(aoeData, attacker, targetInstance, out)
    ChooseTrigger.getSkillTargetRole(attacker, nil, aoeData.chooseTartgetCfg, out, targetInstance, aoeData._initTargtPos)
    return out
end

function ChooseTrigger.chooseByTargetType(useArr, targetType)
    local len = #useArr
    for i = len, 1,-1 do
        local role = useArr[i]
        role.tempSortValue = 100
        for s, tempInfo in ipairs(targetType) do
            if role.lifeType == tonumber(tempInfo[1]) then
                local tempPri = tonumber(tempInfo[2])
                if tempPri == -1 then
                    table.spliceArray(useArr, i, 1)
                else
                    role.tempSortValue = tempPri
                end
                break
            end
        end
        role.tempSortPriority = role.tempSortValue
    end
    table.sort( useArr,ChooseTrigger.sortByTmepValueAdd)
    return useArr
end

function ChooseTrigger.chooseRoleByCircle(instance, r, x, z, targetArr, chooseNums, out, excludeArr, ang, soucePos)
    if ang == nil then
        ang = 0
    end
    table.clearArray(out)
    if not ang then
        ang = 360
    end
    local useSourcePos = false
    if not soucePos then
        soucePos = instance.pos
    else
        useSourcePos = true
    end
    x = soucePos.x + x * instance._viewWay
    z = z + soucePos.z
    local y = instance.pos.y
    if instance.initOffsetY then
        y = y - instance.initOffsetY
    end
    if chooseNums == -1 then
        chooseNums = 9999
    end
    local spdx = instance.speed.x
    local spdy = instance.speed.y
    local spdz = instance.speed.z
    if useSourcePos then
        spdx = 0
        spdz = 0
    end
    local radArea = nil
    local spdAbs = math.sqrt(spdx * spdx + spdy * spdy + spdz * spdz)
    local powr = (r + spdAbs) * (r + spdAbs)
    if ang < 360 then
        radArea = ang * BattleFunc.angletoRad / 2
    end
    local i = 0
    for i, targetInstance in ipairs(targetArr) do
        if excludeArr and table.findArrValue(excludeArr, targetInstance) ~= -1 then
            break
        end
        local disx = targetInstance.pos.x - x
        local disy = targetInstance.pos.y - y
        local disz = targetInstance.pos.z - z
        if disx * disx + disz * disz + disy * disy <= powr then
            if ang < 360 then
                local disAng = math.atan(disz, disx)
                if math.abs(disAng) > radArea then
                    break
                end
            end
            table.insert(out, targetInstance)
            if #out == chooseNums then
                break
            end
        end
    end
    return out
end

function ChooseTrigger.chooseRoleByRect(instance, w, h, x, z, targetArr, chooseNums, out, excludeArr, soucePos)
    table.clearArray(out)
    local useSourcePos = false
    if not soucePos then
        soucePos = instance.pos
    else
        useSourcePos = true
    end
    x = soucePos.x + x * instance._viewWay
    z = soucePos.z
    local y = instance.pos.y
    if instance.initOffsetY then
        y = y - instance.initOffsetY
    end
    if chooseNums == -1 then
        chooseNums = 9999
    end
    local halfw = w / 2
    local halfh = h / 2
    local spdx = instance.speed.x
    local spdy = instance.speed.y
    local spdz = instance.speed.z
    if useSourcePos then
        spdx = 0
        spdz = 0
    end
    local i = 0
    for i, targetInstance in ipairs(targetArr) do
        if excludeArr and table.findArrValue(excludeArr, targetInstance) ~= -1 then
            break
        end
        local disSpdx = math.abs(targetInstance.speed.x - spdx)
        local disSpdz = math.abs(targetInstance.speed.z - spdz)
        local disSpdy = math.abs(targetInstance.speed.y - spdy)
        local disx = math.abs(targetInstance.pos.x - x)
        local disz = math.abs(targetInstance.pos.z - z)
        local disy = math.abs(targetInstance.pos.y - y)
        if (disx <= halfw + disSpdx and disz <= halfh + disSpdz) and disy <= h + disSpdy then
            table.insert(out, targetInstance)
            if #out == chooseNums then
                break
            end
        end
    end
    return out
end

function ChooseTrigger.getRoleByFormation(formation, campArr)
    for i, ins in ipairs(campArr) do
        if ins.formationId == formation then
            return ins
        end
    end
    return nil
end

function ChooseTrigger.getPlayerById(id, campArr)
    for i, ins in ipairs(campArr) do
        if ins.dataId == id and ins.lifeType == BattleConst.LIFE_PLAYER then
            return ins
        end
    end
    return nil
end

function ChooseTrigger.checkCanChoose(attacker, defer)
    local targetBit = defer.ctrlBuffBit
    if targetBit & BuffTrigger.safeByAllBuffBit > 0 then
        return false
    elseif targetBit & BuffTrigger.safeBuffBit > 0 and defer.camp ~= attacker.camp then
        return false
    end
    return true
end

function ChooseTrigger.excludeUnChooseRole(attacker, targetArr)
    if #targetArr == 0 then
        return
    end
    local len = #targetArr
    for i = len, 1,-1 do
        local targetRole = targetArr[i ]
        if not ChooseTrigger.checkCanChoose(attacker, targetRole) then
            table.spliceArray(targetArr, i, 1)
        end
    end
end

function ChooseTrigger.chooseRoleBy_1(attacker, useArr, chooseNums)
    return useArr
end

function ChooseTrigger.chooseRoleBy_2(attacker, useArr)
    for i, instance in ipairs(useArr) do
        instance.tempSortValue = RandomUtis.getUintRandom(BattleFunc.battleRandomIndex)
    end
    table.sort(useArr,ChooseTrigger.sortByTmepValueAdd)
    return useArr
end

function ChooseTrigger.chooseRoleBy_3(attacker, useArr)
    table.sort(useArr,ChooseTrigger.sortByHpAdd)
    return useArr
end

function ChooseTrigger.chooseRoleBy_4(attacker, useArr)
    table.sort(useArr,ChooseTrigger.sortByHpReduce)
    return useArr
end

function ChooseTrigger.chooseRoleBy_5(attacker, useArr)
    ChooseTrigger.comparePos = attacker.pos
    table.sort(useArr,ChooseTrigger.sortByFrontFormation)
    return useArr
end

function ChooseTrigger.initArrpriority(useArr)
    local i = 0
    for i, v in ipairs(useArr) do
        v.tempSortPriority = 100
    end
end

function ChooseTrigger.chooseRoleBy_6(attacker, useArr)
    ChooseTrigger.comparePos = attacker.pos
    table.sort(useArr,ChooseTrigger.sortByBackFormation)
    return useArr
end

function ChooseTrigger.chooseRoleBy_7(attacker, useArr)
    for i, role2  in ipairs(useArr) do
        local dx = role2.pos.x - attacker.pos.x
        local dz = role2.pos.z - attacker.pos.z
        role2.tempSortValue = dx * dx + dz * dz
    end
    table.sort(useArr,ChooseTrigger.sortByTmepValueAdd)
    return useArr
end

function ChooseTrigger.chooseRoleBy_8(attacker, useArr)
    for i, role2 in ipairs(useArr) do
        local dx = role2.pos.x - attacker.pos.x
        local dz = role2.pos.z - attacker.pos.z
        role2.tempSortValue = dx * dx + dz * dz
    end
    table.sort(useArr,ChooseTrigger.sortByTmepValueReduce)
    return useArr
end

function ChooseTrigger.chooseRoleBy_9(attacker, useArr)
    for i, instance in ipairs(useArr) do
        if instance.hp > 0 then
            instance.tempSortPriority = instance.tempSortPriority + 1
        end
    end
    table.sort(useArr,ChooseTrigger.sortByPriority)
    return useArr
end

function ChooseTrigger.chooseRoleBy_10(attacker, useArr)
    table.sort(useArr,ChooseTrigger.sortByHpReducePercent)
    return useArr
end

function ChooseTrigger.chooseRoleBy_11(attacker, useArr)
    table.sort(useArr,ChooseTrigger.sortByHpAddPercent)
    return useArr
end

function ChooseTrigger.getTargetRoleByBuff(def, buffData, outArr)
    ChooseTrigger.getSkillTargetRole(def, nil, buffData.chooseTartgetCfg, outArr)
    return outArr
end

function ChooseTrigger.sortByPriority(r1, r2)
    return r1.tempSortPriority - r2.tempSortPriority  < 0 and true or false
end

function ChooseTrigger.sortByHpAdd(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        if r1.hp > r2.hp then
            return false
        elseif r1.hp == r2.hp then
            return false
        else
            return true
        end
    end
    return disPri  < 0 and true or false
end

function ChooseTrigger.sortByHpReduce(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        if r1.hp > r2.hp then
            return true
        elseif r1.hp == r2.hp then
            return false
        else
            return false
        end
    end
    return disPri  < 0 and true or false
end

function ChooseTrigger.sortByHpReducePercent(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        if r1.hpPercent > r2.hpPercent then
            return true
        elseif r1.hpPercent == r2.hpPercent then
            return false
        else
            return false
        end
    end
    return disPri  > 0 and true or false
end

function ChooseTrigger.sortByHpAddPercent(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        if r1.hpPercent > r2.hpPercent then
            return false
        elseif r1.hpPercent == r2.hpPercent then
            return false
        else
            return true
        end
    end
    return disPri  < 0 and true or false
end

function ChooseTrigger.sortByFrontFormation(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        local disPos = r1.posType - r2.posType
        if disPos == 0 then
            local dis1 = ChooseTrigger.getPowerDis(r1.pos, ChooseTrigger.comparePos)
            local dis2 = ChooseTrigger.getPowerDis(r2.pos, ChooseTrigger.comparePos)
            return dis1 - dis2
        else
            return disPos < 0 and true or false
        end
    end
    return disPri < 0 and true or false
end

function ChooseTrigger.sortByBackFormation(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        local disPos = r2.posType - r1.posType
        if disPos == 0 then
            local dis1 = ChooseTrigger.getPowerDis(r1.pos, ChooseTrigger.comparePos)
            local dis2 = ChooseTrigger.getPowerDis(r2.pos, ChooseTrigger.comparePos)
            return dis1 - dis2 < 0 and true or false
        else
            return disPos < 0 and true or false
        end
    end
    return disPri < 0 and true or false
end

function ChooseTrigger.sortByTmepValueAdd(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        return r1.tempSortValue - r2.tempSortValue < 0 and true or false
    end
    return disPri < 0 and true or false
end

function ChooseTrigger.sortByTmepValueReduce(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        return r2.tempSortValue - r1.tempSortValue  > 0 and true or false
    end
    return disPri   < 0 and true or false
end

function ChooseTrigger.sortByRandom(r1, r2)
    local disPri = r1.tempSortPriority - r2.tempSortPriority
    if disPri == 0 then
        local random = RandomUtis.getOneRandom(BattleFunc.battleRandomIndex)
        return random - 0.5 < 0 and true or false
    end
    return disPri < 0 and true or false
end
