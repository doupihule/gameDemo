ConditionTrigger = class('ConditionTrigger')
ConditionTrigger.opportunity_refreshMonster = 1;
ConditionTrigger.opportunity_startBattle = 2;
ConditionTrigger.opportunity_onRoleDied = 3;
ConditionTrigger.opportunity_giveSkill = 4;
ConditionTrigger.opportunity_createAction = 5;
ConditionTrigger.opportunity_action_usedBefore = 6;
ConditionTrigger.opportunity_action_usedAfter = 8;
ConditionTrigger.opportunity_buffUsed = 7;
ConditionTrigger.opportunity_ownerbuffRemoved = 9;
ConditionTrigger.opportunity_relive = 10;
ConditionTrigger.opportunity_onDied = 11;
ConditionTrigger.opportunity_offskill = 12;
ConditionTrigger.opportunity_checkDmgBefore = 13;
ConditionTrigger.opportunity_addhp = 14;
ConditionTrigger.opportunity_getbuff = 15;
ConditionTrigger.opportunity_checkDmgAfter = 18;
ConditionTrigger.opportunity_createMySelf = 19;
ConditionTrigger.opportunity_beUsedBuff = 16;
ConditionTrigger.opportunity_usedbuffRmoved = 17;
function ConditionTrigger.onOpportunityByInstance(opportunity, selfInstance, p1, p2, p3, p4)
    local passiveSkills = selfInstance.passiveSkills
    local rtValue = 0
    if passiveSkills then
        local i = 0
        for i, passive in ipairs(passiveSkills) do
            if not passive.isActive then
                break
            end
            if passive.leftSkillCd ~= 0 then
                break
            end
            if passive.cfgData.opportunity == opportunity then
                if ConditionTrigger.checkOneOpportunity(selfInstance, passive, passive.cfgData.condition, p1, p2, p3, p4) then
                    if passive.triggerFrame ~= selfInstance.controler.updateCount then
                        passive.triggerNums = 0
                        passive.triggerFrame = selfInstance.controler.updateCount
                    end
                    passive.triggerNums = passive.triggerNums + 1
                    if passive.triggerNums >= 10 then
                        LogsManager.errorTag("passiveError", "被动技能死循环了,id:", passive._skillId, "opportunity:", opportunity)
                        break
                    end
                    local rt = PassiveSkillTrigger.runOnePassiveSkill(selfInstance, passive, p1, p2, p3, p4)
                    if type(rt) == "number" then
                        rtValue = rtValue + rt
                    end
                end
            end
        end
    end
    return rtValue
end

function ConditionTrigger.onOpportunityByArr(opportunity, campArr, p1, p2, p3, p4)
    local rtValue = 0
    local len = #campArr
    for i = len, 1, -1 do
        rtValue = rtValue + ConditionTrigger.onOpportunityByInstance(opportunity, campArr[i], p1, p2, p3, p4)
    end
    return rtValue
end

function ConditionTrigger.checkOneOpportunity(instance, skill, conditionArr, p1, p2, p3, p4)
    if not conditionArr then
        return true
    end
    for i, tempArr in ipairs(conditionArr) do
        local isAllSuccess = true
        local j = 0
        for j, condition in ipairs(tempArr) do
            local condition = ConditionTrigger.getCacheConditionData(tempArr[j], skill)
            local rt = ConditionTrigger.checkOneCondition(instance, condition, skill, p1, p2, p3, p4)
            if not rt then
                isAllSuccess = false
                break
            end
        end
        if isAllSuccess then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkOneCondition(selfInstance, condition, skill, p1, p2, p3, p4)
    local type = condition.type
    local func = ConditionTrigger["checkCondition_" .. type]
    if not func then
        LogsManager.errorTag("battleCfgError", "错误的条件类型,id:", condition._id, "type:", condition.type)
        return false
    else
        return func(selfInstance, condition, skill, p1, p2, p3, p4)
    end
end

function ConditionTrigger.checkCondition_1(selfInstance, condition, skill)
    local ratio = condition.conditionLogicalParams[1][1]
    if ratio >= 10000 then
        return true
    end
    local random = RandomUtis.getOneRandom(BattleFunc.battleRandomIndex)
    if random <= ratio / 10000 then
        return true
    end
    return false
end

function ConditionTrigger.checkCondition_2(selfInstance, condition, skill)
    local hpRatio = selfInstance.hp / selfInstance:getMaxHp() * 10000
    local rt = ConditionTrigger.compareValue(hpRatio, tonumber(condition.conditionLogicalParams[1][2]), tonumber(condition.conditionLogicalParams[1][1]))
    return rt
end

function ConditionTrigger.checkCondition_3(selfInstance, condition, skill, useArr)
    local params = condition.conditionLogicalParams
    if not useArr or #useArr == 0 then
        return false
    end
    local i = 0
    for i, targetInstance in ipairs(useArr) do
        local hpRatio = targetInstance.hp / targetInstance:getMaxHp() * 10000
        local rt = ConditionTrigger.compareValue(hpRatio, tonumber(condition.conditionLogicalParams[1][2]), tonumber(condition.conditionLogicalParams[1][2]))
        if rt then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_4(selfInstance, condition, skill, useArr)
    local params = condition.conditionLogicalParams
    if not useArr or #useArr == 0 then
        return false
    end
    for i, v in ipairs(useArr) do
        if ConditionTrigger.checkIsTargetLife(v, params) then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_5(selfInstance, condition, skill, useArr)
    if not useArr or #useArr == 0 then
        return false
    end
    for i, tempInstance in ipairs(useArr) do
        local tempResultInfo = tempInstance.tempBeUsedValue
        if tempResultInfo[1] == BattleConst.damage_baoji then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_6(selfInstance, condition, skill, useArr)
    local tempInstance = selfInstance
    local tempResultInfo = tempInstance.tempBeUsedValue
    if not tempResultInfo then
        LogsManager.errorTag("checkCondition_6", "检查是否配置条件错误.还没有判定结果,condition:", condition._id, "skill:", skill and skill._skillId or "none")
        return false
    end
    if tempResultInfo[1] == BattleConst.damage_miss then
        return true
    end
    return false
end

function ConditionTrigger.checkCondition_7(selfInstance, condition, skill, useArr)
    local targetLifeType = condition.conditionLogicalParams[1][1]
    local params = condition.conditionLogicalParams
    if not useArr or #useArr == 0 then
        return false
    end
    local i = 0
    for i, tempInstance in ipairs(useArr) do
        if tempInstance.hp <= 0 then
            if ConditionTrigger.checkIsTargetLife(tempInstance, params) then
                return true
            end
        end
    end
    return false
end

function ConditionTrigger.checkCondition_8(selfInstance, condition, skill)
    local campArr = selfInstance.campArr
    local targetId = tostring(condition.conditionLogicalParams[1][1])
    local params = condition.conditionLogicalParams[1]
    local s = 0
    for s, id in ipairs(params) do
        for i, tempInstance in ipairs(campArr) do
            if tempInstance.dataId == id then
                return true
            end
        end
    end
    return false
end

function ConditionTrigger.checkCondition_9(selfInstance, condition, skill, useArr)
    if not useArr or #useArr == 0 then
        return false
    end
    for i, v in ipairs(useArr) do
        if ConditionTrigger.checkBuffLayer(v, condition) then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_10(selfInstance, condition, skill, useArr)
    if not useArr or #useArr == 0 then
        return false
    end
    for i, v in ipairs(useArr) do
        if ConditionTrigger.checkHasBuff(v, condition) then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_11(selfInstance, condition, skill, useArr)
    if not useArr or #useArr == 0 then
        return false
    end
    for i, v in ipairs(useArr) do
        if ConditionTrigger.checkHasBuffGroup(v, condition) then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_12(selfInstance, condition, skill, useArr, skillData, buff, removeType)
    if removeType == nil then
        removeType = 1
    end
    if not useArr or #useArr == 0 then
        return false
    end
    for i, v in ipairs(useArr) do
        if ConditionTrigger.checkBuffRemove(v, condition, buff) then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_13(selfInstance, condition, skill)
    return ConditionTrigger.checkHasBuff(selfInstance, condition)
end

function ConditionTrigger.checkCondition_14(selfInstance, condition, skill)
    return ConditionTrigger.checkHasBuffGroup(selfInstance, condition)
end

function ConditionTrigger.checkCondition_15(selfInstance, condition, skill)
    return ConditionTrigger.checkBuffLayer(selfInstance, condition)
end

function ConditionTrigger.checkCondition_16(selfInstance, condition, skill, useArr, skillAction, buff, removeType)
    if removeType == nil then
        removeType = 1
    end
    return ConditionTrigger.checkBuffRemove(selfInstance, condition, buff, removeType)
end

function ConditionTrigger.checkHasBuff(targetInstance, condition)
    local arr1 = condition.conditionLogicalParams
    local i = 0
    for i, arr2 in ipairs(arr1) do
        local buff = targetInstance:getBuffById(arr2[1])
        if buff then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkHasBuffGroup(targetInstance, condition)
    local arr1 = condition.conditionLogicalParams
    local i = 0
    for i, arr2 in ipairs(arr1) do
        local buff = targetInstance:getBuffByGroup(arr2[1])
        if buff then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkBuffLayer(targetInstance, condition)
    local arr1 = condition.conditionLogicalParams
    local i = 0
    for i, tempArr in ipairs(arr1) do
        local buff = targetInstance:getBuffById(tostring(tempArr[1]))
        if buff then
            local rt = ConditionTrigger.compareValue(buff.layerNums, tempArr[3], tempArr[2])
            if rt then
                return rt
            end
        end
    end
    return false
end

function ConditionTrigger.checkBuffRemove(instance, condition, buff, removeType)
    if removeType == nil then
        removeType = 1
    end
    local arr1 = condition.conditionLogicalParams
    local i = 0
    for i, tempArr in ipairs(arr1) do
        if buff._id == tostring(tempArr[1]) then
            if not removeType or removeType == 1 then
                return true
            end
        end
    end
    return false
end

function ConditionTrigger.checkCondition_17(selfInstance, condition, skill, useArr, skillAction, diedInstance)
    for i, tempParams in ipairs(condition.conditionLogicalParams) do
        local campType = tempParams[1]
        local lifetype = tempParams[1]
        if lifetype == diedInstance.lifeType then
            if campType == 3 then
                return true
            elseif campType == 2 then
                if diedInstance.camp ~= selfInstance.camp then
                    return true
                end
            else
                if diedInstance.camp == selfInstance.camp then
                    return true
                end
            end
        end
    end
    return false
end

function ConditionTrigger.checkCondition_18(selfInstance, condition, skill, useArr, skillAction)
    local arr1 = condition.conditionLogicalParams
    if not skillAction.skill then
        LogsManager.errorTag("paramserror", "参数错误")
    end
    for i, tempArr in ipairs(arr1) do
        local tempSkillType = tempArr[1]
        if tempSkillType == 5 then
            return true
        elseif tempSkillType == 6 then
            if skillAction.skill._skillId == tostring(tempArr[2]) then
                return true
            end
        elseif skillAction.skill.skillType == tempSkillType then
            return true
        end
    end
    return false
end

function ConditionTrigger.checkCondition_19(selfInstance, condition, skill, useArr, targetSkillAction)
    local arr1 = condition.conditionLogicalParams
    local i = 0
    for i, tempArr in ipairs(arr1) do
        local type = tempArr[1]
        if type == 1 then
            if targetSkillAction.skillEffectId == tostring(tempArr[2]) then
                return true
            end
        elseif type == 2 then
            if targetSkillAction.cfgData.logicType == tostring(tempArr[2]) then
                return true
            end
        end
    end
end

function ConditionTrigger.checkCondition_20(selfInstance, condition, skill, useArr, targetInstance)
    local paramsArr = condition.conditionLogicalParams
    for s, params in ipairs(paramsArr) do
        local propId = tostring(params[2])
        local compareType = params[1]
        if not propId then
            LogsManager.errorTag("conditionError", "condtion配置错误,id:", condition._id);
            return false
        end
        if not useArr or #useArr == 0 then
            return false
        end
        for i, tempInstance in ipairs(useArr) do
            local value1 = nil
            local value2 = nil
            if propId == BattleConst.attr_hp then
                value1 = tempInstance.hp
                value2 = selfInstance.hp
            elseif propId == BattleConst.attr_enegry then
                value1 = tempInstance.energy
                value2 = selfInstance.energy
            else
                value1 = tempInstance.attrData:getOneAttr(propId)
                value2 = selfInstance.attrData:getOneAttr(propId)
            end
            local rt = ConditionTrigger.compareValue(value2, value1, compareType)
            if rt then
                return true
            end
        end
    end
    return false
end

function ConditionTrigger.checkCondition_21(selfInstance, condition, skill, useArr, targetInstance)
    local paramsArr = condition.conditionLogicalParams
    for s, v in ipairs(paramsArr) do
        local rid = tostring(v[2])
        local lifeType = tonumber(v[1])
        for i, targetRole in ipairs(useArr) do
            if targetRole.dataId == rid and targetRole.lifeType == lifeType then
                return true
            end
        end
    end
    return false
end

function ConditionTrigger.compareValue(value1, value2, compareType)
    local disValue = value1 - value2
    if compareType == 1 then
        return disValue > 0
    elseif compareType == 2 then
        return disValue < 0
    elseif compareType == 3 then
        return disValue == 0
    elseif compareType == 4 then
        return disValue >= 0
    elseif compareType == 5 then
        return disValue <= 0
    end
end

function ConditionTrigger.checkIsTargetLife(instance, logicalParams)
    if not logicalParams then
        return false
    end
    for i, v in ipairs(logicalParams) do
        local targetLifeType = v[1]
        if targetLifeType == 0 then
            return true
        end
        if instance.lifeType == targetLifeType then
            return true
        end
    end
    return false
end

ConditionTrigger._conditionDataCache = {};
function ConditionTrigger.getCacheConditionData(id, skill)
    local condition = ConditionTrigger._conditionDataCache[id]
    if not condition then
        ConditionTrigger._conditionDataCache[id] = BattleConditionData.new(id)
        condition = ConditionTrigger._conditionDataCache[id]
    end
    condition:setData(skill)
    return condition
end
