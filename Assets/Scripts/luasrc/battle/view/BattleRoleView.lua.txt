BattleRoleView = class('BattleRoleView',BaseContainer)

function BattleRoleView:ctor(viewName, scale, viewIndex)
    if scale == nil then
        scale = 1
    end
    if viewIndex == nil then
        viewIndex = 0
    end
    BattleRoleView.super.ctor(self)
    self.aniScale = 1;
    self._viewIndex = 0;
    self._viewScale = 1;
    self.currentViewNums = 1;
    self._xSpace = 0;
    self._ySpace = 0;
    self._useShade = false;
    self._shadeScale = 1;
    self.aniScale = scale
    self._childViewArr = {}
    local aniMode = 0
    if viewIndex > 0 then
        aniMode = 1
    end
    self._viewName = viewName
    self._aniMode = aniMode
    self._viewIndex = viewIndex
    self.currentViewNums = 1
    self._viewScale = scale
    self.currentAni = self:cloneOneChildAni()
    self:setName(viewName);
end

function BattleRoleView:setSpace(xSpace, ySpace)
    self._xSpace = xSpace
    self._ySpace = ySpace
end

function BattleRoleView:setShade(scale)
    if scale == nil then
        scale = 0
    end
    self._useShade = true
    if scale then
        self._shadeScale = scale
    end
    self:sortChildView()
end

function BattleRoleView:showOrHideShade(value)
    if not self._shadeViewArr then
        return
    end
    local i = 0
    for i, v in pairs(self._shadeViewArr) do
        v:setViewActive(value)
    end
end

function BattleRoleView:changeViewNums(value)
    self.currentViewNums = value
    if #self._childViewArr < self.currentViewNums then
        for i = 1, #self._childViewArr do
            self:cloneOneChildAni()
        end
    end
    local i = self.currentViewNums
    for i = self.currentViewNums+1,#self._childViewArr do
        self._childViewArr[i]:setViewActive(false)
        self._childViewArr[i]:stop()
    end
    self:sortChildView()
end

BattleRoleView._childSortFormation = { { { 0, 0 } }, { { -0.75, 0 }, { 0.75, 0 } }, { { 0, -1 }, { -0.75, 0 }, { 0.75, 0 } }, { { -1, -1 }, { 1, -1 }, { -1, 0 }, { 0.5, 0 } }, { { 0, -1 }, { 1, -1 }, { -1, 0.5 }, { 0, 0 }, { 1, 0 } }, { { -1, -1 }, { 0, -1 }, { 1, -1 }, { -1, 0 }, { 0, 0 }, { 1, 0 } } };
function BattleRoleView.getPosArrByViewNums(viewNums)
    return BattleRoleView._childSortFormation[viewNums ]
end

function BattleRoleView:sortChildView()
    local formationArr = BattleRoleView._childSortFormation[self.currentViewNums]
    if self._useShade then
        if not self._shadeViewArr then
            self._shadeViewArr = {}
        end
    end
    for i, posArr in pairs(formationArr) do
        local view = self._childViewArr[i ]
        local x = posArr[1] * self._xSpace
        local y = posArr[2] * self._ySpace
        view:setPos(x,y )
        if self._useShade then
            local shaderView = self._shadeViewArr[i]
            if not shaderView then
                shaderView = UITools.createUIImage(ResourceConst.BATTLE_SHADE)
                shaderView:setScale(self._shadeScale, self._shadeScale)
                shaderView:setViewPivot(0.5,0.5)
                self:addChildAt(shaderView, 0)
                self._shadeViewArr[i] = shaderView
            end
            shaderView:setPos(x,y)
        end
    end
end

function BattleRoleView:cloneOneChildAni()
    local ani = DisplayUtils.createSpine(self._viewName)
    ani:setScale(self._viewScale, self._viewScale)
    table.insert(self._childViewArr, ani)
    self:addChild(ani)
    return ani
end

function BattleRoleView:setItemViewScale(scale)
    self._viewScale = scale
    self.currentAni:setScale(scale, scale)
end

function BattleRoleView:stop()
    local i = 0
    for i = 1, self.currentViewNums do
        self._childViewArr[i]:stop()
    end
end

function BattleRoleView:play(nameOrIndex, loop, force, start, tsvar_end, freshSkin, playAudio)
    local i = 0
    for i = 1, self.currentViewNums do
        self._childViewArr[i]:play(nameOrIndex, loop, force, start, tsvar_end, freshSkin, playAudio)
    end
end

function BattleRoleView:resume()
    local i = 0
    for i = 1, self.currentViewNums do
        self._childViewArr[i]:resume()
    end
end

function BattleRoleView:setPlaySpeed(value)
    local i = 0
    for i = 1, self.currentViewNums do
        local childAni = self._childViewArr[i]
        --@xd_test
        --if childAni.player then
        --    childAni.player.playbackRate = value
        --end
    end
end

function BattleRoleView:setChildViewPos(x, y)
    local i = 0
    for i = 1, self.currentViewNums do
        local childAni = self._childViewArr[i ]
        childAni:setPos(x, y)
    end
end

function BattleRoleView:showOrHideSlot(slotName, value)
    if value == nil then
        value = false
    end
    for i = 1, self.currentViewNums do
        local childAni = self._childViewArr[i]
        childAni:showOrHideSlot(slotName, value)
    end
end
