BattleDamageLabel = class('BattleDamageLabel',BaseContainer)
function BattleDamageLabel:ctor()
    BattleDamageLabel.super.ctor(self)
    self.__cobject.name = "BattleDamageLabel"
    self._childLabels = {}
end

BattleDamageLabel._labelCfgs = {
    ["normal"] = { w = 13, sw = 30, sh = 20, fuhao = "jian", name = "putong", scale = 1.5 },
    ["crit"] = { w = 15, head = 35, sw = 30, sh = 18, fuhao = "jian", name = "baoji", scale = 1.5 },
    ["trit"] = { w = 13, sw = 30, sh = 20, fuhao = "jia", name = "zhiliao", scale = 1.5 },
    ["tritCrit"] = { w = 13, sw = 30, sh = 20, fuhao = "jia", name = "zhiliao", scale = 1.8 },
    ["hudun"] = { w = 13, sw = 30, sh = 20, fuhao = "jian", name = "putong", scale = 1 },
    ["miss"] = { name = "miss" } };
function BattleDamageLabel:setValue(kind, value)
    if self._currentValue == value then
        return
    end
    self.kind = kind
    -- [ts2lua]BattleDamageLabel._labelCfgs下标访问可能不正确
    self._cfgs = BattleDamageLabel._labelCfgs[kind]
    local cfg = self._cfgs
    local scale = cfg.scale or 1
    self:setScale(scale, scale)
    self._baseUrl =    ResourceConst.UIResPath .. "txt/battle_txt_" .. self._cfgs.name
    if kind == BattleConst.effect_label_miss then
        self._headLabel = self:updateLabel("", 0, 0, self._headLabel)
        self._headLabel:setViewPivot(0.5,0.5);
    else
        if value < 1 then
            value = 1
        end
        local headWid = cfg.head or 0
        local strValue = tostring(value)
        local tempStr = strValue
        local perWid = cfg.w
        local fuhaoWid = cfg.fuhao and perWid or 0
        local nums = 6
        local numsWidth = nil
        local perSourceWid = cfg.sw
        local bigNums = 0
        local bigWid = 0
        local compareValue = "1000"
        local bigValue = nil
        if value < 100000 then
            nums = #strValue
            numsWidth = nums * perWid
            bigValue = ""
        else
            local index = 0
            local tempNum = value
            for i =1,10000 do
                index = index+1;
                tempNum = math.round( tempNum/1000);
                if(tempNum < 1000)then
                    break;
                end
            end
            local reducedUnitArr = BattleFunc.reducedUnitArr
            if index > #reducedUnitArr  then
                index = #reducedUnitArr
            end
            bigValue = reducedUnitArr[index]
            strValue = tostring(tempNum);
            numsWidth = #strValue * perWid
            bigNums = 1
        end
        bigWid = bigNums * perSourceWid
        local totalWid = headWid + fuhaoWid + numsWidth + bigWid
        local halfTotalWid = totalWid / 2 + fuhaoWid
        local startPos = 0
        if headWid > 0 then
            self._headLabel = self:updateLabel("", startPos - halfTotalWid, 0, self._headLabel)
            startPos = startPos + headWid
        end
        if fuhaoWid >0 then
            self._fuhaoLabel = self:updateLabel(self._cfgs.fuhao, startPos - halfTotalWid, 0, self._fuhaoLabel)
            startPos = startPos + perWid
        else
            if self._fuhaoLabel then
                self._fuhaoLabel:setViewActive(false)
            end
        end
        local s = 0
        for s=1,#strValue do
            self._childLabels[s] = self:updateLabel(string.sub(strValue, s, s ), startPos - halfTotalWid, 0, self._childLabels[s])
            startPos = startPos + perWid
        end
        for s = #strValue+1,#self._childLabels  do
            self._childLabels[s]:setViewActive(false)
        end
        if bigNums > 0 then
            self._bigStrLabel = self:updateLabel(bigValue:toLowerCase(), startPos - halfTotalWid, 0, self._bigStrLabel)
        else
            if self._bigStrLabel then
                self._bigStrLabel:setViewActive(false)
            end
        end
    end
end

function BattleDamageLabel:updateLabel(key, x, y, label)
    local imageUrl;
    if key == "" then
        imageUrl = self._baseUrl;
    else
        imageUrl = self._baseUrl.."_"..key

    end
    if not label then
        label = UITools.createUIImage(imageUrl,ResourceConst.boundle_ui);
        label:setViewPivot(0,0.5)
        self:addChild(label)
    else
        label:setViewActive(true)
        UITools.setImageUrl(label,imageUrl,ResourceConst.boundle_ui,true)
    end

    label:setPos(x,y)
    return label
end
