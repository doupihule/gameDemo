"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BattleConst_1 = require("../../sys/consts/BattleConst");
/**
 * 战斗缓存行为控制器
 *
 */
class BattleTweenControler {
    constructor(controller) {
        this.controller = controller;
        this._tweenInfoMap = [];
    }
    setData() {
        this._tweenInfoMap = [];
        this.controller.registObjUpdate(this.updateFrame, this);
    }
    //由主控制器 控制
    updateFrame() {
        for (var i = this._tweenInfoMap.length - 1; i >= 0; i--) {
            var info = this._tweenInfoMap[i];
            var isEnd = this.updateOneTween(info);
            if (isEnd) {
                this._tweenInfoMap.splice(i, 1);
            }
        }
    }
    //更新一个tween
    updateOneTween(tweenInfo) {
        var type = tweenInfo.type;
        tweenInfo.frame++;
        var ratio = tweenInfo.frame / tweenInfo.totalFrame;
        //暂时给匀速运动
        var startParams = tweenInfo.startParams;
        var targetParams = tweenInfo.targetParams;
        var disParams = tweenInfo.disParams;
        var instance = tweenInfo.instance;
        //如果是有运动行为的
        if (this.checkHasType(type, BattleConst_1.default.TWEEN_MOVE)) {
            var targetx, targety, targetz;
            disParams.x == 0 ? targetx = instance.pos.x : targetx = startParams.x + disParams.x * ratio;
            disParams.y == 0 ? targety = instance.pos.y : targety = startParams.y + disParams.y * ratio;
            disParams.z == 0 ? targetz = instance.pos.z : targetz = startParams.z + disParams.z * ratio;
            instance.setPos(targetx, targety, targetz);
        }
        if (this.checkHasType(type, BattleConst_1.default.TWEEN_ROTATE)) {
            var rx, ry, rz;
            disParams.rx == 0 ? rx = instance.rotationRad.x : rx = startParams.rx + disParams.rx * ratio;
            disParams.ry == 0 ? ry = instance.rotationRad.y : ry = startParams.ry + disParams.ry * ratio;
            disParams.rz == 0 ? rz = instance.rotationRad.z : rz = startParams.rz + disParams.rz * ratio;
            instance.setRadian(rx, ry, rz);
        }
        if (this.checkHasType(type, BattleConst_1.default.TWEEN_SCALE)) {
            instance.setViewScale(startParams.s + disParams.s * ratio);
        }
        //如果到达最后一帧了
        if (tweenInfo.frame == tweenInfo.totalFrame) {
            if (tweenInfo.callBack) {
                tweenInfo.callBack.call(tweenInfo.thisObj);
            }
            return true;
        }
        return false;
    }
    //设置一个缓动信息
    /**
     *
     * @param frame 运动时间
     * @param targetParams:  {x:1,y:1,z:1,s:1,rx:1,ry:1,rz:1};
     * x,y,z 必须同时配,  rx,ry,rz 也必须同时配
     */
    setOneTween(frame, instance, targetParams, type, callBack = null, thisObj = null) {
        var startParams = { x: instance.pos.x, y: instance.pos.y, z: instance.pos.z, s: instance.viewScale,
            rx: instance.rotationRad.x, ry: instance.rotationRad.y, rz: instance.rotationRad.z };
        var disParams = {};
        if (this.checkHasType(type, BattleConst_1.default.TWEEN_MOVE)) {
            disParams.x = this.adjustNumber(targetParams.x - startParams.x);
            disParams.y = this.adjustNumber(targetParams.y - startParams.y);
            disParams.z = this.adjustNumber(targetParams.z - startParams.z);
        }
        if (this.checkHasType(type, BattleConst_1.default.TWEEN_ROTATE)) {
            disParams.rx = this.adjustNumber(targetParams.rx - startParams.rx);
            disParams.ry = this.adjustNumber(targetParams.ry - startParams.ry);
            disParams.rz = this.adjustNumber(targetParams.rz - startParams.rz);
        }
        if (this.checkHasType(type, BattleConst_1.default.TWEEN_SCALE)) {
            disParams.s = targetParams.s - startParams.s;
        }
        var tweenInfo = {
            startParams: startParams,
            targetParams: targetParams,
            type: type,
            callBack: callBack,
            thisObj: thisObj,
            instance: instance,
            frame: 0,
            totalFrame: frame,
            disParams: disParams,
        };
        this._tweenInfoMap.push(tweenInfo);
    }
    //销毁一个tween
    clearOneTween(instance) {
        for (var i = this._tweenInfoMap.length - 1; i >= 0; i--) {
            var info = this._tweenInfoMap[i];
            if (info.instance == instance) {
                //移除这个tween
                this._tweenInfoMap.splice(i, 1);
            }
        }
    }
    //判断是否有某一个类型
    checkHasType(bit, type) {
        return (bit & type) != 0;
    }
    //对number 进行接近0的判断
    adjustNumber(value) {
        if (Math.abs(value) < 0.0001) {
            return 0;
        }
        return value;
    }
}
exports.default = BattleTweenControler;
//# sourceMappingURL=BattleTweenControler.js.map