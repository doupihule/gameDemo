"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BattleControler_1 = require("./BattleControler");
const InstancePlayer_1 = require("../instance/InstancePlayer");
const PoolTools_1 = require("../../../framework/utils/PoolTools");
const PoolCode_1 = require("../../sys/consts/PoolCode");
const TableUtils_1 = require("../../../framework/utils/TableUtils");
const BattleFunc_1 = require("../../sys/func/BattleFunc");
const Message_1 = require("../../../framework/common/Message");
const BattleEvent_1 = require("../../sys/event/BattleEvent");
const WindowManager_1 = require("../../../framework/manager/WindowManager");
const WindowCfgs_1 = require("../../sys/consts/WindowCfgs");
const RandomUtis_1 = require("../../../framework/utils/RandomUtis");
const LevelFunc_1 = require("../../sys/func/LevelFunc");
const InstanceEffect_1 = require("../instance/InstanceEffect");
const LogsManager_1 = require("../../../framework/manager/LogsManager");
const LogsErrorCode_1 = require("../../../framework/consts/LogsErrorCode");
const BattleMapControler_1 = require("./BattleMapControler");
const BattleConst_1 = require("../../sys/consts/BattleConst");
const InstanceRole_1 = require("../instance/InstanceRole");
const ResourceConst_1 = require("../../sys/consts/ResourceConst");
const SoundManager_1 = require("../../../framework/manager/SoundManager");
const BattleStatisticsControler_1 = require("./BattleStatisticsControler");
const InstanceBullet_1 = require("../instance/InstanceBullet");
const GlobalParamsFunc_1 = require("../../sys/func/GlobalParamsFunc");
const TimerManager_1 = require("../../../framework/manager/TimerManager");
const GuideManager_1 = require("../../sys/manager/GuideManager");
const VectorTools_1 = require("../../../framework/utils/VectorTools");
const Client_1 = require("../../../framework/common/kakura/Client");
const ViewTools_1 = require("../../../framework/components/ViewTools");
const UICompConst_1 = require("../../../framework/consts/UICompConst");
class BattleLogicalControler extends BattleControler_1.default {
    constructor(ctn, ctn2) {
        super(ctn);
        this.battleInfo = [];
        this.leftTime = 0; //剩余帧数
        //当前分数
        this.currentScore = 0;
        //当前星级
        this.currentStar = 0;
        //当前血量
        this.currentBlood = -1;
        //本关奖励金币
        this.currentReward = 0;
        this.bulletHeight = 3.6;
        //枪的原点坐标
        this.originPos3D = VectorTools_1.default.createVec3(0.3, this.bulletHeight, 2.2);
        //怪物所在的z坐标  暂定离枪 距离1米
        this.monsterInitZPos = 1.2;
        this.monsterRemove = false; //怪物碰到地面是否移除
        this.isWin = false; //是否胜利
        this.curRate = 0;
        this.gameLastTimes = -1; //-1表示无时间限制
        //当前处于地形index, 从0开始.是 根据主角车去判断的
        this.currentTerrainIndex = 0;
        this.bulletNum = 5;
        this.basicBulletNum = 5;
        this.maxBulletNum = 5;
        this.shadowList = [];
        this.battleScene = ctn;
        this.battlePrefab = ctn2;
        this.explodeEffectArr = [];
        this.activeExplodeEffectArr = [];
        this.bloodEffectArr = [];
        this.activeBloodEffectArr = [];
        this.shootEffectArr = [];
        this.activeShootEffectArr = [];
        this.explodeEffect = ViewTools_1.default.create3DModel(ResourceConst_1.default.EFFECT_EXPLODE, "Effect").getChildAt(0);
        this.bloodEffect = ViewTools_1.default.create3DModel(ResourceConst_1.default.EFFECT_BLOOD, "Effect");
        this.shootEffect = ViewTools_1.default.create3DModel(ResourceConst_1.default.EFFECT_SHOOT, "Effect").getChildAt(0);
        this.battleCtn = this.battlePrefab.getChildByName("element_field");
        this.effectArr = [];
        this.roleArr = [];
        this.bulletArr = [];
        var time = Client_1.default.instance.miniserverTime;
        LogsManager_1.default.echo("battle 设置随机种子:", time, "用来做复盘用");
        RandomUtis_1.default.setOneRandomYinzi(time, BattleFunc_1.default.battleRandomIndex);
        this.mapControler = new BattleMapControler_1.default(this);
        // this.propControler = new BattlePropControler(this);
        this.statistControler = new BattleStatisticsControler_1.default(this);
        var y = this.originPos3D.y;
        // this.gamePlane = new Laya.Plane(VectorTools.createVec3(0,0,-1),Math.abs(z) );
        this.gamePlane = ViewTools_1.default.createPlaneBy3p(VectorTools_1.default.createVec3(-10, y, 10), VectorTools_1.default.createVec3(10, y, -10), VectorTools_1.default.createVec3(10, y, 10));
        // z = this.monsterInitZPos;
        var time = Client_1.default.instance.miniserverTime;
        RandomUtis_1.default.setOneRandomYinzi(time, BattleFunc_1.default.battleRandomIndex);
        this.hitTime = 1; //GlobalParamsFunc.instance.getDataByTwoId("impactTime", "num") / 1000;
    }
    //设置数据
    setData(data) {
        while (this.activeExplodeEffectArr.length) {
            var explodeEffect = this.activeExplodeEffectArr.pop();
            explodeEffect.setActive(false);
            this.explodeEffectArr.push(explodeEffect);
        }
        while (this.activeBloodEffectArr.length) {
            var bloodEffect = this.activeBloodEffectArr.pop();
            bloodEffect.setActive(false);
            this.bloodEffectArr.push(bloodEffect);
        }
        while (this.activeShootEffectArr.length) {
            var shootEffect = this.activeShootEffectArr.pop();
            shootEffect.setActive(false);
            this.shootEffectArr.push(shootEffect);
        }
        //初始化统计控制器
        this.statistControler.setData();
        this.battleData = data;
        this.preCreateEffGroup();
        this.updateCallFuncGroup = {};
        this.mapControler.setData(data);
        this.initGame(data);
    }
    //播放音效, lastTime 持续时间,表示多久后关闭 0表示永久循环 -1表示只播放一次
    playSound(soundName, lastTime = -1) {
        // LogsManager.echo("battle play sound",soundName,lastTime)
        if (lastTime == -1) {
            SoundManager_1.default.playSE(soundName, 1);
        }
        else {
            SoundManager_1.default.playSE(soundName, 0);
            if (lastTime > 0) {
                this.setCallBack(lastTime, this.stopSound, this, soundName);
            }
        }
    }
    //停止某个音效
    stopSound(soundName) {
        SoundManager_1.default.stopMusicOrSound(soundName);
    }
    //销毁一个实例
    destoryInstance(instance, cacheId, model, arr) {
        //把instance放入缓存.
        instance.destroyPre();
        PoolTools_1.default.cacheItem(cacheId, instance);
        instance.onSetToCache();
        // view.removeSelf();
        TableUtils_1.default.removeValue(this._allInstanceArr, instance);
        if (arr) {
            TableUtils_1.default.removeValue(arr, instance);
        }
        if (model == BattleConst_1.default.model_effect) {
            TableUtils_1.default.removeValue(this.effectArr, instance);
        }
        else if (model == BattleConst_1.default.model_role) {
            // this.player = null;
            TableUtils_1.default.removeValue(this.roleArr, instance);
        }
    }
    //销毁角色
    destoryRole(player, checkResult = true) {
        this.destoryInstance(player, PoolCode_1.default.POOL_PLAYER + player.dataId, BattleConst_1.default.model_role, this.roleArr);
        if (checkResult) {
            switch (player.type) {
                case "Target":
                    this.checkResult();
                    break;
                case "Player":
                    this.player = null;
                    this.checkResult();
                    break;
            }
        }
    }
    //销毁角色
    roleDead(player, checkResult = true, speed) {
        if (player.dead) {
            return false;
        }
        player._myView.getChildByName("collider").setActive(false);
        var randomInt = RandomUtis_1.default.getOneRandomInt(2, -1);
        var rotation = player._myView.get3dRotation();
        player._myView.set3dRotation(rotation.x, rotation.y = randomInt * 30, rotation.z);
        if (speed) {
            player.initMove2Stand(speed.x, speed.y, speed.z);
            VectorTools_1.default.scale(speed, -GlobalParamsFunc_1.default.instance.getDataNum("hitPlayerSlowDown") / 1000, player.addSpeed);
            var bloodEffect;
            if (this.bloodEffectArr.length) {
                bloodEffect = this.bloodEffectArr.pop();
            }
            else {
                bloodEffect = this.bloodEffect.clone();
            }
            player._myView.addChild(bloodEffect);
            bloodEffect.active = false;
            bloodEffect.active = true;
        }
        var anim = player._myView.getChildByName(player._myView.name).getComponent(UICompConst_1.default.comp_animator3d);
        anim.play("dead");
        player.dead = true;
        if (checkResult) {
            switch (player.type) {
                case "Target":
                    this.checkResult();
                    break;
                case "Player":
                    this.player = null;
                    this.checkResult();
                    break;
            }
        }
        return true;
    }
    //销毁一个特效
    destoryEffect(effect) {
        this.destoryInstance(effect, PoolCode_1.default.POOL_EFFECT + effect.effectName, BattleConst_1.default.model_effect);
    }
    //销毁一个子弹 
    destoryBullet(bullet) {
        this.destoryInstance(bullet, PoolCode_1.default.POOL_BUTTLE + bullet.dataId, BattleConst_1.default.model_bullet, this.bulletArr);
        if (this.bulletNum <= 0 && this.bulletArr.length <= 0) {
            this.battleUi.lose();
        }
        // view.removeSelf();
    }
    //销毁图片特效
    //创建一个instance
    /**
     *
     * @param data  数据
     * @param cacheId 缓存id
     * @param model  对应的模块 , role ,monster,effect,bullet
     * @param classModel 对应的类对象
     * @param resName  对应需要加载的资源名
     * @param viewScale  视图缩放系数
     */
    createInstance(data, cacheId, model, classModel, resName, viewScale = 1) {
        var instance = PoolTools_1.default.getItem(cacheId, PoolCode_1.default.pool_model_battle);
        var view;
        LogsManager_1.default.echo("battle", "创建实例:", resName, "model:", model, viewScale);
        if (instance) {
            instance.getView().active = true;
            instance.setData(data);
            view = instance.getView();
            this.battleCtn.addChild(view);
        }
        else {
            instance = new classModel(this);
            var resurl = resName;
            if (model == BattleConst_1.default.model_bullet) {
                view = ViewTools_1.default.create3DModel(resurl, "Bullet").getChildAt(0);
            }
            else if (model == BattleConst_1.default.model_effect) {
                view = ViewTools_1.default.create3DModel(resurl, "Effect").getChildAt(0);
            }
            if (!view) {
                LogsManager_1.default.errorTag(LogsErrorCode_1.default.CONFIG_ERROR, "这个资源不存在:", resurl);
            }
            instance.setView(view);
            instance.setData(data);
            this.battleCtn.addChild(view);
            //如果是角色 那么记录初始坐标
            if (model == BattleConst_1.default.model_role) {
                var childView = view.getChildAt(0);
                VectorTools_1.default.cloneTo(childView.positionTrans, instance.initRotateCtnPos);
            }
        }
        if (viewScale != 1) {
            var childView = view;
            var tempP = BattleFunc_1.default.tempPoint;
            tempP.x = tempP.y = tempP.z = viewScale;
            childView.setScale(viewScale, viewScale, viewScale);
            instance.viewScale = viewScale;
        }
        view.instance = instance;
        return instance;
    }
    //使用场景元素创建一个instance
    /**
     *
     * @param data  数据
     * @param cacheId 缓存id
     * @param model  对应的模块 , role ,monster,effect,bullet
     * @param classModel 对应的类对象
     * @param resName  对应需要加载的资源名
     * @param viewScale  视图缩放系数
     */
    createInstanceDefault(info, cacheId, object, classModel, shadow = null) {
        var instance = PoolTools_1.default.getItem(cacheId, PoolCode_1.default.pool_model_battle);
        var view;
        var data = { id: info.name + "_" + info.id, type: info.type };
        LogsManager_1.default.echo("battle", "创建实例:", "model:");
        if (instance) {
            if (instance.type == "Player") {
                this.line.removeSelf();
            }
            instance.getView().removeSelf();
            instance.getView().dispose();
            instance = null;
            // instance.getView().active = true;
            // instance.setData(data);
            // view = instance.getView();
            // instance.setView(view, info.transform[0], info.transform[1], info.transform[2]);
        }
        instance = new classModel(this);
        view = object;
        if (!view) {
            LogsManager_1.default.errorTag(LogsErrorCode_1.default.CONFIG_ERROR, "这个资源不存在");
        }
        view = ViewTools_1.default.cloneOneView(view, UICompConst_1.default.comp_base3d);
        instance.setView(view, info.transform[0], info.transform[1], info.transform[2]);
        instance.setData(data);
        this.battleCtn.addChild(view);
        view.set3dPos(info.transform[0], info.transform[1], info.transform[2]);
        view.set3dRotation(info.transform[3], info.transform[4], info.transform[5]);
        view.setScale(info.transform[6], info.transform[7], info.transform[8]);
        view["battleInstance"] = instance;
        instance.param = {};
        instance.param.transform = info.transform;
        instance.param["x1"] = info.transform[0];
        instance.param["y1"] = info.transform[1];
        instance.param["z1"] = info.transform[2];
        for (var index in info.param) {
            switch (info.param[index]) {
                case "T":
                    instance.param[index] = true;
                    break;
                case "F":
                    instance.param[index] = false;
                    break;
                default:
                    instance.param[index] = info.param[index];
                    break;
            }
        }
        if (instance.param.move) {
            instance.setColl(true);
            var collider = view.getComponent(UICompConst_1.default.comp_collider);
            if (collider) {
                collider.ccdMotionThreshold = 0.00001;
            }
        }
        else {
            instance.setColl(false);
        }
        if (instance.param.autoMoveSpeed) {
            instance.param["x2"] = instance.param["x1"] + instance.param.autoMoveDis[0];
            instance.param["y2"] = instance.param["y1"] + instance.param.autoMoveDis[1];
            instance.param["z2"] = instance.param["z1"] + instance.param.autoMoveDis[2];
            TimerManager_1.default.instance.registObjUpdate(instance.patrol, instance);
        }
        return instance;
    }
    //创建一个特效 {name:}
    createEffect(data) {
        var cacheId = PoolCode_1.default.POOL_EFFECT + data.id;
        var cacheItem = this.createInstance(data, cacheId, BattleConst_1.default.model_effect, InstanceEffect_1.default, data.id);
        this.effectArr.push(cacheItem);
        return cacheItem;
    }
    getEffectByName(name) {
        for (var i = 0; i < this.effectArr.length; i++) {
            var eff = this.effectArr[i];
            if (eff.getData().id == name) {
                return eff;
            }
        }
        return null;
    }
    //创建一个子弹 
    createBullet(data) {
        var cacheId = PoolCode_1.default.POOL_BUTTLE + data.id;
        // var cfgdata = BattleFunc.instance.getBulletData(data.id);
        // var cacheItem: InstanceBullet = this.createInstance(data, cacheId, BattleConst.model_role, InstanceBullet, "role_car_03", 1);
        var cacheItem = this.createInstance(data, cacheId, BattleConst_1.default.model_role, InstanceBullet_1.default, BattleConst_1.default.model_bullet_model, 1);
        this.bulletArr.push(cacheItem);
        this._allInstanceArr.push(cacheItem);
        return cacheItem;
    }
    // //创建一个主角
    // public createPlayer(data: any) {
    // 	var cacheId = PoolCode.POOL_PLAYER + data.id;
    // 	var roleInfo = BattleFunc.instance.getRoleInfoData(data.id);
    // 	var cacheItem: InstancePlayer = this.createInstance(data, cacheId, BattleConst.model_role, InstancePlayer, roleInfo.model, roleInfo.sizeScale / 10000);
    // 	this.player = cacheItem;
    // 	//初始朝向
    // 	this.player.countGunRotate(ScreenAdapterTools.width / 2, ScreenAdapterTools.height / 2, false);
    // 	this._allInstanceArr.push(cacheItem);
    // 	return cacheItem;
    // }
    //创建一个角色(场景物件)
    createRole(data, object, shadow = null) {
        var cacheId = PoolCode_1.default.POOL_PLAYER + data.name + "_" + data.id;
        // var viewName = BattleFunc.instance.getCfgDatasByKey("Monster", data.id, "model")
        var cacheItem = this.createInstanceDefault(data, cacheId, object, InstanceRole_1.default, shadow);
        // cacheItem.initStep(step, trackPos);
        // cacheItem.pos.y = BattleFunc.defaultYpos;
        // cacheItem.setPos(0, 0.1, 0)
        this._allInstanceArr.push(cacheItem);
        this.roleArr.push(cacheItem);
        return cacheItem;
    }
    //创建一个角色(主角)
    createPlayer(data, object, shadow = null) {
        var cacheId = PoolCode_1.default.POOL_PLAYER + data.name + "_" + data.id;
        // var viewName = BattleFunc.instance.getCfgDatasByKey("Monster", data.id, "model")
        var cacheItem = this.createInstanceDefault(data, cacheId, object, InstancePlayer_1.default, shadow);
        // cacheItem.initStep(step, trackPos);
        // cacheItem.pos.y = BattleFunc.defaultYpos;
        // cacheItem.setPos(0, 0.1, 0)
        this._allInstanceArr.push(cacheItem);
        this.roleArr.push(cacheItem);
        var y = cacheItem.pos.y;
        this.gamePlane = ViewTools_1.default.createPlaneBy3p(VectorTools_1.default.createVec3(-10, y, 10), VectorTools_1.default.createVec3(10, y, -10), VectorTools_1.default.createVec3(10, y, 10));
        return cacheItem;
    }
    createExplode(pos, range) {
        var dis = range;
        // WindowManager.ShowTip("生成爆炸 距离" + dis);
        var explodeEffect;
        if (this.explodeEffectArr.length) {
            explodeEffect = this.explodeEffectArr.pop();
        }
        else {
            explodeEffect = this.explodeEffect.clone();
        }
        this.activeExplodeEffectArr.push(explodeEffect);
        this.battleCtn.addChild(explodeEffect);
        explodeEffect.set3dPos(pos.x, pos.y, pos.z);
        // for (var part of explodeEffect._children) {
        // 	part.transform.scale.x = part.transform.scale.y = part.transform.scale.z = range / 1.5;
        // 	part.transform.localScale = part.transform.scale;
        // }
        explodeEffect.setActive(true);
        var tempFunc = () => {
            if (explodeEffect.isActive()) {
                var roleArr = this.roleArr;
                for (var i = roleArr.length - 1; i >= 0; i--) {
                    var instance = roleArr[i];
                    var dx = instance.pos.x - pos.x;
                    var dz = instance.pos.z - pos.z;
                    if (Math.pow(dx, 2) + Math.pow(dz, 2) <= Math.pow(dis, 2)) {
                        this.destoryRole(instance);
                    }
                }
            }
        };
        TimerManager_1.default.instance.add(tempFunc, this, 500, 1);
    }
    //初始化游戏
    initGame(data) {
        this.battleUi = WindowManager_1.default.getUIByName(WindowCfgs_1.WindowCfgs.BattleUI);
        //一些信息的初始化操作
        this.initBattleInfo();
        //创建其他的car
        this.basicBulletNum = LevelFunc_1.default.instance.getLevelInfoByTwoId(data.levelId, "basisBulletNub");
        this.maxBulletNum = this.basicBulletNum + LevelFunc_1.default.instance.getLevelInfoByTwoId(this.battleData.levelId, "threeStarPayBulletNub");
        this.bulletNum = this.maxBulletNum;
        this.battleEnd = false;
        Message_1.default.instance.send(BattleEvent_1.default.BATTLEEVENT_BATTLESTART);
        //初始化摄像机跟随主角
        // this.cameraControler.followPlayer();
        // this.battleCamera.clearFlag = Laya.Camera.CLEARFLAG_SOLIDCOLOR
        // this._lastFrameTime = Client.instance.miniserverTime
        TimerManager_1.default.instance.registObjUpdate(this.onceUpdateFrame, this);
        // this.player.resetChildViewRotationAndPos();
    }
    //初始化角色
    initRole() {
        // this.player = this.createPlayer({ id: this.battleData.roleId, superId: this.superWeaponId })
        // this.player.setPos(this.originPos3D.x, this.originPos3D.y, this.originPos3D.z);
    }
    //初始化一些信息
    initBattleInfo() {
    }
    //处理事件
    recvMsg(cmd, data) {
    }
    //得分
    changeScore(value) {
    }
    //设置撞击力
    setHitForce(force) {
        var hitParams = GlobalParamsFunc_1.default.instance.getDataByTwoId("impactParams", "arr");
        this.hitForce = BattleFunc_1.default.instance.turnSpeedToFrame(Math.ceil(force / (Number(hitParams[0]) + force) * Number(hitParams[1])));
    }
    //获取撞击力
    getHitForce() {
        return this.hitForce;
    }
    //进入结算
    enterBattleOver() {
        //进入结算状态;
        //开始发送打点数据
        this.setBattleState(BattleConst_1.default.battleState_over);
        this.battleEnd = false;
        WindowManager_1.default.OpenUI(WindowCfgs_1.WindowCfgs.BattleResultUI, { levelId: this.battleData.levelId, rank: this.bulletNum >= this.basicBulletNum ? 3 : (this.bulletNum > 1 ? 2 : 1) });
    }
    //退出游戏,这个不是销毁游戏
    exitBattle() {
        TimerManager_1.default.instance.deleteObjUpdate(null, this.onceUpdateFrame, this);
        this.statistControler.startSendStatistics();
        // this.stopSound(MusicConst.SOUND_REV_LOOP);
        // this.stopSound(MusicConst.SOUND_REV_LOOP2);
        var arr2 = TableUtils_1.default.copyOneArr(this.roleArr);
        var arr3 = TableUtils_1.default.copyOneArr(this.bulletArr);
        //销毁怪物
        for (var i = 0; i < arr2.length; i++) {
            this.destoryRole(arr2[i], false);
        }
        for (var i = 0; i < arr3.length; i++) {
            this.destoryBullet(arr3[i]);
        }
        this.player = null;
        this.mapControler.destoryMap();
        //销毁主角
        // this.destoryRole(this.player);
        //清空延迟回调
        this._timeList = [];
        this.battleScene.setActive(false);
    }
    checkResult() {
        if (!this.player) {
            this.battleEnd = true;
            WindowManager_1.default.ShowTip("失败");
            TimerManager_1.default.instance.setTimeout(() => {
                this.battleUi.onReplayGame();
            }, this, 1000);
            return;
        }
        var arr2 = TableUtils_1.default.copyOneArr(this.roleArr);
        var targetNum = 0;
        for (var i = 0; i < arr2.length; i++) {
            if (arr2[i].type == "Target" && arr2[i].dead == false) {
                targetNum++;
            }
        }
        if (!targetNum) {
            this.battleEnd = true;
            WindowManager_1.default.ShowTip("过关");
            if (GuideManager_1.default.ins.nowGuideId == 3) {
                GuideManager_1.default.ins.guideFin(3, () => {
                    WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.GuideUI);
                    TimerManager_1.default.instance.setTimeout(() => {
                        this.enterBattleOver();
                    }, this, 1000);
                }, this, true);
            }
            else {
                TimerManager_1.default.instance.setTimeout(() => {
                    this.enterBattleOver();
                }, this, 1000);
            }
        }
    }
    //根据组件获取实例
    getInstanceByComp(gameObj) {
        var view = ViewTools_1.default.getBaseViewByCobj(gameObj);
        if (!view) {
            return null;
        }
        //给view动态赋值battleInstance
        return view["battleInstance"];
    }
    //销毁游戏
    dispose() {
        super.dispose();
    }
    preCreateEffGroup() {
        var effectArr = [ResourceConst_1.default.EFFECT_BLOOD, ResourceConst_1.default.EFFECT_EXPLODE, ResourceConst_1.default.EFFECT_SHOOT];
        for (var i = 0; i < effectArr.length; i++) {
            this.preCreateEffect(effectArr[i], 120);
        }
    }
    //预缓存一个特效 .默认120秒后重新缓存
    preCreateEffect(name, frame = 10) {
        var eff = this.createEffect({ id: name });
        eff.setLastFrame(frame);
        //把这个特效放到天边去
        eff.setPos(10000, 100000, 10000);
    }
}
exports.default = BattleLogicalControler;
//# sourceMappingURL=BattleLogicalControler.js.map