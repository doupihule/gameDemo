"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LevelFunc_1 = require("../../sys/func/LevelFunc");
const UICompConst_1 = require("../../../framework/consts/UICompConst");
const BattleConst_1 = require("../../sys/consts/BattleConst");
class BattleMapControler {
    constructor(controller) {
        //瓦片的图层名称
        this.tileName = "scene_main_01";
        //初始的弧度
        this._startAngle = 0;
        //当前的index
        this._currentIndex = 0;
        this.controller = controller;
        this._mapSpriteCache = [];
        this._specailViewArr = [];
    }
    //初始化设置数据
    setData(data) {
        var allInfo = LevelFunc_1.default.instance.getLevel();
        var info = allInfo.scenes[0].level["level_" + data.levelId];
        var idList = {};
        var objectInfo;
        for (var index in info) {
            objectInfo = info[index];
            if (idList[objectInfo]) {
                idList[objectInfo]++;
            }
            else {
                idList[objectInfo] = 1;
            }
            objectInfo.id = idList[objectInfo];
        }
        var elementField = this.controller.battlePrefab.getChildByName("element_field");
        var elementGroup = this.controller.battlePrefab.getChildByName("element_group");
        var elementGroupRigid = this.controller.battlePrefab.getChildByName("element_group_rigid");
        var staticElement = this.controller.battlePrefab.getChildByName("static_element");
        var childNums = staticElement.numChildren;
        for (var s = 0; s < childNums; s++) {
            var object = staticElement.getChildAt(s);
            var rigids = object.getComponent(UICompConst_1.default.comp_collider);
            rigids.collisionGroup = BattleConst_1.default.collion_layer_2;
        }
        if (!this.controller.line)
            this.controller.line = this.controller.battlePrefab.getChildByName("element_group").getChildByName("line");
        for (var index in info) {
            objectInfo = info[index];
            var obj;
            var rigid;
            if (objectInfo.param.weight > 0) {
                objectInfo.param.move = "T";
                obj = elementGroupRigid.getChildByName(objectInfo.name);
                rigid = obj.getComponent(UICompConst_1.default.comp_rigidbody3d);
            }
            else {
                obj = elementGroup.getChildByName(objectInfo.name); //.clone() as Base3dViewExpand;
                rigid = obj.getComponent(UICompConst_1.default.comp_collider);
            }
            if (objectInfo.type == "Target") {
                rigid.collisionGroup = BattleConst_1.default.collion_layer_2;
            }
            else {
                rigid.collisionGroup = BattleConst_1.default.collion_layer_1;
            }
            if (objectInfo.type == "Player") {
                this.controller.player = this.controller.createPlayer(objectInfo, obj, null);
            }
            else {
                this.controller.createRole(objectInfo, obj, null);
            }
        }
    }
    //刷新函数 主要是用来处理动态的地图拼接
    updateFrame() {
        var playerPos = this.controller.player.pos;
        // this._landSp.set3dPos(playerPos.x,-0.1,playerPos.z);
    }
    //销毁所有地形
    destoryMap() {
    }
}
exports.default = BattleMapControler;
//# sourceMappingURL=BattleMapControler.js.map