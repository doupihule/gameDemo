"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BattleFunc_1 = require("../../sys/func/BattleFunc");
const VectorTools_1 = require("../../../framework/utils/VectorTools");
class CameraControler {
    constructor(controller) {
        this.shakeFrame = 0;
        this.shakeIntervel = 2;
        //是否是跟随主角的
        this.isFollowPlayer = true;
        this.controller = controller;
        this._initCameraPos = VectorTools_1.default.createVec3();
        this.targetCamerePos = VectorTools_1.default.createVec3();
        this._shakeOffest = VectorTools_1.default.createVec3(0, 0, 0);
        //记录初始位置
        this._followOffsetPos = VectorTools_1.default.createVec3();
        this._cameraRotation = VectorTools_1.default.createVec3();
        this._lastRotation = VectorTools_1.default.createVec3();
        VectorTools_1.default.cloneTo(BattleFunc_1.default.cameraFollowRotation, this._cameraRotation);
        VectorTools_1.default.cloneTo(BattleFunc_1.default.cameraFollowRotation, this._lastRotation);
    }
    //初始化数据
    setData() {
        this.camera = this.controller.battleCamera;
        this.targetCamerePos.x = this.controller.player.pos.x + this._followOffsetPos.x;
        this.targetCamerePos.y = this._followOffsetPos.y;
        this.targetCamerePos.z = this.controller.player.pos.z + this._followOffsetPos.z;
        this.camera.__owner.set3dPos(this.targetCamerePos.x, this.targetCamerePos.y, this.targetCamerePos.z);
        this.isFollowPlayer = true;
        VectorTools_1.default.cloneTo(this.targetCamerePos, this._initCameraPos);
        this.controller.registObjUpdate(this.updateFrame, this);
    }
    //刷新函数
    updateFrame() {
        //followplayer
        // this.followPlayer();
        this.updateShake();
    }
    updateShake() {
        if (this.shakeFrame == 0) {
            return;
        }
        this.shakeFrame--;
        var shakeWay;
        var index = Math.ceil(this.shakeFrame / this.shakeIntervel);
        var yushu = this.shakeFrame % this.shakeIntervel;
        if (yushu != 0 && this.shakeFrame > 0) {
            return;
        }
        if (index % 2 == 1) {
            shakeWay = 1;
        }
        else {
            shakeWay = -1;
        }
        //把像素转化成米
        var shakeValue = this.shakeStrength * shakeWay;
        var x = 0;
        var y = 0;
        //如果为0了 那么就会把偏移量还原
        if (this.shakeFrame > 0) {
            if (this.shakeStyle == "x") {
                x = shakeValue;
            }
            else if (this.shakeStyle == "y") {
                y = shakeValue;
            }
            else {
                x = shakeValue;
                y = shakeValue;
            }
        }
        this._shakeOffest.x = x;
        this._shakeOffest.x = y;
        //设置摄像机坐标
        this.targetCamerePos.x = x + this._initCameraPos.x;
        this.targetCamerePos.y = y + this._initCameraPos.y;
    }
    //震动摄像机 震动时长,  震动方式,style: x(只x方向震动),y(只y方向震动),xy(xy方向同时震动),strength: 振幅 单位万分之一米 intervel震动间隔 默认2帧减一次
    shakeCamera(shakeFrame, style = "xy", strength = 3, intervel = 2) {
        this.shakeFrame = shakeFrame;
        this.shakeStyle = style;
        this.shakeStrength = strength * BattleFunc_1.default.pixelToMi;
        this.shakeIntervel = intervel;
    }
}
exports.default = CameraControler;
//# sourceMappingURL=CameraControler.js.map