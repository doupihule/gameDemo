"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const InstanceBasic_1 = require("./InstanceBasic");
const VectorTools_1 = require("../../../framework/utils/VectorTools");
/**
 * 游戏中的特效基类
 */
class InstanceEffect extends InstanceBasic_1.default {
    constructor(controller) {
        super(controller);
    }
    //设置数据
    setData(data) {
        super.setData(data);
        this.effectName = data.id;
        this._followOffset = VectorTools_1.default.createVec3();
    }
    //设置持续帧数,指定帧数后销毁自己
    setLastFrame(frame) {
        this.controller.clearCallBack(this);
        if (frame > 0) {
            this.controller.setCallBack(frame, this.delayClearSelf, this);
        }
    }
    doAiLogical() {
        if (this._followTarget) {
            this.dofollowTarget();
        }
    }
    //执行跟随
    dofollowTarget() {
        this.pos.x = this._followTarget.pos.x + this._followOffset.x;
        this.pos.y = this._followTarget.pos.y + this._followOffset.y;
        this.pos.z = this._followTarget.pos.z + this._followOffset.z;
        if (this._withRotate) {
            this.setRadian(this._followTarget.rotationRad.x, this._followTarget.rotationRad.y, this._followTarget.rotationRad.z);
        }
    }
    //设置跟随目标
    setFollowTarget(target, withRotate, ofx, ofy, ofz) {
        this._followTarget = target;
        this._followOffset.x = ofx;
        this._followOffset.y = ofy;
        this._followOffset.z = ofz;
        this._withRotate = withRotate;
        this.dofollowTarget();
    }
    //延迟销毁自己
    delayClearSelf() {
        this.controller.destoryEffect(this);
    }
}
exports.default = InstanceEffect;
//# sourceMappingURL=InstanceEffect.js.map