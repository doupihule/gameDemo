"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingUI = void 0;
const WindowManager_1 = require("../../../../framework/manager/WindowManager");
const ScreenAdapterTools_1 = require("../../../../framework/utils/ScreenAdapterTools");
const TimerManager_1 = require("../../../../framework/manager/TimerManager");
class LoadingUI {
    constructor() {
        this.progress = 0;
        this.isShowWxInfo = false;
        this.alphaFlag = 1;
        LoadingUI.instance = this;
        this.initView();
        this.mainbg.mouseThrough = false;
        this.mainbg.mouseEnabled = true;
    }
    /**显示loading */
    showLoading() {
        if (this.mainbg) {
            WindowManager_1.default.topUILayer.addChild(this.mainbg);
        }
        if (WindowManager_1.default.topUILayer.numChildren > 0) {
            WindowManager_1.default.topUILayer.mouseEnabled = true;
        }
    }
    /**隐藏loading */
    hideLoading() {
        if (this.mainbg) {
            WindowManager_1.default.topUILayer.removeChild(this.mainbg);
        }
        if (WindowManager_1.default.topUILayer.numChildren == 0) {
            WindowManager_1.default.topUILayer.mouseEnabled = false;
        }
    }
    initView() {
    }
    setData() {
    }
    loadingFlash() {
        if (this.alphaFlag) {
            this.loadingtips.alpha -= 0.1;
        }
        else {
            this.loadingtips.alpha += 0.1;
        }
        if (this.loadingtips.alpha >= 0.95) {
            this.alphaFlag = 1;
        }
        if (this.loadingtips.alpha <= 0.05) {
            this.alphaFlag = 0;
        }
    }
    onLoop() {
        if (this.progress + 1 < 95) {
            this.progress += 1;
        }
        if (this.progress >= 100) {
            this.progress = 100;
            TimerManager_1.default.instance.removeByObject(this);
        }
        else {
        }
    }
    setProgress(progress) {
        console.log("Loading Progress is : " + progress);
        this.progress = (Number)((progress * 100).toFixed(2));
        this.onLoop();
    }
    addProgress(progress) {
        this.progress += progress;
    }
    getProgress() {
        return this.progress;
    }
    recvMsg(cmd, data) {
        switch (cmd) {
        }
    }
    /**获取竖直方向上坐标差 */
    getVerticalOffset() {
        var offset = (1400 - ScreenAdapterTools_1.default.height) * 0.5;
        if (offset < 0) {
            offset = 0;
        }
        return offset;
    }
    /**获取水平方向上坐标差 */
    getHorizontalOffset() {
        var offset = (768 - ScreenAdapterTools_1.default.width) * 0.5;
        if (offset < 0) {
            offset = 0;
        }
        return offset;
    }
}
exports.LoadingUI = LoadingUI;
//# sourceMappingURL=LoadingUI.js.map