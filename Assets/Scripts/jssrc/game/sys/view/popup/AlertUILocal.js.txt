"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ScreenAdapterTools_1 = require("../../../../framework/utils/ScreenAdapterTools");
const GlobalData_1 = require("../../../../framework/utils/GlobalData");
const WindowManager_1 = require("../../../../framework/manager/WindowManager");
const WindowCfgs_1 = require("../../consts/WindowCfgs");
const TableUtils_1 = require("../../../../framework/utils/TableUtils");
const ViewTools_1 = require("../../../../framework/components/ViewTools");
const UIBaseView_1 = require("../../../../framework/components/UIBaseView");
;
class AlertUILocal extends UIBaseView_1.default {
    constructor() {
        super();
        this._callback = null;
        this._thisObj = null;
        this.bgCover = null; //底板透明黑遮罩
        this.contentBg = null; //弹窗底
        this.titleLab = null; //弹窗标题
        this.msgLab = null; //内容
        this.sureBtn = null; //确认按钮底
        this.sureLab = null; //确认按钮文本
        this.cancleBtn = null; //取消按钮
        this.cancleLab = null; //取消按钮文本
        //按钮中心位置
        this.btncenterX = 0;
        //按钮偏移
        this.btnOffset = 120;
        AlertUILocal.instance = this;
        this._cacheDataArr = [];
        this.checkInit();
        // new ButtonUtils(this.sureBtn,this.touchHandler,this,"common/common_btn_btn1.png","common/common_btn_btn1_1.png");
        // new ButtonUtils(this.reConnectBtn,this.reConnect,this,"common/common_btn_btn2.png","common/common_btn_btn2_1.png");
    }
    checkInit() {
        var stageWidth = ScreenAdapterTools_1.default.width;
        var stageHeight = ScreenAdapterTools_1.default.height;
        var contentBgWidth = 566;
        var contentBgHeight = 286;
        var contentBgX = (stageWidth - contentBgWidth) / 2;
        var contentBgY = (stageHeight - contentBgHeight) / 2;
        if (this.bgCover == null) {
            this.bgCover = ViewTools_1.default.createContainer("bgCover");
            var path = [
                ["moveTo", 0, 0],
                ["lineTo", stageWidth, 0],
                ["lineTo", stageWidth, stageHeight],
                ["lineTo", 0, stageHeight],
                ["closePath"] //闭合路径
            ];
            //绘制矩形
            // this.bgCover.graphics.drawPath(0, 0, path, {fillStyle: "#000000"});
            // this.bgCover.alpha = 0.5;
            // this.addChild(this.bgCover);
        }
        if (this.contentBg == null) {
            var splitY = 70;
            this.contentBg = ViewTools_1.default.createContainer("contentBg");
            var path = [
                ["moveTo", 0, 0],
                ["lineTo", contentBgWidth, 0],
                ["lineTo", contentBgWidth, 70],
                ["lineTo", 0, 70],
                ["closePath"],
                ["moveTo", 0, 70],
                ["lineTo", contentBgWidth, 70],
                ["lineTo", contentBgWidth, contentBgHeight],
                ["lineTo", 0, contentBgHeight],
                ["closePath"]
            ];
            //绘制矩形
            // this.contentBg.graphics.drawPath(contentBgX, contentBgY, path, {fillStyle: "#111a1b"}, {
            // 	"strokeStyle": "#202f30",
            // 	"lineWidth": "3"
            // });
            // this.addChild(this.contentBg);
        }
        if (this.titleLab == null) {
            this.titleLab = ViewTools_1.default.createLabel("提示", contentBgWidth, 45, 45);
            this.titleLab.set2dPos(contentBgX, contentBgY + 15);
            this.titleLab.setColor(0xb8, 0xff, 0xf7, 0xff);
            this.addChild(this.titleLab);
        }
        if (this.msgLab == null) {
            this.msgLab = ViewTools_1.default.createLabel("", contentBgWidth - 100, 130, 24);
            this.msgLab.x = contentBgX + 50;
            this.msgLab.y = contentBgY + 75;
            this.msgLab.set2dPos(contentBgX + 50, contentBgY + 75);
            this.msgLab.setColor(0xff, 0xff, 0xff, 0xff);
            this.msgLab.setWrapStyle();
            this.addChild(this.msgLab);
        }
        this.btncenterX = contentBgX + 200;
        if (this.sureBtn == null) {
            this.sureBtn = this.createBtn("确定", this.touchHandler, this, this.btncenterX, contentBgY + 206);
        }
        if (this.cancleBtn == null) {
            this.cancleBtn = this.createBtn("取消", this.onCancleBtn, this, this.btncenterX + this.btnOffset, contentBgY + 206);
        }
    }
    onCancleBtn() {
        WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.AlertUILocal);
    }
    createBtn(str, func, thisObj, x, y) {
        var sp = ViewTools_1.default.createContainer("btn");
        sp.setSize(166, 50);
        var path = [
            ["moveTo", 0, 0],
            ["lineTo", 166, 0],
            ["lineTo", 166, 50],
            ["lineTo", 0, 50],
            ["closePath"]
        ];
        //绘制矩形
        // sp.graphics.drawPath(0, 0, path, {fillStyle: "#111a1b"}, {"strokeStyle": "#202f30", "lineWidth": "2"});
        sp.set2dPos(x, y);
        this.addChild(sp);
        var label = ViewTools_1.default.createLabel(str, 166, 30, 30);
        this.titleLab.set2dPos(0, 10);
        label.setColor(0xe1, 0xfc, 0xf5, 0xff);
        sp.addChild(label);
        return sp;
    }
    setData(data) {
        //把数据插入缓存
        this._cacheDataArr.push(data);
        this._callback = data.callBack;
        this._thisObj = data.thisObj;
        if (data.msg) {
            this.msgLab.text = data.msg;
        }
        //如果是有取消的
        if (data.type == 2) {
            this.sureBtn.visible = true;
            this.cancleBtn.visible = true;
            this.sureBtn.x = this.btncenterX - this.btnOffset;
            this.cancleBtn.x = this.btncenterX + this.btnOffset;
        }
        else {
            this.sureBtn.visible = true;
            this.cancleBtn.visible = false;
            this.sureBtn.x = this.btncenterX;
        }
    }
    touchHandler(target) {
        // this.close();
        WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.AlertUILocal);
        var copyArr = TableUtils_1.default.copyOneArr(this._cacheDataArr);
        this._cacheDataArr = [];
        for (var i = 0; i < copyArr.length; i++) {
            var data = copyArr[i];
            if (data) {
                if (GlobalData_1.default.isGameDestory) {
                    return;
                }
                var callBack = data.callBack;
                var thisObj = data.thisObj;
                if (callBack) {
                    callBack.call(thisObj);
                }
            }
        }
    }
    reConnect() {
        if (this._callback)
            this._callback.call(this._thisObj);
        // this.close();
        WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.AlertUILocal);
    }
}
exports.default = AlertUILocal;
AlertUILocal.res = null;
AlertUILocal.instance = null;
//# sourceMappingURL=AlertUILocal.js.map