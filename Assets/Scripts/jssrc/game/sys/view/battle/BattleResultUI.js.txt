"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WindowManager_1 = require("../../../../framework/manager/WindowManager");
const WindowCfgs_1 = require("../../consts/WindowCfgs");
const BattleServer_1 = require("../../server/BattleServer");
const LevelFunc_1 = require("../../func/LevelFunc");
const BattleSceneManager_1 = require("../../manager/BattleSceneManager");
const StringUtils_1 = require("../../../../framework/utils/StringUtils");
const ButtonUtils_1 = require("../../../../framework/utils/ButtonUtils");
const UserExtModel_1 = require("../../model/UserExtModel");
const Client_1 = require("../../../../framework/common/kakura/Client");
const GlobalParamsFunc_1 = require("../../func/GlobalParamsFunc");
const TranslateFunc_1 = require("../../../../framework/func/TranslateFunc");
const ShareOrTvManager_1 = require("../../../../framework/manager/ShareOrTvManager");
const ShareTvOrderFunc_1 = require("../../func/ShareTvOrderFunc");
const DataResourceConst_1 = require("../../consts/DataResourceConst");
const UIBaseView_1 = require("../../../../framework/components/UIBaseView");
class BattleResultUI extends UIBaseView_1.default {
    constructor() {
        super();
        this.bgAlpha = 0;
        new ButtonUtils_1.ButtonUtils(this.nextBtn, this.onNextBtnClick, this);
        new ButtonUtils_1.ButtonUtils(this.returnBtn, this.onReturnBtnClick, this);
        new ButtonUtils_1.ButtonUtils(this.restartBtn, this.onRestartBtnClick, this);
        new ButtonUtils_1.ButtonUtils(this.upgradeBtn, this.onUpgradeBtnClick, this);
        // this.receiveBtn.on(Laya.Event.CLICK, this, this.onReceiveBtnClick);
        // this.restartBtn.on(Laya.Event.CLICK, this, this.onRestartBtn);
        // this.returnBtn.on(Laya.Event.CLICK, this, this.onReturnBtnClick);
        // ScreenAdapterTools.alignNotch(this.coinGroup, ScreenAdapterTools.Align_MiddleTop);
        // ScreenAdapterTools.alignNotch(this.goldGroup, ScreenAdapterTools.Align_MiddleTop);
        // new ButtonUtils(this.doubleBtn, this.onDoubleBtnClick, this, "uisource/common/common_bt_aniu1.png", "uisource/common/common_bt_aniu1.png");
    }
    setData(data) {
        // WindowManager.CloseUI(WindowCfgs.BattleUI);
        //隐藏战斗ui
        var battleUi = WindowManager_1.default.getUIByName(WindowCfgs_1.WindowCfgs.BattleUI);
        battleUi.visible = false;
        this.levelId = data.levelId;
        this.rank = data.rank;
        // SoundManager.playSE(MusicConst.SOUND_RACE_WIN);
        var levelInfo = LevelFunc_1.default.instance.getLevelInfoById(this.levelId);
        var reward = levelInfo.reward;
        var getCoin = 0;
        var getGold = 0;
        if (this.rank >= 3) {
            var rewardInfo = reward[0].split(",");
            if (rewardInfo[0] == 2) {
                getCoin += Number(rewardInfo[1]);
            }
            if (rewardInfo[0] == 3) {
                getGold += Number(rewardInfo[1]);
            }
            this.resultText.setText("完美通关");
            this.restartBtn.visible = true;
            this.upgradeBtn.visible = false;
        }
        else {
            this.resultText.changeText("通关");
            var freeSpType = ShareOrTvManager_1.default.instance.getShareOrTvType(ShareTvOrderFunc_1.default.SHARELINE_UPGRADE);
            //没有视频或者分享，加体力按钮隐藏
            if (freeSpType != ShareOrTvManager_1.default.TYPE_QUICKRECEIVE) {
                this.restartBtn.visible = false;
                this.upgradeBtn.visible = true;
            }
            else {
                this.restartBtn.visible = true;
                this.upgradeBtn.visible = false;
            }
        }
        if (this.rank >= 2) {
            var rewardInfo = reward[1].split(",");
            if (rewardInfo[0] == 2) {
                getCoin += Number(rewardInfo[1]);
            }
            if (rewardInfo[0] == 3) {
                getGold += Number(rewardInfo[1]);
            }
        }
        if (this.rank >= 1) {
            var rewardInfo = reward[2].split(",");
            if (rewardInfo[0] == 2) {
                getCoin += Number(rewardInfo[1]);
            }
            if (rewardInfo[0] == 3) {
                getGold += Number(rewardInfo[1]);
            }
        }
        this.showTween();
        this.bg.alpha = this.bgAlpha;
        this.coinNum.text = "+" + StringUtils_1.default.getCoinStr(String(getCoin));
        // this.goldNum.text = StringUtils.getCoinStr(UserModel.instance.getGold());
        this.star1.setSkin("native/main/common_image_xing2.png");
        this.star2.setSkin("native/main/common_image_xing2.png");
        this.star3.setSkin("native/main/common_image_xing2.png");
        BattleServer_1.default.battleResult(this.levelId, this.rank, null, this);
        var allInfo = LevelFunc_1.default.instance.getLevel();
        var info = allInfo.scenes[0].level;
        var levelNum = 0;
        for (var index in info) {
            levelNum++;
        }
        if (this.levelId + 1 > levelNum) {
            this.nextBtn.visible = false;
        }
        else {
            this.nextBtn.visible = true;
        }
        8;
    }
    onClose() {
    }
    anime() {
        this.star1.visible = true;
        this.star2.visible = true;
        this.star3.visible = true;
        var scale = 2;
        var time = 300;
        var index = 0;
        if (this.rank >= 1) {
            this.starAnime(this.star1, index, time, scale);
            index++;
        }
        if (this.rank >= 2) {
            this.starAnime(this.star2, index, time, scale);
            index++;
        }
        if (this.rank >= 3) {
            this.starAnime(this.star3, index, time, scale);
            index++;
        }
        // Laya.timer.once(time * (index + 1), this, this.tweenEffect);
        // ();
    }
    starAnime(star, index, time, scale) {
        // star.visible = false;
    }
    showTween() {
    }
    setBgAlphaShow() {
    }
    onNextBtnClick() {
        //否则计算体力 体力 = 服务器告诉的体力 + (当前服务器时间上次 - 上次服务器刷新体力的时间) / 体力恢复间隔   如果算出来的值比最大的大 则体力等于表里的最大值 即回满了
        var nowPower = UserExtModel_1.default.instance.getLastFreshPower() + Math.floor((Client_1.default.instance.serverTime - UserExtModel_1.default.instance.getLastPowerFreshTime()) / GlobalParamsFunc_1.default.instance.getDataNum('spRestoreTime'));
        var maxSp = GlobalParamsFunc_1.default.instance.getDataNum('maxSp');
        if (UserExtModel_1.default.instance.getLastFreshPower() > maxSp) {
            //如果服务器告诉的体力大于最大的  则体力等于服务器给的
            nowPower = UserExtModel_1.default.instance.getLastFreshPower();
        }
        else if (nowPower > maxSp) {
            nowPower = maxSp;
        }
        if (nowPower < GlobalParamsFunc_1.default.instance.getDataNum('levelSpCost')) {
            var freeSpType = ShareOrTvManager_1.default.instance.getShareOrTvType(ShareTvOrderFunc_1.default.SHARELINE_FREE_SP);
            //没有视频或者分享，加体力按钮隐藏
            if (freeSpType != ShareOrTvManager_1.default.TYPE_QUICKRECEIVE) {
                WindowManager_1.default.OpenUI(WindowCfgs_1.WindowCfgs.FreePowerUI, { type: DataResourceConst_1.default.SP });
            }
            else {
                WindowManager_1.default.ShowTip(TranslateFunc_1.default.instance.getTranslate("#tid_power_01"));
            }
            return;
        }
        WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.BattleResultUI);
        BattleServer_1.default.battleStart(null, this);
        var battleUi = WindowManager_1.default.getUIByName(WindowCfgs_1.WindowCfgs.BattleUI);
        battleUi.visible = true;
        battleUi.onRightBtn();
        // BattleSceneManager.instance.replayBattle();
    }
    onRestartBtnClick() {
        WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.BattleResultUI);
        var battleUi = WindowManager_1.default.getUIByName(WindowCfgs_1.WindowCfgs.BattleUI);
        battleUi.visible = true;
        battleUi.resetStatus();
        BattleSceneManager_1.default.instance.replayBattle();
    }
    onReturnBtnClick() {
        this.returnBtnClick();
    }
    /**这里点击事件包了一层 */
    returnBtnClick() {
        WindowManager_1.default.OpenUI(WindowCfgs_1.WindowCfgs.GameMainUI);
        WindowManager_1.default.CloseUI(WindowCfgs_1.WindowCfgs.BattleResultUI);
        var battleUi = WindowManager_1.default.getUIByName(WindowCfgs_1.WindowCfgs.BattleUI);
        battleUi.visible = true;
        BattleSceneManager_1.default.instance.exitBattle();
        // WindowManager.SwitchUI(WindowCfgs.GameMainUI, WindowCfgs.BattleResultUI);
    }
    onUpgradeBtnClick() {
        ShareOrTvManager_1.default.instance.shareOrTv(ShareTvOrderFunc_1.default.SHARELINE_UPGRADE, ShareOrTvManager_1.default.TYPE_ADV, {
            id: "1",
            extraData: {}
        }, this.successCall, null, this);
    }
    successCall() {
        WindowManager_1.default.OpenUI(WindowCfgs_1.WindowCfgs.BattleResultUI, { levelId: this.levelId, rank: 3 });
    }
    recvMsg(cmd, data) {
        switch (cmd) {
        }
    }
}
exports.default = BattleResultUI;
BattleResultUI.res = ["gameui/BattleResult.scene",
];
//# sourceMappingURL=BattleResultUI.js.map