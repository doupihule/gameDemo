"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Client_1 = require("../../../framework/common/kakura/Client");
const UserModel_1 = require("../model/UserModel");
const UserExtModel_1 = require("../model/UserExtModel");
const SingleCommonServer_1 = require("../../../framework/server/SingleCommonServer");
const CacheManager_1 = require("../../../framework/manager/CacheManager");
const StorageCode_1 = require("../consts/StorageCode");
/*
userExt
 */
class UserExtServer {
    /*
    删除邀请好友标记
     */
    static delInviteFriendSign(data, callBack, thisObj) {
    }
    //授权后发送用户信息到服务器
    static sendUserInfoAfterAuthorize(method, params, callback, thisObj, addParam = null) {
        Client_1.default.instance.startRequestCloud(method, params, callback, thisObj, addParam);
    }
    /**
     * 离线金币领取
     * @param coinNum
     * @param landData
     * @param callBack
     * @param thisObj
     */
    static getOfflineIncome(coinNum, landData, offlineCoinTimes, callBack, thisObj) {
        var upData = {};
        var deData = {};
        var coin = Number(UserModel_1.default.instance.getCoin());
        coin += coinNum;
        var userExt = {};
        userExt["upCoinTime"] = Client_1.default.instance.serverTimeMicro;
        upData["land"] = landData;
        upData["coin"] = coin;
        upData["userExt"] = userExt;
        var backData = Client_1.default.instance.doDummyServerBack(null, upData, deData);
        // 更新领取次数
        CacheManager_1.default.instance.setLocalCache(StorageCode_1.default.storage_offlineCoinCount, offlineCoinTimes);
        if (callBack) {
            callBack.call(thisObj, backData);
        }
        SingleCommonServer_1.default.startSaveClientData();
    }
    /**获得界面领取奖励 */
    static getCommonReward(reward, callBack = null, thisObj = null) {
        var upData = {};
        var deData = {};
        var userExt = {};
        var coin = Number(UserModel_1.default.instance.getCoin());
        var gold = Number(UserModel_1.default.instance.getGiftGold());
        if (reward) {
            if (reward.coin && reward.coin > 0) {
                coin += reward.coin;
                upData["coin"] = coin;
            }
            if (reward.gold && reward.gold > 0) {
                gold += reward.gold;
                upData["giftGold"] = gold;
            }
            if (reward.sp && reward.sp > 0) {
                UserExtModel_1.default.instance.changeSp(reward.sp);
                userExt['sp'] = UserExtModel_1.default.instance.getNowSp();
                userExt['upSpTime'] = UserExtModel_1.default.instance.getUpTime();
                upData["userExt"] = userExt;
            }
        }
        var backData = Client_1.default.instance.doDummyServerBack(null, upData, deData);
        if (callBack) {
            callBack.call(thisObj, backData);
        }
        SingleCommonServer_1.default.startSaveClientData();
    }
}
exports.default = UserExtServer;
//# sourceMappingURL=UserExtServer.js.map