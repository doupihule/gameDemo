"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseFunc_1 = require("../../../framework/func/BaseFunc");
const GameConsts_1 = require("../consts/GameConsts");
const GlobalParamsFunc_1 = require("./GlobalParamsFunc");
const VectorTools_1 = require("../../../framework/utils/VectorTools");
class BattleFunc extends BaseFunc_1.default {
    constructor() {
        super();
        this.speedToFrameRatio = 0.0001 / (GameConsts_1.default.gameFrameRate);
        //万分之一单位/秒^2 的加速度单位转化
        this.addSpeedToFrameRatio = 0.0001 / (GameConsts_1.default.gameFrameRate * GameConsts_1.default.gameFrameRate);
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new BattleFunc();
        }
        return this._instance;
    }
    getCfgsPathArr() {
        return ["Level",
            "TranslateError_json", "TranslateGlobal_json", "TranslateGuide_json", "TranslateMonster_json", "TranslateRole_json", "TranslateShare_json",];
    }
    //获取地形数据
    getTerrainData(id) {
        // return this.getCfgDatas("Road", "1");
        return this.getCfgDatas("Road", id);
    }
    //获取装饰数据
    getDecorateData(id) {
        return this.getCfgDatas("Decoration", id);
    }
    getSkyData() {
        return "scene_ui_beijing";
    }
    //获取角色的模型
    getRoleModel(id) {
        return this.getRoleInfoData(id).model;
    }
    //获取角色对应的info数据
    getRoleInfoData(id) {
        return this.getCfgDatas("Role", id);
    }
    //根据模型获取视图的url地址
    getViewUrlByModelId(id, model) {
        var url = ("3dmodels/" + model + "/Conventional/" + id + ".lh");
        LogsManager.echo(url, "__getViewUrlByModelId");
        return url;
    }
    //将毫秒转化成帧
    turnMinisecondToframe(minisecond) {
        return Math.round(Number(minisecond) * GameConsts_1.default.gameFrameRate / 1000);
    }
    //将万分之1米/秒速度转化成 米/帧
    turnSpeedToFrame(targetSpeed) {
        return Number(targetSpeed) * this.speedToFrameRatio;
    }
    //将米/帧速度转化成 千米/小时
    turnSpeedToKmh(targetSpeed) {
        return targetSpeed * GameConsts_1.default.gameFrameRate * 3.6;
    }
    //将 万分之一角度/s 转化成 弧度/帧
    turnRotateSpeedToFrame(targetRotateSpeed) {
        return targetRotateSpeed / GameConsts_1.default.gameFrameRate * BattleFunc.angletoRad / 10000;
    }
    //将 万分之一角度加速度/s 转化成 弧度/帧
    turnRotateAddSpeedToFrame(targetRotateSpeed) {
        return targetRotateSpeed * BattleFunc.angletoRad * this.addSpeedToFrameRatio;
    }
    //将万分之1米/秒^2 转化成  米/帧^2
    turnAddSpeedToFrame(addSpeed) {
        return Number(addSpeed) * this.addSpeedToFrameRatio;
    }
    //初始化全局参数. 策划配置的数需要转化.而且为了访问方便.
    static initGlobalParams() {
        this.extraTurnPowerRatio = GlobalParamsFunc_1.default.instance.getDataNum("extraTurnPowerTime") / 10000;
        this.gravityAddSpeed = -BattleFunc.instance.turnAddSpeedToFrame(GlobalParamsFunc_1.default.instance.getDataNum("gravity"));
        this.flyForceRatio = GlobalParamsFunc_1.default.instance.getDataNum("falldownRatio") / 10000;
    }
    //转化路线格式 配表格式 {地形id,地形数量}
    turnRoadList(arr) {
        var resultArr = [];
        for (var i = 0; i < arr.length; i++) {
            var tempInfo = arr[i];
            var roadId = tempInfo[0];
            var roadNums = Number(tempInfo[1]);
            for (var j = 0; j < roadNums; j++) {
                resultArr.push(roadId);
            }
        }
        return resultArr;
    }
}
exports.default = BattleFunc;
BattleFunc.moveSpeed = 1;
BattleFunc.angletoRad = Math.PI / 180;
BattleFunc.radtoAngle = 180 / Math.PI;
//1米大概等于多少像素
BattleFunc.miToPixel = 640 / 18;
BattleFunc.pixelToMi = 18 / 640;
//一周
BattleFunc.twopi = Math.PI * 2;
//90°对应的弧度
BattleFunc.halfpi = Math.PI / 2;
//摄像机跟随车的相对坐标
BattleFunc.cameraFollowPos = VectorTools_1.default.createVec3(0, 13, 18.3);
BattleFunc.cameraFollowRotation = VectorTools_1.default.createVec3(18.27, -175, 0);
//默认的y坐标
BattleFunc.defaultYpos = 0.2;
//原点0,0,0 禁止修改
BattleFunc.originPoint = VectorTools_1.default.createVec3();
//定义一个临时对象.用来存储临时属性的
BattleFunc.tempObject = {};
//记录一个临时点 战斗逻辑中间使用的过渡点
BattleFunc.tempPoint = VectorTools_1.default.createVec3(0, 0, 0);
BattleFunc.tempPoint2 = VectorTools_1.default.createVec3(0, 0, 0);
BattleFunc.tempPoint3 = VectorTools_1.default.createVec3(0, 0, 0);
BattleFunc.tempPoint4 = VectorTools_1.default.createVec3(0, 0, 0);
//临时table 
BattleFunc.tempArr = [];
//前车离我多远后隐藏.  暂定200米
BattleFunc.carHideFrontDistance = 200;
//后车离我多远后隐藏 暂定20米
BattleFunc.carHideBackDistance = -20;
//默认车的碰撞cd为5帧
BattleFunc.carHitCd = 3;
//车辆长度 米
BattleFunc.carLength = 5;
BattleFunc.halfCarLength = BattleFunc.carLength / 2;
BattleFunc.carMinDis = BattleFunc.carLength * 0.8;
//长度单位的缩放
BattleFunc.lengthScale = 3;
//单车道宽度
BattleFunc.trackWidth = 3.2;
//总赛道宽度
BattleFunc.totalTrackWidth = 24;
//赛道边界 最大不能超过的值
BattleFunc.rightBorderPos = BattleFunc.totalTrackWidth * 0.47;
BattleFunc.leftBorderPos = -BattleFunc.totalTrackWidth * 0.47;
//没动力时的减速度 假定 60帧降到0
BattleFunc.reduceSpd = -40 / 3600;
//主车出生点
BattleFunc.roleBirthTrackPos = -BattleFunc.trackWidth;
//车换赛道最大摆动角度
BattleFunc.maxHeadRadtion = 15 * BattleFunc.angletoRad;
//重力加速度 9.8米/秒^2 转化成帧
BattleFunc.gravityAddSpeed = -9.8 * 3 / 3600;
//半车道宽度
BattleFunc.halfTrackWidth = 1.6;
//同时最多显示多少快地形
BattleFunc.terrainShowNums = 8;
// 到达终点后的减速度
BattleFunc.endReduceSpeed = 0.2 * BattleFunc.pixelToMi;
//默认战斗的随机因子序号为10
BattleFunc.battleRandomIndex = 10;
//落地时的安全角度
BattleFunc.saveAngleArea = [-45 * BattleFunc.angletoRad, 45 * BattleFunc.angletoRad];
//额外 翻转圈数的倍率
BattleFunc.extraTurnPowerRatio = 0.5;
//满足加速时 瞬间提速百分比 
BattleFunc.flyForceRatio = 0.2;
BattleFunc.flyForceMinRatio = 0.05;
//# sourceMappingURL=BattleFunc.js.map