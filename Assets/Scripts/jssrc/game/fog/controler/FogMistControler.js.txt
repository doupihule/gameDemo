"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FogFunc_1 = require("../../sys/func/FogFunc");
const FogModel_1 = require("../../sys/model/FogModel");
const FogConst_1 = require("../../sys/consts/FogConst");
/**总控制器 */
class FogMistControler {
    constructor(controler) {
        //定义临时 边角 检测数组
        this._tempBorderResultArr = [false, false, false, false];
        this._tempVectorResultArr = [false, false, false, false];
        this.controler = controler;
        this._mistsData = [];
    }
    //初始化迷雾数据
    initMistData() {
        var xNums = FogFunc_1.default.line;
        var yNums = FogFunc_1.default.row;
        for (var j = 0; j <= yNums; j++) {
            this._mistsData[j] = [];
            for (var i = 0; i <= xNums; i++) {
                var data = FogModel_1.default.instance.getCellInfoById(i + "_" + j);
                if (i == 2 && j == 6) {
                    LogsManager.echo("kasjdkasd", data);
                }
                if (!data) {
                    this._mistsData[j][i] = false;
                }
                else {
                    //true表示解锁 false表示未解锁区域
                    if (data.ste && data.ste == FogConst_1.default.FOG_CELLSTATE_OPEN) {
                        this._mistsData[j][i] = true;
                    }
                    else {
                        this._mistsData[j][i] = false;
                    }
                }
            }
        }
    }
    getDebugText() {
        var tempVectorResultArr = this._tempVectorResultArr;
        var str = "";
        for (var i = 0; i < tempVectorResultArr.length; i++) {
            str += (tempVectorResultArr[i] == false && "0" || 1);
        }
        return str;
    }
    /**获取一个格子的迷雾状态 ,false是未解锁,true是解锁 */
    getOneCellState(x, y) {
        if (!this._mistsData[y]) {
            return false;
        }
        return this._mistsData[y][x];
    }
    //解锁一个格子
    onLockOneCell(x, y) {
        this._mistsData[y][x] = true;
    }
    dispose() {
        this.controler = null;
    }
}
exports.default = FogMistControler;
//迷雾管理器
//缓动时间
FogMistControler.tweenTime = 800;
//边相对应中心的偏移坐标. 迷雾周边8个格子 分为4个边 4个角
FogMistControler.borderToPos = [
    [0, 1], [1, 0], [0, -1], [-1, 0],
];
//顶点相对应的中心偏移坐标
FogMistControler.vecToPos = [
    [1, 1], [1, -1], [-1, -1], [-1, 1]
];
//边相邻的角 序号
FogMistControler.borderToVecIndex = [
    [3, 0],
    [0, 1],
    [1, 2],
    [2, 3]
];
//周围一圈8个点
FogMistControler.rectNearPoints = [
    [-1, 1], [0, 1], [1, 1],
    [-1, 0], [1, 0],
    [-1, -1], [0, -1], [1, -1],
];
//根据缺失的点数判断用哪个图片 以及对应角度 以及对应的套数
FogMistControler.imageToRotation = {
    "0": [0, 2],
    "1": [0, 1],
    "2_1": [0, 1],
    "2_2": [180, 1],
    "3": [-90, 3],
    "4": [0, 4],
};
FogMistControler.imageToNums = [];
//微暗矩阵
FogMistControler.littledarkMatrix = [
    0.6, 0, 0, 0, 0,
    0, 0.6, 0, 0, 0,
    0, 0, 0.6, 0, 0,
    0, 0, 0, 1, 0,
];
//# sourceMappingURL=FogMistControler.js.map