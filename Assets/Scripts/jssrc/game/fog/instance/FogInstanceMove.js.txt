"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BattleFunc_1 = require("../../sys/func/BattleFunc");
const LogsManager_1 = require("../../../framework/manager/LogsManager");
const BattleConst_1 = require("../../sys/consts/BattleConst");
const FogInstanceBasic_1 = require("./FogInstanceBasic");
const InstanceMoveEntity_1 = require("../../battle/instance/InstanceMoveEntity");
const InstanceMoveMultyEntity_1 = require("../../battle/instance/InstanceMoveMultyEntity");
const FogFunc_1 = require("../../sys/func/FogFunc");
const VectorTools_1 = require("../../../framework/utils/VectorTools");
/**
 * 游戏中所有可以运动的对象的基类
 * 如果需要对instance的view进行拖拽, 那么需要在onTouchMove里面 改变的应该是 this.pos.x 而不能直接去设置myview.x,myView.y
 * 禁止在任何地址直接设置myView的坐标
 */
class FogInstanceMove extends FogInstanceBasic_1.default {
    constructor(controler) {
        super(controler);
        //当前运动到点类型 0表示不运动.1 表示运动到目标点
        this.movePointType = 0;
        this._myState = "stand";
        //当前移动状态 1到达边缘 2 进入边缘
        this.moveState = 0;
        this.speed = VectorTools_1.default.createVec3();
        this.addSpeed = VectorTools_1.default.createVec3();
        this.unitVector = VectorTools_1.default.createVec3();
    }
    //初始化站立状态(也就是闲置)
    initStand() {
        this._myState = BattleConst_1.default.state_stand;
        this.speed.x = 0;
        this.speed.y = 0;
        this.speed.z = 0;
    }
    //初始化运动 ,子类可根据这个继承,并改变视图的朝向或者 动作显示
    initMove(x = 0, y = 0, z = 0, outAdjustWay = false) {
        this.speed.x = x;
        this.speed.y = y;
        this.speed.z = z;
        this._myState = BattleConst_1.default.state_move;
    }
    //重写执行逻辑函数
    doAiLogical() {
        this.checkMoveEnd();
    }
    //更新速度,根据需要扩展,比如加速度,重力加速度.
    updateSpeed() {
        //如果是静止的不执行减少运算
        if (this._myState == BattleConst_1.default.state_stand) {
            return;
        }
        this.speed.x = this.setSpeed(this.speed.x, this.addSpeed.x);
        //空中状态才执行下落
        if (this._myState == BattleConst_1.default.state_jump) {
            this.speed.y = this.setSpeed(this.speed.y, this.addSpeed.y);
        }
        this.speed.z = this.setSpeed(this.speed.z, this.addSpeed.z);
    }
    //设置速度=速度*阻力系数+加速度
    setSpeed(speedSpace, addSpead) {
        //更新加速度		
        speedSpace += addSpead;
        return speedSpace;
    }
    //重写运动函数 主要是更新坐标
    movePos() {
        //stand状态不执行
        if (this._myState == BattleConst_1.default.state_stand) {
            return;
        }
        // this.pos.x = Math.round(this.pos.x + this.speed.x);
        // this.pos.y = Math.round(this.pos.y + this.speed.y);
        // this.pos.z = Math.round(this.pos.z + this.speed.z);
        this.pos.x += this.speed.x;
        this.pos.y += this.speed.y;
        this.pos.z += this.speed.z;
    }
    //运动到目标点 ,只针对平面运动,一般是x,y. movePointType 禁止外部调用
    moveToOnePoint(x, y, z = 0, spd = 0, callFunc = null, thisObj = null, callParams = null, expandParams = null, movePointType = 1) {
        if (!this._moveParams) {
            this._moveParams = new InstanceMoveEntity_1.default(VectorTools_1.default.createVec3(x, y, z));
        }
        if (!spd || spd == 0) {
            spd = BattleFunc_1.default.moveSpeed;
        }
        this._moveParams.target.x = x;
        this._moveParams.target.y = y;
        this._moveParams.target.z = z;
        var speed = spd;
        var temp = BattleFunc_1.default.tempPoint;
        //计算目标向量差值
        VectorTools_1.default.subtract(this._moveParams.target, this.pos, temp);
        var distance = VectorTools_1.default.scalarLength(temp);
        //向量归一
        VectorTools_1.default.normalize(temp, this.unitVector);
        //计算速度单位向量 乘以速度绝对值
        VectorTools_1.default.scale(this.unitVector, speed, this._moveParams.initSpeed);
        this._moveParams.moveFrame = 0;
        this._moveParams.callParams = callParams;
        //设置预期运动时间
        this._moveParams.totalFrame = Math.ceil(distance / speed);
        this._moveParams.callFunc = callFunc;
        this._moveParams.thisObj = thisObj;
        this._moveParams.spd = spd;
        // this._moveParams = params;
        this.movePointType = movePointType;
        this.initMove(this._moveParams.initSpeed.x, this._moveParams.initSpeed.y, this._moveParams.initSpeed.z);
        this.checkMoveEnd();
    }
    //根据传递的entity 运动
    moveToOnePointByEntity(enetity, movePointType = 1, isGrid = false) {
        var x = enetity.target.x, y = enetity.target.y;
        if (x == null && enetity.target.y != null) {
            x = enetity.target.x;
            y = enetity.target.y;
        }
        this.moveToOnePoint(x, y, 0, enetity.spd, enetity.callFunc, enetity.thisObj, enetity.callParams, enetity.expandParams, movePointType);
    }
    //按一组点去运动
    // moveToGroupPoints(params:InstanceMoveMultyEntity){
    moveToGroupPoints(pointArr, speed = 0, callFunc = null, thisObj = null, loopParams = null) {
        // this._multyparams = params;
        if (!this._multyparams) {
            this._multyparams = new InstanceMoveMultyEntity_1.default();
        }
        if (speed == 0 || speed == null) {
            speed = BattleFunc_1.default.moveSpeed;
        }
        this._multyparams.initData(pointArr, speed, callFunc, thisObj, loopParams, false);
        var param = this._multyparams.getNextpos();
        if (!param) {
            LogsManager_1.default.errorTag(null, "没有找到当前运动的点");
            return;
        }
        this.moveToOnePointByEntity(param, FogInstanceMove.moveType_multyPoint, false);
    }
    //判断是否到达终点
    checkMoveEnd() {
        if (this.movePointType == FogInstanceMove.moveType_none) {
            return;
        }
        //如果是做缓动行为的
        if (this.movePointType == FogInstanceMove.moveType_tween) {
            this.pos.x = this.x;
            this.pos.y = this.y;
            return;
        }
        this._moveParams.moveFrame++;
        var speedRadio = this._moveParams.getSpeedRadio();
        //根据moveParams 实时刷新速度
        this.speed.x = this._moveParams.initSpeed.x * speedRadio;
        this.speed.y = this._moveParams.initSpeed.y * speedRadio;
        this.speed.z = this._moveParams.initSpeed.z * speedRadio;
        var distance = VectorTools_1.default.distance(this._moveParams.target, this.pos);
        var speedAbs = VectorTools_1.default.scalarLength(this.speed);
        //如果距离小于一个速度绝对值 那么判定到达
        //有需要可以扩展更复杂的行为,比如添加摩擦力,飞跃行为等等
        if (!this.moveState && distance >= FogFunc_1.default.itemHeight / 2 && distance < (FogFunc_1.default.itemHeight / 2 + FogFunc_1.default.busHeight / 2) + speedAbs) {
            this.moveState += 1;
            this.enterSide("side");
        }
        var whetherEnd = false;
        if (distance < speedAbs && this.moveState == 1) {
            whetherEnd = true;
        }
        if (whetherEnd) {
            this.pos.x = this._moveParams.target.x;
            this.pos.y = this._moveParams.target.y;
            this.pos.z = this._moveParams.target.z;
            if (this.movePointType == FogInstanceMove.moveType_onePoint) {
                this.overFinalPoint();
            }
            else {
                var param = this._multyparams.getNextpos();
                //如果没有给返回值,直接到达终点
                if (!param) {
                    this.overFinalPoint();
                }
                else {
                    this.onArriveOnePoint();
                    // this._moveParams = param;
                    //重新开始运动到下一个点
                    this.moveToOnePointByEntity(param, FogInstanceMove.moveType_multyPoint, this._multyparams.isGrid);
                }
            }
        }
        else {
        }
    }
    //到达一个点 ,子类重写,根据需要转身,或者干嘛 ,这个是针对运动到多个点的运动行为判断的 
    onArriveOnePoint() {
    }
    //判断是否有运动类型行为
    checkHasMoveType() {
        if (this.movePointType == FogInstanceMove.moveType_none) {
            return false;
        }
        return true;
    }
    //到达边缘回调
    enterSide(type) {
        var callBack, thisObj;
        if (this._moveParams) {
            callBack = this._moveParams.callFunc;
            thisObj = this._moveParams.thisObj;
            if (callBack)
                callBack.call(thisObj, type);
        }
    }
    //到达终点
    overFinalPoint() {
        this.resetMoveState();
        var callBack, thisObj;
        if (this._moveParams) {
            callBack = this._moveParams.callFunc;
            thisObj = this._moveParams.thisObj;
            this._moveParams.reset();
            if (callBack)
                callBack.call(thisObj);
        }
        if (this._multyparams) {
            callBack = this._multyparams.callFunc;
            thisObj = this._multyparams.thisObj;
            this._multyparams.dispose();
            this._multyparams = null;
            if (callBack)
                callBack.call(thisObj);
        }
    }
    resetMoveState() {
        //初始化变成站立状态,通知子类改变动作行为
        this.moveState = 0;
        this.initStand();
        this.movePointType = FogInstanceMove.moveType_none;
    }
}
exports.default = FogInstanceMove;
//没有运动
FogInstanceMove.moveType_none = 0;
//运动到一个点
FogInstanceMove.moveType_onePoint = 1;
//运动到一个格子边缘
FogInstanceMove.moveType_oneSide = 4;
//进入到一个格子
FogInstanceMove.moveType_EnterSide = 5;
//运动到多个点
FogInstanceMove.moveType_multyPoint = 2;
//做tween缓动行为
FogInstanceMove.moveType_tween = 3;
FogInstanceMove.state_stand = "stand";
FogInstanceMove.state_move = "move";
//# sourceMappingURL=FogInstanceMove.js.map