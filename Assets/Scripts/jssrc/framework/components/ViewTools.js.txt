"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const csharp_1 = require("csharp");
const BaseViewExpand_1 = require("./BaseViewExpand");
const UICompConst_1 = require("../consts/UICompConst");
const ButtonExpand_1 = require("./ButtonExpand");
const ImageExpand_1 = require("./ImageExpand");
const ListExpand_1 = require("./ListExpand");
const BaseContainer_1 = require("./BaseContainer");
const LabelExpand_1 = require("./LabelExpand");
const SpineGraphicExpand_1 = require("./SpineGraphicExpand");
const ResourceCommonConst_1 = require("../consts/ResourceCommonConst");
const ResourceManager_1 = require("../manager/ResourceManager");
const Base3dViewExpand_1 = require("./d3/Base3dViewExpand");
const UIBaseView_1 = require("./UIBaseView");
const PlaneExpand_1 = require("./d3/PlaneExpand");
const CameraExpand_1 = require("./d3/CameraExpand");
const PhysicsColliderExpand_1 = require("./physics/PhysicsColliderExpand");
const Animation3DExpand_1 = require("./d3/Animation3DExpand");
const Particle3dExpand_1 = require("./d3/Particle3dExpand");
const RigidbodyExpand_1 = require("./physics/RigidbodyExpand");
const TrailRendererExpand_1 = require("./d3/TrailRendererExpand");
class ViewTools {
    //自动绑定cobj
    static autoBindingCObj(cobj, forceBinding = false, targetCompType = null) {
        var baseView = ViewTools.cobjMap.get(cobj);
        if (!baseView) {
            baseView = this.createBaseViewByCobj(cobj, forceBinding, targetCompType);
            if (baseView) {
                ViewTools.cobjMap.set(cobj, baseView);
            }
        }
        return baseView;
    }
    static init() { }
    //绑定c对象和 baseview
    static bindCobjToBaseView(cobj, baseView) {
        ViewTools.cobjMap.set(cobj, baseView);
    }
    //清理c对象和baseview
    static clearCobjToBaseView(cobj) {
        ViewTools.cobjMap.delete(cobj);
    }
    static getBaseViewByCobj(cobj) {
        return ViewTools.cobjMap.get(cobj);
    }
    //forceBinding 是否强制绑定.主要是针对没有定义名字的对象. 比如有时也需要通过getChildAt获取
    static createBaseViewByCobj(cobj, forceBinding = false, targetCompType = null) {
        var name = cobj.name;
        var uiType;
        //如果手动指定组件类型
        if (targetCompType) {
            uiType = targetCompType;
        }
        else {
            uiType = name.split("_")[0];
        }
        var viewClassName = this.compClassMap[uiType];
        if (!viewClassName) {
            if (forceBinding) {
                LogsManager.echo("这个对象没有指定合法命名", name);
                var baseView = new BaseViewExpand_1.default();
                baseView.setCObject(cobj);
                return baseView;
            }
            return null;
        }
        else {
            //如果是按钮
            if (uiType == UICompConst_1.default.comp_btn) {
                return new ButtonExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_img) {
                return new ImageExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_ctn) {
                return new BaseContainer_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_label) {
                return new LabelExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_list) {
                return new ListExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_input) {
                return new LabelExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_spine) {
                return new SpineGraphicExpand_1.default(null, null, cobj);
            }
            else if (uiType == UICompConst_1.default.comp_base3d) {
                return new Base3dViewExpand_1.default().setCObject(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_ui) {
                return new UIBaseView_1.default().setCObject(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_base) {
                return new BaseViewExpand_1.default().setCObject(cobj);
            }
        }
        LogsManager.warn("没有找到对应的类型--", name, uiType);
        return null;
    }
    static createContainer(name) {
        var ctn = new BaseContainer_1.default();
        ctn.name = name;
        return ctn;
    }
    //第一次创建图片的时候 必定 调整尺寸
    static createImage(url = "", boundleName = ResourceCommonConst_1.default.boundle_uiimage) {
        var img = new ImageExpand_1.default(null);
        if (url) {
            img.setSkin(url, boundleName, true);
        }
        return img;
    }
    /**
     *   align 对齐方式 0左上,1中上,2右上,3左中,4中中,5右中,6左下,7中下,8右下 默认4 中中
         FontStyle 0 normal,  1 bold(加黑)  2 Italic(斜体), 3 BoldAndItalic
         supportRichText是否开启富文本 默认不开启
         lineSpace 行间距默认是1 建议值在1-1.2之间
     */
    static createLabel(str, wid = 100, hei = 50, fontSize = 24, align = 4, supportRichText = false, fontStyle = 0, lineSpace = 1) {
        return new LabelExpand_1.default(null);
    }
    //创建一个平面
    static createPlaneBy3p(v1, v2, v3) {
        var plane = new PlaneExpand_1.default();
        plane.initWith3P(v1, v2, v3);
        return plane;
    }
    //创建一个3d容器
    static create3dContainer(name) {
        var ctn = new Base3dViewExpand_1.default();
        var cobj = new csharp_1.UnityEngine.GameObject();
        ctn.setCObject(cobj);
        ctn.name = name;
        return ctn;
    }
    //创建3d模型 role1, role目录
    static create3DModel(modelName, shortPath, boundlename = ResourceCommonConst_1.default.boundle_model3d, outclone = false, compType = UICompConst_1.default.comp_base3d) {
        var cobj = ResourceManager_1.default.get3dmodelRes(modelName, shortPath, boundlename, outclone);
        var basiView = this.autoBindingCObj(cobj, true, compType);
        //初始化设置取消激活
        basiView.setActive(false);
        return basiView;
    }
    //clone一个对象 compType为空 会使用obj的uitype
    static cloneOneView(obj, compType = null) {
        var cloneCobj;
        if (compType == null) {
            compType = obj.uitype;
        }
        //如果是baseview
        if (obj.__cobject) {
            cloneCobj = csharp_1.UnityEngine.GameObject.Instantiate(obj.__cobject);
        }
        else {
            cloneCobj = csharp_1.UnityEngine.GameObject.Instantiate(obj);
        }
        return this.autoBindingCObj(cloneCobj, true, compType);
    }
    //全局搜索查找对象
    static findObject(name, compType = null) {
        var cobj = csharp_1.UnityEngine.GameObject.Find(name);
        if (!cobj) {
            LogsManager.warn("没有找到对象:", name);
            return null;
        }
        return this.autoBindingCObj(cobj, true, compType);
    }
}
exports.default = ViewTools;
ViewTools.compClassMap = {
    base: { cl: BaseViewExpand_1.default, cname: "GameObject", ctype: UICompConst_1.default.ctype_image },
    btn: { cl: ButtonExpand_1.default, cname: "Button", ctype: UICompConst_1.default.ctype_image },
    img: { cl: ImageExpand_1.default, cname: "Image", ctype: UICompConst_1.default.ctype_image },
    ctn: { cl: BaseContainer_1.default, cname: "GameObject" },
    label: { cl: LabelExpand_1.default, cname: "Label", ctype: UICompConst_1.default.ctype_label },
    input: { cl: LabelExpand_1.default, cname: "Label", ctype: UICompConst_1.default.ctype_label },
    list: { cl: ListExpand_1.default, cname: "List" },
    spine: { cl: SpineGraphicExpand_1.default, cname: "SpineGraphic" },
    ui: { cl: UIBaseView_1.default, cname: "GameObject" },
    base3d: { cl: Base3dViewExpand_1.default, cname: "GameObject" },
    camera: { cl: CameraExpand_1.default, cname: "Camera", ctype: UICompConst_1.default.ctype_camera },
    plane: { cl: PlaneExpand_1.default, cname: "Plane" },
    animator3d: { cl: Animation3DExpand_1.default, cname: "Animator", ctype: UICompConst_1.default.ctype_animator3d },
    particle3d: { cl: Particle3dExpand_1.default, cname: "Particle" },
    collider: { cl: PhysicsColliderExpand_1.default, cname: "Collider", ctype: UICompConst_1.default.ctype_collider },
    rigidbody3d: { cl: RigidbodyExpand_1.default, cname: "Rigidbody", ctype: UICompConst_1.default.ctype_rigidbody3d },
    colliderListener: { cname: "ColliderListenerExpand", ctype: UICompConst_1.default.ctype_colliderListener },
    trail: { cl: TrailRendererExpand_1.default, cname: "TrailRenderer", ctype: UICompConst_1.default.ctype_trail }
};
ViewTools.cobjMap = new Map();
//# sourceMappingURL=ViewTools.js.map