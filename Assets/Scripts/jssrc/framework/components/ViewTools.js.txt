"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseViewExpand_1 = require("./BaseViewExpand");
const UICompConst_1 = require("../consts/UICompConst");
const LogsManager_1 = require("../manager/LogsManager");
const ButtonExpand_1 = require("./ButtonExpand");
const ImageExpand_1 = require("./ImageExpand");
const ListExpand_1 = require("./ListExpand");
const BaseContainer_1 = require("./BaseContainer");
const LabelExpand_1 = require("./LabelExpand");
const SpineGraphicExpand_1 = require("./SpineGraphicExpand");
const ResourceConst_1 = require("../../game/sys/consts/ResourceConst");
class ViewTools {
    //自动绑定cobj
    static autoBindingCObj(cobj, forceBinding = false) {
        var baseView = ViewTools.cobjMap.get(cobj);
        if (!baseView) {
            baseView = this.getBaseViewByCobj(cobj, forceBinding);
            if (baseView) {
                ViewTools.cobjMap.set(cobj, baseView);
            }
        }
        return baseView;
    }
    static init() { }
    //绑定c对象和 baseview
    static bindCobjToBaseView(cobj, baseView) {
        ViewTools.cobjMap.set(cobj, baseView);
    }
    //清理c对象和baseview
    static clearCobjToBaseView(cobj) {
        ViewTools.cobjMap.delete(cobj);
    }
    //forceBinding 是否强制绑定.主要是针对没有定义名字的对象. 比如有时也需要通过getChildAt获取
    static getBaseViewByCobj(cobj, forceBinding = false) {
        var name = cobj.name;
        var uiType = name.split("_")[0];
        var viewClassName = UICompConst_1.default.classMap[uiType];
        if (!viewClassName) {
            if (forceBinding) {
                LogsManager_1.default.echo("这个对象没有指定合法命名", name);
                var baseView = new BaseViewExpand_1.default();
                baseView.setCObject(cobj);
                return baseView;
            }
            return null;
        }
        else {
            //如果是按钮
            if (uiType == UICompConst_1.default.comp_btn) {
                return new ButtonExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_img) {
                return new ImageExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_ctn) {
                return new BaseContainer_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_label) {
                return new LabelExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_list) {
                return new ListExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_input) {
                return new LabelExpand_1.default(cobj);
            }
            else if (uiType == UICompConst_1.default.comp_spine) {
                return new SpineGraphicExpand_1.default(null, null, cobj);
            }
        }
        return null;
    }
    static createContainer() {
        return new BaseContainer_1.default();
    }
    //第一次创建图片的时候 必定 调整尺寸
    static createImage(url = "", boundleName = ResourceConst_1.default.boundle_uiimage) {
        var img = new ImageExpand_1.default(null);
        if (url) {
            img.setSkin(url, boundleName, true);
        }
        return img;
    }
    /**
     *   align 对齐方式 0左上,1中上,2右上,3左中,4中中,5右中,6左下,7中下,8右下 默认4 中中
         FontStyle 0 normal,  1 bold(加黑)  2 Italic(斜体), 3 BoldAndItalic
         supportRichText是否开启富文本 默认不开启
         lineSpace 行间距默认是1 建议值在1-1.2之间
     */
    static createLabel(str, wid = 100, hei = 50, fontSize = 24, align = 4, supportRichText = false, fontStyle = 0, lineSpace = 1) {
        return new LabelExpand_1.default(null);
    }
}
exports.default = ViewTools;
ViewTools.cobjMap = new Map();
