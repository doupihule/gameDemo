"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseViewExpand_1 = require("./BaseViewExpand");
const UICompConst_1 = require("../consts/UICompConst");
const ViewTools_1 = require("./ViewTools");
const Message_1 = require("../common/Message");
class UIBaseView extends BaseViewExpand_1.default {
    constructor() {
        super();
        this.uitype = UICompConst_1.default.comp_ui;
    }
    setCObject(cui) {
        super.setCObject(cui);
        this.bindChild(cui);
        this.doAfterInit();
        return this;
    }
    //bing子对象
    bindChild(cuiobj, parentViewInstance = null, path = "") {
        var transform = cuiobj.transform;
        var childCount = transform.childCount;
        if (childCount == 0) {
            return;
        }
        for (var i = childCount - 1; i >= 0; i--) {
            var childTrans = transform.GetChild(i);
            var name = childTrans.name;
            var uiType = name.split("_")[0];
            var className = ViewTools_1.default.compClassMap[uiType];
            if (className) {
                var childGameObj = childTrans.gameObject;
                var childViewInstance = ViewTools_1.default.autoBindingCObj(childGameObj, true);
                if (this[name] != null) {
                    //子对象名字重复 只打警告
                    window["LogsManager"].warn("有子对象名字重复了" + path + "." + name);
                }
                else {
                    this[name] = childViewInstance;
                }
                //给父对象也绑定这个属性. 这样可以形成链式访问 .比如 a.b.c
                if (parentViewInstance) {
                    parentViewInstance[name] = childViewInstance;
                }
                if (uiType != UICompConst_1.default.comp_scroll && uiType != UICompConst_1.default.comp_list) {
                    this.bindChild(childGameObj, childViewInstance, path + name);
                }
            }
        }
    }
    //初始化完毕之后 可以访问组件了 给子类重写.类似ya的createChildren . 如果某个ui 没有和cobj进行绑定. 也就是手写ui. 那么就需要手动调用这个函数 .
    doAfterInit() {
    }
    //设置窗口名字
    setWindowName(name) {
        this.windowName = name;
        this.name = name;
    }
    setData(data) {
    }
    close() {
    }
    recvMsg(cmd, data) {
    }
    dispose() {
        super.dispose();
        Message_1.default.instance.removeObjEvents(this);
    }
}
exports.default = UIBaseView;
//# sourceMappingURL=UIBaseView.js.map