"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const csharp_1 = require("csharp");
const puerts_1 = require("puerts");
const ViewTools_1 = require("./ViewTools");
class BaseViewExpand {
    constructor() {
        this.positionTrans = { x: 0, y: 0, z: 0 };
        //旋转
        this.rotationTrans = { x: 0, y: 0, z: 0 };
        // 缩放
        this.scaleTrans = { x: 0, y: 0, z: 0 };
        this._alpha = 1;
        this._visible = true;
        //--触摸事件相关
        this._mouseEnabled = false;
        //是否穿透
        this._mouseThrough = false;
        this.uitype = "base";
    }
    setCObject(cobj) {
        this.__cobject = cobj;
        this.__ctransform = cobj.transform;
    }
    //-------------------------------------------------------------------------------------
    //---------------------------坐标旋转缩放透明度-----------------------------------------
    //-------------------------------------------------------------------------------------
    set x(value) {
        this.positionTrans.x = value;
    }
    set y(value) {
        this.positionTrans.y = value;
    }
    set z(value) {
        this.positionTrans.z = value;
    }
    get x() {
        return this.positionTrans.x;
    }
    get y() {
        return this.positionTrans.y;
    }
    get z() {
        return this.positionTrans.z;
    }
    //设置2d坐标
    set2dPos(x, y) {
        this.positionTrans.x = x;
        this.positionTrans.y = y;
        this.__ctransform.anchoredPosition = this.positionTrans;
    }
    //设置3d坐标
    set3dPos(x, y, z) {
        this.positionTrans.x = x;
        this.positionTrans.y = y;
        this.positionTrans.z = z;
        this.__ctransform.localPosition = this.positionTrans;
    }
    //设置2d旋转
    set2dRotation(value) {
        this.rotationTrans.z = value;
        this.__ctransform.eulerAngles = this.rotationTrans;
    }
    //设置缩放
    setScale(sx, sy, sz = 1) {
        var trans = this.scaleTrans;
        trans.x = sx;
        trans.y = sy;
        trans.z = sz;
        this.__ctransform.localScale = trans;
    }
    get scale() {
        return this.scaleTrans.x;
    }
    get rotation() {
        return this.__ctransform.rotation;
    }
    //设置锚点
    setAnchor(x, y) {
        BaseViewExpand._tempVew2.x = x;
        BaseViewExpand._tempVew2.y = y;
        this.__ctransform.pivot = BaseViewExpand._tempVew2;
    }
    //获取透明度
    get alpha() {
        return this._alpha;
    }
    //设置透明度
    set alpha(value) {
        var canvasGroup = this.__canvasGroupComp;
        if (!canvasGroup) {
            canvasGroup = this.__cobject.AddComponent(puerts_1.$typeof(csharp_1.UnityEngine.CanvasGroup));
            this.__canvasGroupComp = canvasGroup;
        }
        canvasGroup.alpha = value;
    }
    setZorder(value) {
    }
    //-------------------------------------------------------------------------------------
    //---------------------------显示相关-----------------------------------------
    //-------------------------------------------------------------------------------------
    //获取parent
    get parent() {
        return this.__ctransform.parent;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this._visible = value;
    }
    //添加子对象
    addChild(childView, index = -1) {
        childView.__ctransform.parent = childView.__ctransform.parent;
        if (index >= 0) {
            childView.__ctransform.SetSiblingIndex(index);
        }
    }
    //移除子对象
    removeChild(childView) {
        childView.__ctransform.parent = null;
    }
    //移除自己
    removeSelf() {
        this.__ctransform.parent = null;
    }
    get numChildren() {
        return this.__ctransform.childCount;
    }
    //移除所有子对象
    removeChildren() {
        var trans = this.__ctransform;
        var childNums = trans.childCount;
        for (var s = childNums - 1; s >= 0; s--) {
            var childTrans = trans.GetChild(s);
            childTrans.SetParent(null);
        }
    }
    //获取子对象
    getChildAt(index, withBinding = false) {
        var childTrans = this.__ctransform.GetChild(index);
        //绑定lua和c对象
        if (childTrans) {
            //如果是需要bangding对象的
            if (withBinding) {
                return ViewTools_1.default.autoBindingCObj(childTrans.gameObject);
            }
            return childTrans;
        }
        return null;
    }
    //设置颜色 子类重写
    setColor(r, g, b, a) {
    }
    //2d对象才有这个属性3d对象禁止访问
    get width() {
        return this.__ctransform.sizeDelta.x;
    }
    get height() {
        return this.__ctransform.sizeDelta.y;
    }
    setSize(w, h) {
        BaseViewExpand._tempVew2.x = w;
        BaseViewExpand._tempVew2.y = h;
        this.__ctransform.sizeDelta = BaseViewExpand._tempVew2;
    }
    //设置是否可见
    setActive(value) {
        this.__cobject.SetActive(value);
    }
    get name() {
        return this.__ctransform.name;
    }
    set name(value) {
        this.__ctransform.name = value;
    }
    set mouseEnabled(value) {
        this._mouseEnabled = value;
    }
    get mouseEnabled() {
        return this._mouseEnabled;
    }
    set mouseThrough(value) {
        this._mouseThrough = value;
    }
    get mouseThrough() {
        return this._mouseThrough;
    }
    //销毁函数
    dispose() {
        this.__ctransform = null;
        this.__cobject = null;
        this.__canvasGroupComp = null;
    }
}
exports.default = BaseViewExpand;
BaseViewExpand._tempVew2 = { x: 0, y: 0 };
//# sourceMappingURL=BaseViewExpand.js.map