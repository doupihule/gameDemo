"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const csharp_1 = require("csharp");
const puerts_1 = require("puerts");
const ViewTools_1 = require("./ViewTools");
const UICompConst_1 = require("../consts/UICompConst");
class BaseViewExpand {
    constructor() {
        this.positionTrans = { x: 0, y: 0, z: 0 };
        //旋转
        this.rotationTrans = { x: 0, y: 0, z: 0 };
        // 缩放
        this.scaleTrans = { x: 0, y: 0, z: 0 };
        this._alpha = 1;
        //坐标样式 1是2d, 2是3d
        this.posStyle = 1;
        //组件map表  {key:value,}
        this._compMap = {};
        this._visible = true;
        //--触摸事件相关
        this._mouseEnabled = false;
        //是否穿透
        this._mouseThrough = false;
        this.uitype = "base";
    }
    //绑定c对象
    setCObject(cobj) {
        this.__cobject = cobj;
        this.__ctransform = cobj.transform;
        ViewTools_1.default.bindCobjToBaseView(cobj, this);
        return this;
    }
    //-------------------------------------------------------------------------------------
    //---------------------------坐标旋转缩放透明度-----------------------------------------
    //-------------------------------------------------------------------------------------
    get x() {
        return this.positionTrans.x;
    }
    get y() {
        return this.positionTrans.y;
    }
    get z() {
        return this.positionTrans.z;
    }
    //设置2d坐标
    set2dPos(x, y) {
        this.positionTrans.x = x;
        this.positionTrans.y = y;
        // this.__ctransform.anchoredPosition = this.positionTrans;
        csharp_1.GameUtils.ViewExtensionMethods.SetObj2dPos(this.__ctransform, x, y);
    }
    //设置3d坐标
    set3dPos(x, y, z) {
        this.positionTrans.x = x;
        this.positionTrans.y = y;
        this.positionTrans.z = z;
        csharp_1.GameUtils.ViewExtensionMethods.SetObj3dPos(this.__ctransform, x, y, z);
    }
    //设置2d旋转
    set2dRotation(value) {
        this.rotationTrans.z = value;
        this.__ctransform.eulerAngles = csharp_1.GameUtils.ViewExtensionMethods.initVec3(0, 0, this.rotationTrans.z);
    }
    //获取2d旋转
    get2dRotation() {
        return this.rotationTrans.z;
    }
    //设置缩放
    setScale(sx, sy, sz = 1) {
        var trans = this.scaleTrans;
        trans.x = sx;
        trans.y = sy;
        trans.z = sz;
        csharp_1.GameUtils.ViewExtensionMethods.SetObjScale(this.__ctransform, sx, sy, sz);
    }
    getScale() {
        return this.scaleTrans;
    }
    set3dRotation(x, y, z) {
        this.rotationTrans.x = x;
        this.rotationTrans.y = y;
        this.rotationTrans.z = z;
        this.__ctransform.eulerAngles = csharp_1.GameUtils.ViewExtensionMethods.initVec3(x, y, z);
    }
    get3dRotation() {
        return this.rotationTrans;
    }
    //设置锚点
    setAnchor(x, y) {
        this.__ctransform.pivot = csharp_1.GameUtils.ViewExtensionMethods.initVec2(x, y);
    }
    //获取透明度
    get alpha() {
        return this._alpha;
    }
    //设置透明度
    set alpha(value) {
        var canvasGroup = this.__canvasGroupComp;
        if (!canvasGroup) {
            canvasGroup = this.__cobject.AddComponent(puerts_1.$typeof(csharp_1.UnityEngine.CanvasGroup));
            this.__canvasGroupComp = canvasGroup;
        }
        canvasGroup.alpha = value;
    }
    //-------------------------------------------------------------------------------------
    //---------------------------显示相关-----------------------------------------
    //-------------------------------------------------------------------------------------
    //获取parent
    get parent() {
        return this.__ctransform.parent;
    }
    get visible() {
        return this._visible;
    }
    set visible(value) {
        this._visible = value;
    }
    //添加子对象
    addChild(childView, index = -1) {
        childView.__ctransform.SetParent(this.__ctransform, false);
        if (index >= 0) {
            childView.__ctransform.SetSiblingIndex(index);
        }
    }
    //移除子对象
    removeChild(childView) {
        childView.__ctransform.SetParent(null, false);
    }
    //移除自己
    removeSelf() {
        this.__ctransform.SetParent(null, false);
    }
    get numChildren() {
        return this.__ctransform.childCount;
    }
    //移除所有子对象
    removeChildren() {
        csharp_1.GameUtils.ViewExtensionMethods.RemoveAllChild(this.__ctransform);
    }
    //获取子对象 targetCompType是否指定绑定类型
    getChildAt(index, targetCompType = null) {
        var childTrans = this.__ctransform.GetChild(index);
        if (targetCompType == null) {
            targetCompType = this.getDefaultCompType();
        }
        //绑定lua和c对象
        if (childTrans) {
            //如果是需要bangding对象的
            return ViewTools_1.default.autoBindingCObj(childTrans.gameObject, true, targetCompType);
        }
        return null;
    }
    getDefaultCompType() {
        if (this.posStyle == UICompConst_1.default.posStyle_3d) {
            return UICompConst_1.default.comp_base3d;
        }
        else {
            return UICompConst_1.default.comp_base;
        }
    }
    //获取子对象 根据名字
    getChildByName(name, targetCompType = null) {
        var childObj = csharp_1.GameUtils.ViewExtensionMethods.GetChildByName(this.__ctransform, name);
        if (targetCompType == null) {
            targetCompType = this.getDefaultCompType();
        }
        if (childObj) {
            //如果是需要bangding对象的
            return ViewTools_1.default.autoBindingCObj(childObj, true, targetCompType);
        }
        return null;
    }
    //设置颜色 子类重写
    setColor(r, g, b, a) {
    }
    //2d对象才有这个属性3d对象禁止访问
    get width() {
        return this.__ctransform.sizeDelta.x;
    }
    get height() {
        return this.__ctransform.sizeDelta.y;
    }
    getViewRect() {
        return this.__ctransform.sizeDelta;
    }
    setSize(w, h) {
        if (this.posStyle == UICompConst_1.default.posStyle_3d) {
            window["LogsManager"].errorTag("setSizewrong", "3d对象禁止设置2dsize");
            return;
        }
        //设置尺寸
        this.__ctransform.sizeDelta = csharp_1.GameUtils.ViewExtensionMethods.initVec2(w, h);
    }
    //设置是否可见
    setActive(value) {
        this.__cobject.SetActive(value);
    }
    isActive() {
        return this.__cobject.active;
    }
    //设置深度
    setZorder(value) {
    }
    get name() {
        return this.__ctransform.name;
    }
    set name(value) {
        this.__ctransform.name = value;
    }
    set mouseEnabled(value) {
        this._mouseEnabled = value;
    }
    get mouseEnabled() {
        return this._mouseEnabled;
    }
    set mouseThrough(value) {
        this._mouseThrough = value;
    }
    get mouseThrough() {
        return this._mouseThrough;
    }
    //获取组件 一定要配置绑定哪个类型
    getComponent(comp, compExpand = null, isCreat = false) {
        if (this._compMap[comp]) {
            return this._compMap[comp];
        }
        var info = ViewTools_1.default.compClassMap[comp];
        if (!info) {
            LogsManager.warn("组件类型错误:", this.name, ",comp:", comp);
            return null;
        }
        var cobjcomp = this.__cobject.GetComponent(info.cname);
        if (!cobjcomp) {
            //如果没有组件 就创建
            if (isCreat) {
                cobjcomp = this.__cobject.AddComponent(info.ctype);
                LogsManager.echo("没有组件,创建一个-", this.name, "cname:", info.cname);
            }
            else {
                LogsManager.warn("没有找到组件:", this.name, ",cname:", info.cname);
                return null;
            }
        }
        //如果没有传 组件继承. 那么就采用默认的组件
        if (!compExpand) {
            var classObj = info.cl;
            compExpand = new classObj();
        }
        compExpand.initComponent(cobjcomp, this);
        this._compMap[comp] = compExpand;
        return compExpand;
    }
    //获取原生组件类型
    getOriginComponent(comp) {
        return this.__cobject.GetComponent;
    }
    clone() {
        return ViewTools_1.default.cloneOneView(this.__cobject, this.uitype);
    }
    //销毁函数
    dispose() {
        this.__ctransform = null;
        this.__cobject = null;
        this.__canvasGroupComp = null;
    }
}
exports.default = BaseViewExpand;
BaseViewExpand._tempVew2 = { x: 0, y: 0 };
//# sourceMappingURL=BaseViewExpand.js.map