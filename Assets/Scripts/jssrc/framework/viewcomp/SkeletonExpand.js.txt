"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SubPackageManager_1 = require("../manager/SubPackageManager");
const ResourceManager_1 = require("../manager/ResourceManager");
const BaseContainer_1 = require("../components/BaseContainer");
class SkeletonExpand extends BaseContainer_1.default {
    constructor() {
        super();
        //状态  0 表示未加载完成 1表示加载完成
        this._state = 0;
        //换装状态 0 不需要换装 1 换装纹理加载中  2 换装完成
        this._changeTextureState = 0;
        this._cacheAniMode = 0;
        this._cacheCompleteParams = [];
    }
    //开始加载
    startLoadByShortName(shortName) {
        this.shortSkeletonName = shortName;
        SubPackageManager_1.default.loadDynamics(ResourceManager_1.default.getSpineSubpack(shortName), ResourceManager_1.default.getSpinePath(shortName), this.onSubPackComplete, this);
    }
    //分包加载完成
    onSubPackComplete() {
    }
    //重写update
    _update() {
        if (!this["_player"]) {
            return;
        }
        super["_update"]();
    }
    //给整个view换一个texture
    changWholeViewTexture(url) {
    }
    paused() {
    }
    resume() {
    }
    setPlayerSpeed(value) {
    }
    //换装图片加载完成
    onImageCompelte() {
    }
    play(nameOrIndex, loop, force, start, end, freshSkin, playAudio) {
    }
    //显示或者隐藏slot
    showOrHideSlot(slotName, value) {
    }
    //获取动画的长度 如果这个动画没有加载完成 返回-1
    static getAniFrame(aniName, aniIndex = 0) {
        if (!this.cacheAniCompleteMap[aniName]) {
            return -1;
        }
        return -1;
    }
    stop() {
    }
}
exports.default = SkeletonExpand;
//
//缓存动画加载完成回调
/**
 * 动画名, 创建的数量
 * animae:{nums:, templet:any }
 *
 *
 */
SkeletonExpand.cacheAniCompleteMap = {};
//缓存的纹理
SkeletonExpand._textureCache = {};
//# sourceMappingURL=SkeletonExpand.js.map