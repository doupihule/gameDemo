"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LoadingUI_1 = require("../../game/sys/view/loading/LoadingUI");
const ScreenAdapterTools_1 = require("../utils/ScreenAdapterTools");
const GlobalData_1 = require("../utils/GlobalData");
const WindowCfgs_1 = require("../../game/sys/consts/WindowCfgs");
const LogsErrorCode_1 = require("../consts/LogsErrorCode");
const GuideManager_1 = require("../../game/sys/manager/GuideManager");
const UserInfo_1 = require("../common/UserInfo");
const AlertNewLocalUI_1 = require("../view/tip/AlertNewLocalUI");
const PoolTools_1 = require("../utils/PoolTools");
const JumpManager_1 = require("./JumpManager");
const ViewTools_1 = require("../components/ViewTools");
const TimerManager_1 = require("./TimerManager");
const ResourceManager_1 = require("./ResourceManager");
const ResourceCommonConst_1 = require("../consts/ResourceCommonConst");
class WindowManager {
    static OpenUI(UIName, params = null) {
        WindowManager.SwitchUIAPI(UIName, null, null, params);
    }
    static SwitchUI(openUIName, closeUIName, args = null) {
        WindowManager.SwitchUIAPI(openUIName, null, closeUIName, args);
    }
    static SwitchUIAPI(openUIName, rootNode, closeUIName, args = null) {
        // this.SwitchMaskUI(true);
        WindowManager.SwitchUIComplete(openUIName, rootNode, closeUIName, args);
    }
    static SwitchUIComplete(openUIName, rootNode, closeUIName, args) {
        // this.SwitchMaskUI(false);
        // Message.instance.send(WindowEvent.WINDOW_EVENT_SWITCHUISTART, {
        // 	openUIName: openUIName,
        // 	closeUIName: closeUIName
        // });
        //如果有打开某个界面
        if (openUIName) {
            var targetUI = WindowManager.UIInstance[openUIName];
            var uiCfgs = this.getWindowCfgs(openUIName);
            if (targetUI == null) {
                var classIntance = uiCfgs.path;
                targetUI = new classIntance();
                var uiCobj = ResourceManager_1.default.loadUIPrefab(uiCfgs.prefabPath + "/" + openUIName, ResourceCommonConst_1.default.boundle_ui);
                targetUI.setCObject(uiCobj);
                if (!rootNode) {
                    // targetUI.setSize(ScreenAdapterTools.width,ScreenAdapterTools.height);
                }
                WindowManager.UIInstance[openUIName] = targetUI;
            }
            if (rootNode) {
                rootNode.addChild(targetUI);
            }
            else {
                var ctn = this.getWindowCtn(openUIName);
                ctn.addChild(targetUI);
            }
            //给ui赋值属性windowName
            targetUI.setWindowName(openUIName);
            //如果是开启模态的 而且是非全屏ui
            if (uiCfgs.modal == 1 && !uiCfgs.full) {
                if (!targetUI.__modalView) {
                    targetUI.__modalView = this.createModalView(targetUI, uiCfgs.modalAlpha);
                }
            }
            this._insertWindow(targetUI);
            LogsManager.echo("WindowManager  OpenUI Complete:", openUIName, "currentWindow:", this.getCurrentWindowName());
            targetUI.mouseEnabled = true;
            targetUI.setData(args);
        }
        if (closeUIName) {
            if (closeUIName == WindowCfgs_1.WindowCfgs.LoadingUI) {
                WindowManager.CloseLoadingUI();
            }
            else {
                WindowManager.CloseUIAPI(closeUIName);
            }
            this._removeOneWindow(closeUIName);
            LogsManager.echo("WindowManager close  Complete:", closeUIName, "currentWindow:", this.getCurrentWindowName());
        }
        this.updateUiVisible();
        // Message.instance.send(WindowEvent.WINDOW_EVENT_SWITCHUIFIN, {
        // 	openUINames: openUIName,
        // 	closeUINames: closeUIName
        // });
    }
    //创建模态
    static createModalView(ctn, alpha = 1) {
        if (alpha == null) {
            alpha = 0.3;
        }
        var modalView = ViewTools_1.default.createContainer(ctn.windowName + "_modal");
        modalView.mouseEnabled = true;
        modalView.mouseThrough = false;
        modalView.alpha = alpha;
        ctn.addChild(modalView, 0);
        return modalView;
    }
    adjustUI(view) {
        view.setSize(ScreenAdapterTools_1.default.width, ScreenAdapterTools_1.default.height);
        view.mouseEnabled = true;
    }
    /**
     * 文本描述弹出框
     * @param type 1是只有确认按钮，2有确认和取消按钮
     * @param content
     * @param callBack 确认返回
     * @param thisObj
     * @param titleName 默认为“提示”
     */
    static setPopupTip(type, content, callBack, thisObj, titleName = null, closeBack = null) {
        if (GlobalData_1.default.isGameDestory) {
            return;
        }
        var data = {
            type: type,
            title: titleName,
            msg: content,
            callBack: callBack,
            thisObj: thisObj,
            closeBack: closeBack
        };
        //先从缓存拿
        var ui = PoolTools_1.default.getItem("AlertNewLocalUI", "sys");
        LogsManager.echo("-----------setPopupTip---------", ui == null);
        if (!ui) {
            ui = new AlertNewLocalUI_1.default();
        }
        WindowManager.highLayer.addChild(ui);
        ui.setData(data);
    }
    static ShowExpandTip(data, timeout = 1500) {
        // var subPackage = this.getUIPackage(WindowCfgs.TipsUI);
        // LoadManager.instance.loadPacgeAndRes(subPackage, this.getUILoadGroup(WindowCfgs.TipsUI), Laya.Handler.create(WindowManager, WindowManager.TipComplete, [{ text: text, timeout: timeout }]));
        WindowManager.expandTipComplete({ data: data, timeout: timeout });
    }
    static expandTipComplete(args) {
        if (this.tipsCount >= 3) {
            this.expandTipsContent.push(args);
        }
        else {
            var tip;
            if (WindowManager.expandTipsObject.length > 0) {
                tip = WindowManager.expandTipsObject.pop();
            }
            else {
                tip = this.getUIClass("ExpandTipsUI");
                tip.width = ScreenAdapterTools_1.default.width;
                tip.height = ScreenAdapterTools_1.default.height;
            }
            this.tipsCount++;
            tip.setData(args.data);
            WindowManager.tipsLayer.addChild(tip);
            TimerManager_1.default.instance.add(() => {
                this.tipsCount--;
                WindowManager.expandTipsObject.push(tip);
                WindowManager.tipsLayer.removeChild(tip);
                if (this.expandTipsContent.length > 0) {
                    WindowManager.expandTipComplete(this.expandTipsContent.shift());
                }
            }, this, args.timeout, 1);
        }
    }
    static ShowTip(text, timeout = 1500) {
        WindowManager.TipComplete({ text: text, timeout: timeout });
    }
    static TipComplete(args) {
        if (this.tipsCount >= 3) {
            this.tipsContent.push(args);
        }
        else {
            var tip;
            if (WindowManager.tipsObject.length > 0) {
                tip = WindowManager.tipsObject.pop();
            }
            else {
                tip = this.getUIClass(WindowCfgs_1.WindowCfgs.TipsUI);
                tip.width = ScreenAdapterTools_1.default.width;
                tip.height = ScreenAdapterTools_1.default.height;
            }
            this.tipsCount++;
            tip.setData(args.text);
            WindowManager.tipsLayer.addChild(tip);
            TimerManager_1.default.instance.add(() => {
                this.tipsCount--;
                WindowManager.tipsObject.push(tip);
                WindowManager.tipsLayer.removeChild(tip);
                if (this.tipsContent.length > 0) {
                    WindowManager.TipComplete(this.tipsContent.shift());
                }
            }, this, args.timeout, 1);
        }
    }
    static CloseUIAPI(UIName) {
        if (WindowManager.UIInstance[UIName] != null) {
            LogsManager.echo("WindowManager CloseUI:", UIName);
            var uiView = WindowManager.UIInstance[UIName];
            uiView.onClose && uiView.onClose();
            var parent = uiView.parent;
            if (parent) {
                parent.removeChild(uiView);
                if (parent.numChildren == 0) {
                    parent.mouseEnabled = false;
                }
            }
        }
    }
    static CloseUI(UIName) {
        WindowManager.SwitchUIAPI(null, null, UIName);
    }
    /*
    判断某个界面是否开启着
    */
    static isUIOpened(UIName) {
        if (WindowManager.UIInstance[UIName] != null) {
            return WindowManager.UIInstance[UIName].activeInHierarchy;
        }
        return false;
    }
    //获取某个ui
    static getUIByName(UIName) {
        return WindowManager.UIInstance[UIName];
    }
    //** 通用UI界面 -end- */
    /* **************************新手引导界面************************************** */
    static OpenGuideUI(UIName, params) {
        // WindowManager.rootLayer.addChild(WindowManager.guideLayer);
        WindowManager.guideLayer.visible = true;
        var loadRes = this.getUILoadGroup(UIName);
        if (WindowManager.UIInstance[UIName] == null) {
            WindowManager.UIInstance[UIName] = WindowManager.getUIClass(UIName);
            WindowManager.UIInstance[UIName].width = ScreenAdapterTools_1.default.width;
            WindowManager.UIInstance[UIName].height = ScreenAdapterTools_1.default.height;
        }
        WindowManager.UIInstance[UIName].mouseEnabled = true;
        WindowManager.guideLayer.addChild(WindowManager.UIInstance[UIName]);
        WindowManager.UIInstance[UIName].setData(params);
    }
    static CloseGuideUI(UIName) {
        GuideManager_1.default.ins.nowGuideId = null;
        if (WindowManager.UIInstance[UIName] != null) {
            WindowManager.UIInstance[UIName].onClose && WindowManager.UIInstance[UIName].onClose();
            WindowManager.guideLayer.removeChild(WindowManager.UIInstance[UIName]);
        }
        if (!WindowManager.guideLayer.numChildren)
            WindowManager.guideLayer.visible = false;
        // WindowManager.rootLayer.removeChild(WindowManager.guideLayer);
        var jumpItemList = JumpManager_1.default.getMainJumpItems();
        for (var index in jumpItemList) {
            jumpItemList[index].visible = true;
        }
    }
    static OpenSubGuideUI(node, UIName, params) {
        WindowManager.SubGuideUIComplete(node, UIName, params);
    }
    static SubGuideUIComplete(node, UIName, params) {
        if (WindowManager.UIInstance[UIName] == null) {
            WindowManager.UIInstance[UIName] = WindowManager.getUIClass(UIName);
            WindowManager.UIInstance[UIName].width = ScreenAdapterTools_1.default.width;
            WindowManager.UIInstance[UIName].height = ScreenAdapterTools_1.default.height;
        }
        WindowManager.UIInstance[UIName].mouseEnabled = true;
        WindowManager.UIInstance[UIName].setData(params);
        node.addChild(WindowManager.UIInstance[UIName]);
    }
    static CloseSubGuideUI(node, UIName) {
        if (WindowManager.UIInstance[UIName] != null) {
            WindowManager.UIInstance[UIName].onClose && WindowManager.UIInstance[UIName].onClose();
            node.removeChild(WindowManager.UIInstance[UIName]);
        }
    }
    /* ****************************子界面************************************ */
    static OpenSubUI(UIName, rootNode, params = null) {
        // LogsManager.echo("WindowManager OpenSubUI:", UIName);
        WindowManager.SwitchUIAPI(UIName, rootNode, null, params);
    }
    static CloseSubUI(UIName, rootNode) {
        if (WindowManager.UIInstance[UIName] != null) {
            WindowManager.UIInstance[UIName].onClose && WindowManager.UIInstance[UIName].onClose();
            rootNode.removeChild(WindowManager.UIInstance[UIName]);
        }
    }
    static ShowLoadingUI(args) {
        WindowManager.loadingHandler = args;
        WindowManager.LoadingUIAtlasComplete();
    }
    static LoadingUIAtlasComplete() {
        if (WindowManager.loadingUI == null) {
            WindowManager.loadingUI = new LoadingUI_1.LoadingUI();
            // WindowManager.loadingUI.width = ScreenAdapterTools.width;
            // WindowManager.loadingUI.height = ScreenAdapterTools.height;
        }
        UserInfo_1.default.platform.setLoadingProgress(100);
        UserInfo_1.default.platform.hideLoadingProgress();
        // WindowManager.commonUILayer.addChild(WindowManager.loadingUI);
        // WindowManager.loadingUI.mouseEnabled = true;
        WindowManager.loadingUI.showLoading();
        WindowManager.loadingUI.setData();
        if (WindowManager.loadingHandler != null) {
            WindowManager.loadingHandler();
        }
    }
    static CloseLoadingUI() {
        if (WindowManager.loadingUI != null) {
            LogsManager.echo("WindowManager CloseLoadingUI");
            WindowManager.loadingUI.hideLoading();
            // WindowManager.commonUILayer.removeChild(WindowManager.loadingUI);
        }
    }
    static SwitchUIFromLoading(openUIName, params) {
        if (LoadingUI_1.LoadingUI.instance)
            LoadingUI_1.LoadingUI.instance.addProgress(100);
        TimerManager_1.default.instance.add(() => {
            WindowManager.SwitchUI(openUIName, WindowCfgs_1.WindowCfgs.LoadingUI, params);
        }, this, 100, 1);
    }
    static SwitchMaskUI(isOpen, alpha = 0) {
    }
    static CloseMaskUI() {
    }
    static initMaskUI() {
        var mask = ViewTools_1.default.createContainer("admask");
        var background = ViewTools_1.default.createContainer("admaskbg");
        mask.addChild(background);
        //画矩形
        background.alpha = 1;
        return mask;
    }
    //获取一个ui对应的容器
    static getWindowCtn(winName) {
        var cfgs = this.getWindowCfgs(winName);
        var ctn;
        if (!cfgs.parent) {
            return WindowManager.commonUILayer;
        }
        else if (cfgs.parent == WindowCfgs_1.WindowCfgs.UILAYER) {
            return WindowManager.commonUILayer;
        }
        else if (cfgs.parent == WindowCfgs_1.WindowCfgs.HIGHLAYER) {
            return WindowManager.highLayer;
        }
        else if (cfgs.parent == WindowCfgs_1.WindowCfgs.DEBUGLAYER) {
            return WindowManager.debugLayer;
        }
        else {
            LogsManager.echo("打开toplayer", winName);
            return WindowManager.topUILayer;
        }
        // return WindowManager.commonUILayer;
    }
    //判断一个窗口是否需要缓存
    static checkCacheWindow(winName) {
        var cfg = this.getWindowCfgs(winName);
        if (cfg.cache) {
            return true;
        }
        return false;
    }
    //获取某一个窗口的ui配置
    static getWindowCfgs(winName) {
        // if(!this.windowcfgs[winName]){
        // 	return  this.commonCfgs;
        // }
        var obj = WindowCfgs_1.WindowCfgs.windowcfgs[winName];
        if (!obj) {
            return WindowCfgs_1.WindowCfgs.commonCfgs;
        }
        if (obj.modal == null) {
            obj.modal = 1;
        }
        if (obj.modalAlpha == null) {
            obj.modalAlpha = 0.6;
        }
        if (!obj.parent) {
            obj.parent = WindowCfgs_1.WindowCfgs.UILAYER;
        }
        if (obj.showType == null) {
            obj.showType = 0;
        }
        return obj;
    }
    //获取一个ui需要加载的group
    static getUILoadGroup(winName) {
        var cfgs = this.getWindowCfgs(winName);
        return cfgs.group;
    }
    //获取一个ui对应的class对象
    static getUIClass(winName) {
        var cfgs = this.getWindowCfgs(winName);
        var path = cfgs.path;
        if (!path) {
            LogsManager.errorTag(LogsErrorCode_1.default.WINDOW_ERROR, "_没有给这个窗口配置类对象:", winName);
            return null;
        }
        return new path();
    }
    /**获取一个ui需要加载的资源包 */
    static getUIPackage(winName) {
        var cfgs = this.getWindowCfgs(winName);
        return cfgs.subPackage;
    }
    static openAdvMask() {
        var UIName = "advMaskUI";
        LogsManager.echo("zm 打开蒙版--------------------------");
        WindowManager.maskLayer.visible = true;
        if (WindowManager.UIInstance[UIName] == null) {
            WindowManager.UIInstance[UIName] = this.initMaskUI();
            WindowManager.UIInstance[UIName].width = ScreenAdapterTools_1.default.width;
            WindowManager.UIInstance[UIName].height = ScreenAdapterTools_1.default.height;
        }
        WindowManager.UIInstance[UIName].mouseEnabled = true;
        WindowManager.UIInstance[UIName].alpha = 0.5;
        WindowManager.maskLayer.mouseEnabled = true;
        WindowManager.maskLayer.mouseThrough = false;
        WindowManager.maskLayer.addChild(WindowManager.UIInstance[UIName]);
    }
    static closeAdvMask() {
        LogsManager.echo("zm 关闭蒙版--------------------------");
        var UIName = "advMaskUI";
        if (WindowManager.UIInstance[UIName] != null) {
            WindowManager.UIInstance[UIName].onClose && WindowManager.UIInstance[UIName].onClose();
            WindowManager.maskLayer.removeChild(WindowManager.UIInstance[UIName]);
        }
        if (!WindowManager.maskLayer.numChildren)
            WindowManager.maskLayer.visible = false;
    }
    //插入一个window
    static _insertWindow(view) {
        var index = this._allWindowMap.indexOf(view);
        if (index != -1) {
            this._allWindowMap.splice(index, 1);
        }
        this._allWindowMap.push(view);
    }
    //更新ui显示
    static updateUiVisible() {
        var len = this._allWindowMap.length;
        this._currentFullWindow = null;
        for (var i = len - 1; i >= 0; i--) {
            var win = this._allWindowMap[i];
            //显示这个ui 和他对应的modal
            win.visible = true;
            var cfg = this.getWindowCfgs(win.windowName);
            if (cfg.full) {
                this._currentFullWindow = win;
                for (var ii = i - 1; ii >= 0; ii--) {
                    var childWindow = this._allWindowMap[ii];
                    if (childWindow.parent && win.parent && childWindow.parent == win.parent) {
                        childWindow.visible = false;
                    }
                }
                break;
            }
        }
        var win = this._allWindowMap[len - 1];
    }
    //移除一个window
    static _removeOneWindow(windowName) {
        for (var i = this._allWindowMap.length - 1; i >= 0; i--) {
            var window = this._allWindowMap[i];
            if (window.windowName == windowName) {
                this._allWindowMap.splice(i, 1);
            }
        }
    }
    static isUICached(windowName) {
        for (var index = 0; index < this._allWindowMap.length; index++) {
            if (this._allWindowMap[index].windowName == windowName) {
                return true;
            }
        }
        return false;
    }
    //取当前的windowName
    static getCurrentWindowName() {
        if (this._allWindowMap.length == 0) {
            return null;
        }
        return this._allWindowMap[this._allWindowMap.length - 1].windowName;
    }
    //获取最顶层的全屏ui 可能为空
    static getCurrentFullWindow() {
        return this._currentFullWindow;
    }
    //取当前的window
    static getCurrentWindow() {
        if (this._allWindowMap.length == 0) {
            return null;
        }
        return this._allWindowMap[this._allWindowMap.length - 1];
    }
    //获取当前打开的所有界面
    static getallWindowMap() {
        return this._allWindowMap;
    }
    //在一个节点上创建View
    static CreateViewOnNode(windowName, node, pararms = {}) {
        var windowClass = WindowCfgs_1.WindowCfgs.windowcfgs[windowName].path;
        var view = new windowClass();
        view.setData(pararms);
        node.addChild(view);
        return view;
    }
}
exports.default = WindowManager;
WindowManager.tipsContent = [];
WindowManager.tipsObject = [];
WindowManager.expandTipsContent = [];
WindowManager.expandTipsObject = [];
WindowManager.tipsCount = 0;
WindowManager.updateTipsContent = [];
WindowManager.updateTipsObject = [];
WindowManager.updateTipsCount = 0;
WindowManager.maskCount = 0;
WindowManager.maskAlpha = 0;
WindowManager.isShowUpdateTip = false;
WindowManager._allWindowMap = [];
WindowManager.UIInstance = {};
WindowManager.uiMaker = LoadingUI_1.LoadingUI;
//# sourceMappingURL=WindowManager.js.map