"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SoundManager_1 = require("./SoundManager");
const LogsManager_1 = require("./LogsManager");
const GlobalData_1 = require("../utils/GlobalData");
const WindowManager_1 = require("./WindowManager");
const WindowCfgs_1 = require("../../game/sys/consts/WindowCfgs");
const ScreenAdapterTools_1 = require("../utils/ScreenAdapterTools");
const UserInfo_1 = require("../common/UserInfo");
const Client_1 = require("../common/kakura/Client");
const Method_1 = require("../../game/sys/common/kakura/Method");
const GameSwitch_1 = require("../common/GameSwitch");
const KakuraClient_1 = require("../common/kakura/KakuraClient");
const Message_1 = require("../common/Message");
const UserModel_1 = require("../../game/sys/model/UserModel");
const MusicConst_1 = require("../../game/sys/consts/MusicConst");
const MsgCMD_1 = require("../../game/sys/common/MsgCMD");
const UserGlobalModel_1 = require("../model/UserGlobalModel");
const BannerAdManager_1 = require("./BannerAdManager");
const FrameWorkEvent_1 = require("../event/FrameWorkEvent");
const ModelToServerMapCommon_1 = require("../consts/ModelToServerMapCommon");
const KariqiShareManager_1 = require("./KariqiShareManager");
const KariquShareConst_1 = require("../consts/KariquShareConst");
const ViewTools_1 = require("../components/ViewTools");
class MainModule {
    constructor() {
        this.timeLock = 0;
        //完成任务列表
        this._taskCompMap = {};
        MainModule.instance = this;
        this.initLayer();
        // SoundManager.init();
        // this.onLoadingUIComplete();
        Message_1.default.instance.add(MsgCMD_1.default.GAME_ONSHOW, this);
        Message_1.default.instance.add(MsgCMD_1.default.VIDEO_STOP, this);
        Message_1.default.instance.add(MsgCMD_1.default.VIDEO_PLAY, this);
        WindowManager_1.default.OpenUI(WindowCfgs_1.WindowCfgs.GameMainUI);
    }
    //Loading页面显示后开始加载资源
    onLoadingUIComplete() {
        this.timeLock = Client_1.default.instance.miniserverTime;
        this.reqVMS();
    }
    reqVMS() {
        UserInfo_1.default.platform.reqVMS();
    }
    checkSystem() {
    }
    sysCallback() {
        // 初始化平台参数
        UserInfo_1.default.platform.initPlatformData();
    }
    loginResult() {
        Client_1.default.instance.send(Method_1.default.User_login, {}, this.onLoginResult, this);
    }
    onLoginResult(result) {
        LogsManager_1.default.echo("yrc onLoginResult", result);
        var serverData = result;
        if (!GlobalData_1.default.checkUserCloudStorage()) {
            Client_1.default.instance.globalLoginBackData = result;
            serverData = result.data;
        }
        else {
            UserInfo_1.default.platform.compareData(result);
        }
        if (serverData.config) {
            Client_1.default.instance.heartBeatInterval = result.data.config.heartBeatInterval;
            //覆盖服务器来回的开关参数
            if (result.data.config.switch) {
                UserInfo_1.default.platform.coverServerSwitchMap(result.data.config.switch);
                LogsManager_1.default.echo("yrc gameswitch resultSwitch", result.data.config.switch);
            }
            KakuraClient_1.default.instance.registHeartBeat();
        }
        LogsManager_1.default.echo("yrc SWITCH_LOG_PANEL:", GameSwitch_1.default.checkOnOff(GameSwitch_1.default.SWITCH_LOG_PANEL));
        LogsManager_1.default.setLogGroupVisible(GameSwitch_1.default.checkOnOff(GameSwitch_1.default.SWITCH_LOG_PANEL));
        var userData = serverData.user;
        //初始化所有的模块数据
        ModelToServerMapCommon_1.default.initModelToServerMap();
        var modelMap = ModelToServerMapCommon_1.default.modelToServerMap;
        var length = modelMap.length;
        for (var i = 0; i < length; i++) {
            var info = modelMap[i];
            var key = info.key;
            var model = info.model;
            if (info.key == "user") {
                model.instance.initData(userData);
            }
            else {
                //初始化的时候需要给一个默认值,
                if (!userData[key]) {
                    userData[key] = {};
                }
                var data = userData[key];
                model.instance.initData(data);
            }
        }
        // 获取云存储信息
        UserGlobalModel_1.default.instance.flushGlobalData(this.getCloudGlobalDataResult, this);
        SoundManager_1.default.init();
        SoundManager_1.default.initSwitch();
    }
    /**
     * 获取全局用户数据回调
     */
    getCloudGlobalDataResult(params) {
        // 玩家登陆
        UserModel_1.default.instance.login();
        // 设置相关开关
        BannerAdManager_1.default.setBannerSwitch();
        this.changeShowMainTask(-1, MainModule.task_onloginResult, "onLoginResult");
    }
    //value 完成任务数量,key,完成的任务对应的key, tag,任务描述
    changeShowMainTask(value, key, tag = null) {
        MainModule.showMainTask += value;
        LogsManager_1.default.echo("yrc showMainTask", value, MainModule.showMainTask, "tag:", tag);
        //同时记录对应的任务key标记为true.为了一些特殊情况判断
        this._taskCompMap[key] = true;
        //所有任务都完成就进入主界面
        if (MainModule.showMainTask == 0) {
            this.showGameMain();
        }
        else if (MainModule.showMainTask < 0) {
            LogsManager_1.default.errorTag("mainTaskError", "taskError", MainModule.showMainTask, tag);
        }
    }
    //判断某个任务是否完成
    checkHasTaskComplete(taskKey) {
        return this._taskCompMap[taskKey];
    }
    /**根据返回值决定出现主界面还是好友匹配界面 */
    showGameMain() {
        Message_1.default.instance.send(FrameWorkEvent_1.default.FRAMEWORKEVENT_STARTENTERMAIN);
        KariqiShareManager_1.default.onEvent(KariquShareConst_1.default.KARIQU_GAMEMAIN);
    }
    //初始化UI层
    initLayer() {
        WindowManager_1.default.rootLayer = ViewTools_1.default.createContainer("rootLayer");
        WindowManager_1.default.rootLayer.set2dPos(ScreenAdapterTools_1.default.sceneOffsetX, ScreenAdapterTools_1.default.sceneOffsetY);
        GlobalData_1.default.uiRoot.addChild(WindowManager_1.default.rootLayer);
        WindowManager_1.default.commonUILayer = ViewTools_1.default.createContainer("commonUILayer");
        // WindowManager.commonUILayer.setSize(ScreenAdapterTools.width, ScreenAdapterTools.height);
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.commonUILayer);
        WindowManager_1.default.topUILayer = ViewTools_1.default.createContainer("topUILayer");
        // WindowManager.topUILayer.setSize(ScreenAdapterTools.width, ScreenAdapterTools.height);
        WindowManager_1.default.topUILayer.mouseEnabled = true;
        WindowManager_1.default.topUILayer.mouseThrough = true;
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.topUILayer);
        WindowManager_1.default.guideLayer = ViewTools_1.default.createContainer("guideLayer");
        // WindowManager.guideLayer.setSize(ScreenAdapterTools.width, ScreenAdapterTools.height);
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.guideLayer);
        WindowManager_1.default.guideLayer.mouseEnabled = true;
        WindowManager_1.default.guideLayer.mouseThrough = true;
        WindowManager_1.default.guideLayer.visible = false;
        WindowManager_1.default.highLayer = ViewTools_1.default.createContainer("highLayer");
        // WindowManager.highLayer.setSize(ScreenAdapterTools.width, ScreenAdapterTools.height);
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.highLayer);
        WindowManager_1.default.toolsLayer = ViewTools_1.default.createContainer("toolsLayer");
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.toolsLayer);
        WindowManager_1.default.maskLayer = ViewTools_1.default.createContainer("maskLayer");
        // WindowManager.maskLayer.setSize(ScreenAdapterTools.width, ScreenAdapterTools.height);
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.maskLayer);
        WindowManager_1.default.tipsLayer = ViewTools_1.default.createContainer("tipsLayer");
        // WindowManager.tipsLayer.setSize(ScreenAdapterTools.width, ScreenAdapterTools.height);
        WindowManager_1.default.tipsLayer.mouseEnabled = false;
        WindowManager_1.default.tipsLayer.mouseThrough = true;
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.tipsLayer);
        //最顶层2级容器（越高级优先级越高）
        WindowManager_1.default.debugLayer = ViewTools_1.default.createContainer("debugLayer");
        WindowManager_1.default.rootLayer.addChild(WindowManager_1.default.debugLayer);
        LogsManager_1.default.initLogPanel();
        if (UserInfo_1.default.isWeb()) {
            GameSwitch_1.default.switchMap.SWITCH_GM_DEBUG = 1;
            GameSwitch_1.default.switchMap.SWITCH_CD_DEBUG = 1;
        }
        //延迟一帧显示loading
        // var delayShowLoading = () => {
        // 	WindowManager.ShowLoadingUI(null);
        // }
        // //web版因为有loginui. 所以不能延迟一帧显示loading.否则loading会盖住login
        // if (UserInfo.isWeb()) {
        // 	WindowManager.ShowLoadingUI(null);
        // } else {
        // 	TimerManager.instance.add(delayShowLoading, null, 10, 1);
        // }
        //只有native才填充黑边
        if (UserInfo_1.default.isSystemNative()) {
            //判断是否填充黑边
            ScreenAdapterTools_1.default.checkFillBorder();
        }
    }
    onTTShow() {
        LogsManager_1.default.echo("yrc onTTShow");
        if (!UserInfo_1.default.platform.isPlayVideo) {
            //不播放视频广告的时候才播BGM
            if (WindowManager_1.default.isUIOpened(WindowCfgs_1.WindowCfgs.GameMainUI)) {
                LogsManager_1.default.echo("yrc have GameMainUI");
                SoundManager_1.default.stopMusic();
                SoundManager_1.default.playBGM(MusicConst_1.MusicConst.MUSIC_BGM);
            }
            else {
                LogsManager_1.default.echo("yrc have not GameMainUI");
                SoundManager_1.default.playBGM();
            }
        }
    }
    gameClose() {
    }
    /**开始播放BGM */
    playBGM() {
        SoundManager_1.default.playBGM(MusicConst_1.MusicConst.MUSIC_BGM);
    }
    /**暂停BGM */
    stopBGM() {
        SoundManager_1.default.stopMusic();
    }
    recvMsg(cmd, data) {
        switch (cmd) {
            case MsgCMD_1.default.GAME_ONSHOW:
                this.onTTShow();
                break;
            case MsgCMD_1.default.VIDEO_PLAY:
                this.playBGM();
                break;
            case MsgCMD_1.default.VIDEO_STOP:
                this.stopBGM();
                break;
            case MsgCMD_1.default.CLIENT_SEND_LOG:
                LogsManager_1.default.sendAndShowLog();
                break;
        }
    }
}
exports.default = MainModule;
MainModule.task_sceneComplete = "task_sceneComplete"; //任务场景加载完成
MainModule.task_updateListerner = "task_updateListerner"; //任务版本检查完成
MainModule.task_subpackage = "task_subpackage"; //分包加载完成
MainModule.task_configsloaded = "task_configsloaded"; //配置加载完成
MainModule.task_onloginResult = "task_onloginResult"; //登入完成
MainModule.task_mergeFileBack = "task_mergeFileBack"; //文件合并回来
MainModule.task_kariquLogin = "task_kariquLogin"; //卡日曲登录结果
MainModule.showMainTask = 6; // 进主界面6个任务, 1,版本检查结束, 2, 312登入初始化完成, 3,fileconfig.json加载完成 4.分包下载完成 ,5.合并文件完成,6卡日曲登录回调 7获取系统信息完成(只有android和ios有)
