"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SubPackageManager_1 = require("./SubPackageManager");
const SubPackageConst_1 = require("../../game/sys/consts/SubPackageConst");
class ResourceManager {
    constructor() {
    }
    static get instance() {
        if (!ResourceManager._instance) {
            ResourceManager._instance = new ResourceManager();
        }
        return ResourceManager._instance;
    }
    //加载多个3dmodel 以及场景
    //示例:loadMult3dmodel(["role_001","role_101","effect_110"],"scene_battle");
    // params 自带的回调参数
    static loadMult3dmodel(models, sceneModel = null, callBack = null, thisObj = null, params = null) {
    }
    //判断是否3d模块需要分包
    static check3dIsSubpack() {
        return SubPackageManager_1.default.getModelFileStyle(SubPackageConst_1.default.packName_model3d) == SubPackageConst_1.default.PATH_STYLE_SUBPACK;
    }
    //加载一个3dmodel
    static load3dmodel(modelName, isScene, callBack, thisObj, params = null) {
    }
    //获取一个3dmodel的分包名
    static get3dodelPackName(modelName) {
        return this.PATHHEAD + modelName;
    }
    //获取3d模型的url,比如传入 role_1001  返回 3dmodel/LayaScene_role_1001/Conventional/role_1001.lh
    //isScene  如果是场景 返回ls 否则返回lh
    static get3dmodelUrl(modelName, isScene = false) {
        var houzhui = isScene && ".ls" || ".lh";
        return this.get3DModelPath(modelName) + "/" + this.PATHHEAD + modelName + "/" + this.resplatform + "/" + modelName + houzhui;
    }
    //获取一个3demol的sprite3D对象.根据业务逻辑自己去clone withClone 是否克隆.原则上都需要克隆 默认false;
    static get3dmodelRes(modelName, isScene = false, withClone = false) {
        return null;
    }
    //检查粒子renderMode
    static checkParticalRendeMode(view, modelName) {
    }
    //clone一个粒子
    static cloneOneSprite(sourceSp) {
    }
    //加载一个spine动画  根据spine动画名字作为动态分包 ,回调参数顺序:  callback(ani,params); 会把 动画对象放到回调里面
    //  ani  是 Laya.Skeleton对象
    //这个接口废弃
    static loadSpine(spineName, callBack, thisObj, params = null, needChangeSkin = false) {
    }
    //获取spine对应的分包 因为考虑到如果有组的分包
    static getSpineSubpack(shortName) {
        var groupInfo = SubPackageManager_1.default.getSpineGroupInfo(shortName);
        if (!groupInfo) {
            return shortName;
        }
        return groupInfo.name;
    }
    //获取spine的路径
    static getSpinePath(shortName) {
        var subpak = SubPackageConst_1.default.subPackData[shortName];
        var groupInfo = SubPackageManager_1.default.getSpineGroupInfo(shortName);
        //如果是组spine
        if (groupInfo) {
            return groupInfo.path + "/" + groupInfo.name + "/" + shortName + "/";
        }
        var forderPath;
        if (!subpak || subpak.style == SubPackageConst_1.default.PATH_STYLE_SUBPACK) {
            forderPath = "spine";
        }
        else if (subpak.style == SubPackageConst_1.default.PATH_STYLE_NATIVE) {
            forderPath = "spine_native";
        }
        else {
            forderPath = "spine_cdn";
        }
        return forderPath + "/" + shortName + "/";
    }
    //获取spineskurl
    static getSpineSkUrl(shortName) {
        return this.getSpinePath(shortName) + shortName + ".sk";
    }
    // needChangeSkin 是否需要换装 默认false 不换砖. 换装会占用更多的模版内存
    static createSpineAni(spineName, needChangeSkin = false) {
        return null;
    }
    //获取一个3d模型的路径 不带Layascene的 model
    static get3DModelPath(model) {
        var packName = this.get3dodelPackName(model);
        var packinfo = SubPackageConst_1.default.subPackData[packName];
        if (!packinfo) {
            return "3dmodels";
        }
        var subStyle = packinfo.style;
        if (subStyle == null) {
            return "3dmodels";
        }
        else if (subStyle == SubPackageConst_1.default.PATH_STYLE_CDN) {
            return "3dcdns";
        }
        else if (subStyle == SubPackageConst_1.default.PATH_STYLE_NATIVE) {
            return "3dnatives";
        }
        else {
            return "3dmodels";
        }
    }
    //获取文本资源
    static getResTxt(path, bounlde = "textab") {
        return "";
    }
    //获取文件buffer
    static getResBuffer(path, boundle = "byteab") {
        return new ArrayBuffer(10);
    }
}
exports.default = ResourceManager;
ResourceManager.PATHHEAD = "LayaScene_"; //laya 场景
ResourceManager.resplatform = "Conventional"; //资源平台
ResourceManager.SPINEPATH = "spine"; //2d骨骼动画路径
ResourceManager._checkRenderModeMap = {};
//缓存spine加载完成, 缓存对应的spine缓冲模版
ResourceManager._spineModelMap = {};
//# sourceMappingURL=ResourceManager.js.map