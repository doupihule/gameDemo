"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadZipManager = void 0;
class LoadZipManager {
    constructor() {
        //重新加载的次数
        this._reloadCount = 0;
        //最多重新加载的次数 ,超过之后 就等待.
        this._maxReloadcount = 1;
        //测试加载失败开关
        this._isTestError = false;
        this._timeCode = 0;
        this._timeCount = 0;
        this._startLoadTime = 0;
        this._loadCacheArr = [];
        this._hasCacheMap = {};
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new LoadZipManager();
        }
        return this._instance;
    }
    //加载一个模块对应的zip
    //加载一个zip
    loadZip(url, modelName, completeFunc, errorFunc, isInsert = false) {
    }
    //判断是否有缓存
    checkHasCache(url) {
        var key = url;
        if (typeof key != "string") {
            key = JSON.stringify(url);
        }
        var result = this._hasCacheMap[key];
        return result;
    }
}
exports.LoadZipManager = LoadZipManager;
//# sourceMappingURL=LoadZipManager.js.map