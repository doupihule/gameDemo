"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadManager = void 0;
class LoadManager {
    constructor() {
        //重新加载的次数
        this._reloadCount = 0;
        //最多重新加载的次数 ,超过之后 就等待.
        this._maxReloadcount = 1;
        //测试加载失败开关
        this._isTestError = false;
        this._timeCode = 0;
        this._timeCount = 0;
        this._startLoadTime = 0;
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new LoadManager();
        }
        return this._instance;
    }
    loadPacgeAndRes(subPackageGroup, url, complete, progress, type, isInsert, isLoading, priority, cache, group, ignoreCache, useWorkerLoader) {
    }
    load(url, complete, progress, type, isInsert, isLoading, priority, cache, group, ignoreCache, useWorkerLoader) {
    }
    create(url, complete, progress, type, isInsert, isLoading, constructParams, propertyParams, priority) {
    }
    //创建3d对象. 先加载对应的分包
    createPackAndRes(subPackageGroup, url, complete, progress, type, isInsert, isLoading, constructParams, propertyParams, priority) {
    }
    //判断是否有缓存
    checkHasCache(url) {
        var key = url;
        if (typeof key != "string") {
            key = JSON.stringify(url);
        }
        var result = this._hasCacheMap[key];
        // if(result){
        //     LogsManager.echo("这组已经已经加载过了",url.slice(0,100));
        // }
        return result;
    }
    //预编译shader
    compileShader(model) {
    }
}
exports.LoadManager = LoadManager;
