"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LogsManager_1 = require("../manager/LogsManager");
const UserInfo_1 = require("../common/UserInfo");
const GameSwitch_1 = require("../common/GameSwitch");
class FileUtils {
    constructor() {
    }
    //是否需要缓存
    static needCache(url) {
        return null;
    }
    //是否是远端路径
    static isRemotePath(p) {
        return null;
        // return p.indexOf("http://") == 0 || p.indexOf("https://") == 0;
    }
    //把完整的远程url路径转化成本地的全路径 主要是针对微信或者头条
    static turnFileUrlToLocalFulllPath(p) {
        return null;
    }
    //获取本地路径
    static getLocalFilePath(p) {
        return null;
    }
    //获取本地绝对路径
    static getLocalFullPath(p) {
        return null;
    }
    //
    static normailze(p) {
        return null;
        // var arr = p.split("/");
        // var original = p.split("/");
        // for (var a of arr) {
        // 	if (a == '' || a == null) {
        // 		var index = original.indexOf(a);
        // 		original.splice(index, 1);
        // 	}
        // }
        // if (original.length > 0) {
        // 	return original.join('/');
        // }
    }
    //获取远端的文件路径
    static getRemoteResUrl() {
        return null;
        // if (UserInfo.isWX()()) {
        // 	return Global.resource_url + "/wxgame/"
        // } else if (UserInfo.isTT()()) {
        // 	return Global.resource_url + "/tt/"
        // } else if (UserInfo.isQQGame()()) {
        // 	return "GameRes://"
        // }
        // return ""
    }
    //获取本地缓存文件路径
    static getCacheFilePath() {
        return null;
        // if (UserInfo.isWX()()) {
        // 	return `${wx.env.USER_DATA_PATH}/${VersionController.cacheCrcPath}/`;
        // } else if (UserInfo.isQQGame()()) {
        // 	return "GameRes://"
        // } else {
        // 	return "/resource/";
        // }
    }
    //把一个相对于assets/的路径转化为全局路径
    static getFullFilePath(shortPath) {
        return null;
        // var cacheFilePath: string = this.getCacheFilePath();
        // return cacheFilePath + "assets/" + VersionController.getVirtualUrl(shortPath);
    }
    //获取真实的版本控制文件
    static turnVirtualUrl(targetUrl) {
        return null;
        // if (!VersionController.instance) {
        // 	return targetUrl;
        // }
        // return VersionController.getVirtualUrl(targetUrl);
    }
    //判断本地文件是否存在 ,相对于USER_DATA_PATH 这个路径 或者绝对路径
    static existsLocalFile(path) {
        return false;
    }
    //这个是针对微信或者头条的判断是否有缓存,其他平台不给缓存
    static checkFileHasCache(url) {
        return null;
    }
    //保存缓存数据 传递为空 表示为 默认的 wx["env"].USER_DATA_PATH; 传入的path必须 带/结尾.
    static saveFileData(fileName, path = "", content, encoding = "utf8") {
    }
    //创建目标路径
    static makeTargetFilePath(fullPath) {
        var dirName = this.getFilePathByUrl(fullPath);
        this.mkdirsSync(dirName);
    }
    /**
     * 创建文件夹 返回是否创建成功
     */
    static mkdirsSync(p) {
    }
    //格式化路径
    static normailzePath(p) {
        var arr = p.split("/");
        var original = p.split("/");
        for (var a of arr) {
            if (a == '' || a == null) {
                var index = original.indexOf(a);
                original.splice(index, 1);
            }
        }
        if (original.length > 0) {
            return original.join('/');
        }
    }
    //根据本地的绝对路径删除
    static deleteFileByLocalFullPath(url) {
    }
    //获取缓存文件数据 filePath: 可以传绝对路径或者相wx["env"].USER_DATA_PATH路径
    static getLocalFileData(filePath, encoding = "utf8") {
        return null;
    }
    /**判断是否为wx源码，逻辑相同 */
    static isUserWXSource() {
        return UserInfo_1.default.isWX() || UserInfo_1.default.isQQGame() || UserInfo_1.default.isTT() || UserInfo_1.default.isOppo() || UserInfo_1.default.isBaidu() || UserInfo_1.default.isVivo();
    }
    /*获取本地缓存的根路径带斜杠*/
    static getLocalCacheRootPath() {
        return this.getEnvCacheRoot() + "/";
    }
    //获取本地缓存路径不带斜杠
    static getEnvCacheRoot() {
        return "";
    }
    /*获取本地zip缓存路径 所有获取文件夹路径的地方 结尾统一带\/ */
    static getLocalZipCacheFullPath() {
        if (this.isUserWXSource()) {
            return this.getLocalCacheRootPath() + this.localZipPath + "/";
        }
        return '';
    }
    /**解压zip
     *
     * @zipName 本地绝对路径 比如  wxlocal://user/ json/globalCfgs.zip
     * @tryTimes 尝试重新解压次数. 外部调用时 禁止传这个参数. 底层解压失败会尝试
     */
    static unZipFile(zipName, zipurl, sucessCallBack, errorBack, tryTimes = 0) {
    }
    /**获取一个文件所在的路径 */
    static getFilePathByUrl(fileUrl, isJoin = true) {
        if (fileUrl.slice(fileUrl.length - 1, fileUrl.length) == "/") {
            LogsManager_1.default.echo("_传入的已经是文件夹了", fileUrl);
            if (isJoin) {
                return fileUrl;
            }
            return fileUrl.slice(0, fileUrl.length - 1);
        }
        var arr = fileUrl.split("/");
        arr.splice(arr.length - 1, 1);
        if (arr.length == 0) {
            return "";
        }
        var rt = arr.join("/");
        rt += "/";
        return rt;
    }
    /**获取一个文件不带后缀的名字 */
    static getFileNameByUrl(fileUrl) {
        var arr = fileUrl.split("/");
        var fileName = arr[arr.length - 1];
        return fileName.split(".")[0];
    }
    /**判断是否使用zip压缩文件 */
    static checkIsUseZip() {
        if (UserInfo_1.default.isWeb()) {
            return false;
        }
        return !GameSwitch_1.default.checkOnOff(GameSwitch_1.default.SWITCH_DISABLE_ZIP);
    }
    /**初始化判断cachefile是否存在 */
    static initRootCachePath() {
    }
    //插入一个本地文件
    static insertOneNativeFile(path) {
    }
    /**解析二进制文件 */
    static decodeBinAssets(byte) {
    }
}
exports.default = FileUtils;
FileUtils.localFileMap = {
    'http[s]*://.*/resource/assets': 'cache_crc32/assets',
};
//本地zip文件存储路径
FileUtils.localZipPath = "zipCache";
FileUtils.tryUnZipTimes = 2;
//是否是使用zip压缩文件. 
FileUtils.isUseZipFiles = true;
//记录已经存在的文件路径 防止重复判断
FileUtils.fs_cache = {};
FileUtils.hasInitCacheRoot = false;
//# sourceMappingURL=FileUtils.js.map