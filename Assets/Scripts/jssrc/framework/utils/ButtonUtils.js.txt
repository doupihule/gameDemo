"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonUtils = void 0;
const LogsManager_1 = require("../manager/LogsManager");
const ButtonConst_1 = require("../consts/ButtonConst");
const TimerManager_1 = require("../manager/TimerManager");
class ButtonUtils {
    /**
     * 构造按钮
     * @param button 按钮对象
     * @param callBack 回调
     * @param thisObj this
     * @param defUrl 平时皮肤
     * @param tapUrl 点击时皮肤
     * @param args 数组形式
     */
    constructor(button, callBack, thisObj, defUrl, tapUrl, args) {
        this._button = null;
        /**当前真正的点击触发器 默认是_button  为了兼容点击别的东西能让整个组出现点击效果..  （只需在初始化ButtonUtils后调用  setRealButton(***)即可.. @sanmen 2019.7.30）*/
        this._realButton = null;
        this._callBack = null;
        this._thisObj = null;
        this._isEnable = true;
        this._defUrl = "";
        this._tapUrl = "";
        this._endCallBack = null;
        this._startCallBack = null;
        this._dragCallBack = null;
        /**
         * 按钮样式 默认为1 （即点击缩放为0.9 松开变为1）   ，样式2：（点击在当前基础上缩放0.9 松开还原）
         */
        this._type = ButtonConst_1.default.BUTTON_TYPE_5;
        //
        // 如
        /**
         * 样式额外参数：部分样式可以传额外样式参数
         * @example {diffY:10}
         */
        this._typeParams = {};
        this.shieldTime = 0; //按钮屏蔽点击的时间
        this.isCanClick = true; //当前是否可点击
        this.timeCode = 0;
        this._time = 0;
        this._longPress = false;
        this._button = button;
        this._realButton = this._button;
        this._defUrl = defUrl;
        this._tapUrl = tapUrl;
        this.oldScaleX = this._button.scaleX;
        this.oldScaleY = this._button.scaleY;
        this.setCallBackInfo(callBack, thisObj, args);
        //如果按钮已经注册过按钮事件了 这里需要移除
        if (button.__lastButtonUtils) {
            LogsManager_1.default.echo("这个按钮重复注册事件,先销毁上一次注册的事件");
            button.__lastButtonUtils.destoryButtonUtil();
        }
        button.__lastButtonUtils = this;
        this.registBtnListener();
    }
    setCallBackInfo(callBack, thisObj, args) {
        this._callBack = callBack;
        this._thisObj = thisObj;
        this._callBackParam = args;
    }
    setTouchEnd(func) {
        this._endCallBack = func;
    }
    //设置按下回调
    setTouchStart(func) {
        this._startCallBack = func;
    }
    //执行按下回调
    callStartCallBack(e) {
        if (this._isTouch) {
            this._startCallBack.call(this._thisObj, e);
        }
    }
    //设置拖出操作回调
    setDrag(func) {
        this._dragCallBack = func;
    }
    //执行拖出操作回调
    callDragCallBack(e) {
        this._dragCallBack.call(this._thisObj, e);
    }
    /**
     * 设置按钮类型
     * @param type 按钮类型
     * @param typeParams 对应类型参数
     */
    setBtnType(type, typeParams = {}) {
        // 改按钮类型时先删除所有监听重新添加
        this.removeBtnListener();
        this._type = type;
        this._typeParams = typeParams;
        this.registBtnListener();
        return this;
    }
    //设置点击音效  不传值为无音效
    setBtnClickSound(sound = '') {
        this._clickSound = sound;
        return this;
    }
    removeBtnListener() {
        this.removeStageCallback();
    }
    //注册按钮点击事件
    registBtnListener() {
    }
    /**
     * 添加到场景回调
     */
    addStageCallback() {
        if (this._type == ButtonConst_1.default.BUTTON_TYPE_4) {
            if (!this._buttonTween) {
                this.addButtonTween();
            }
        }
        if (this._type == ButtonConst_1.default.BUTTON_TYPE_6) {
            if (!this._buttonTween) {
                this.addButtonTween1();
            }
        }
    }
    //呼吸放大1.3倍动画
    addButtonTween1() {
    }
    addButtonTween() {
    }
    /**
     * 移除场景回调
     */
    removeStageCallback() {
    }
    //设置点击触发器
    setRealButton(btn) {
        this.removeBtnListener();
        this._realButton = btn;
        this.registBtnListener();
        return this;
    }
    /*
    * 是否可以长按
    * @param val
    */
    set longPress(val) {
        this._longPress = val;
    }
    setLongPress() {
    }
    onHold() {
        if (this._isTouch && this._callBack != null) {
            this._callBack.call(this._thisObj, this._button, this._callBackParam);
        }
    }
    closeLongPress() {
    }
    set enabled(val) {
        this._isEnable = val;
    }
    //销毁按钮
    destoryButtonUtil() {
        this.removeBtnListener();
        this._callBackParam = null;
        this._callBack = null;
        this._thisObj = null;
        this._button.__lastButtonUtils = null;
        this._button = null;
        this._realButton = null;
    }
    //设置按钮屏蔽点击的时间
    setUnEnableTime(shieldTime = 0) {
        this.shieldTime = shieldTime;
        return this;
    }
    delayEnableBtn() {
        if (this.shieldTime != 0) {
            TimerManager_1.default.instance.clearTimeout(this.timeCode);
            this.isCanClick = false;
            TimerManager_1.default.instance.setTimeout(() => {
                this.isCanClick = true;
            }, this, this.shieldTime);
        }
    }
}
exports.ButtonUtils = ButtonUtils;
