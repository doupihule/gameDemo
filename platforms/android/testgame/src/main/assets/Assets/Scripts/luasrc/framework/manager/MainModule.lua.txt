MainModule = class('MainModule')

MainModule.task_sceneComplete = "task_sceneComplete";
MainModule.task_updateListerner = "task_updateListerner";
MainModule.task_subpackage = "task_subpackage";
MainModule.task_configsloaded = "task_configsloaded";
MainModule.task_onloginResult = "task_onloginResult";
MainModule.task_mergeFileBack = "task_mergeFileBack";
MainModule.task_kariquLogin = "task_kariquLogin";

function MainModule.getInstance()
    return MainModule._instance
end

function MainModule:ctor()
    self.timeLock = 0;
    self._taskCompMap = {};
    MainModule._instance = self;
    self:initLayer()
    Message.getInstance():add(MsgCMD.GAME_ONSHOW, self)
    Message.getInstance():add(MsgCMD.VIDEO_STOP, self)
    Message.getInstance():add(MsgCMD.VIDEO_PLAY, self)
    self:onLoginResult({user={}});
    BattleSceneManager.getInstance():enterBattle({levelId="2"},WindowManager.commonUILayer,WindowManager.commonUILayer);

end



function MainModule:reqVMS()
    UserInfo.platform:reqVMS()
end

function MainModule:checkSystem()
    local versionName = UserInfo.platform:getVersionName()
    VersionManager.getInstance().versionName = versionName
    LogsManager.echo("xd cdnurl:", Global.resource_url)
    LogsManager.echo("yrc req versionName:", versionName)
    VersionManager.getInstance():initVersionData()
    self:onVersionLoaded()
end


function MainModule:onVersionLoaded()
    VersionManager.getInstance():versionFileCheck()
    FuncManager.init(function(self)
        if Global.checkUserCloudStorage() then
            self:onLoginResult(Client.getInstance().globalLoginBackData)
            UserInfo.platform:getLoginResult()
        end
        self:sysCallback()
    end
    , self)
end

function MainModule:onConfigLoaded()
    self:changeShowMainTask(-1, MainModule.task_configsloaded, "onConfigLoaded")
end

function MainModule:sysCallback()
    LogsManager.echo(" ======--VMSTIME--======== " .. Client.getInstance():getMiniServerTime() - self.timeLock)
    if not Global.checkUserCloudStorage() then
        UserInfo.platform:getWxInfo()
    end
    self:loadMergeFiles()
    UserInfo.platform:initPlatformData()
end

function MainModule:changeByte(name)
end

function MainModule:loadMergeFiles()
    self:onMergeFileBack()
end

function MainModule:onMergeFileBack()
    self:changeShowMainTask(-1, MainModule.task_mergeFileBack, "onMergeFileBack")
end

function MainModule:loginResult()
    LogsManager.echo(" ======--GlobalTIME--======== " .. Client.getInstance():getMiniServerTime() - self.timeLock)
    if Global.isNotGuide() then

    end
    Client.getInstance():send(Method.User_login, {}, self.onLoginResult, self)
end

function MainModule:onLoginResult(result)
    local serverData = result;
    if serverData.config then
        Client.getInstance().heartBeatInterval = result.data.config.heartBeatInterval
        if result.data.config.switch then
            GameSwitch.coverServerSwitchMap(result.data.config.switch)
            LogsManager.echo("yrc gameswitch resultSwitch", result.data.config.switch)
        end
    end
    LogsManager.echo("yrc SWITCH_LOG_PANEL:", GameSwitch.checkOnOff(GameSwitch.SWITCH_LOG_PANEL))
    --LogsManager.setLogGroupVisible(GameSwitch.checkOnOff(GameSwitch.SWITCH_LOG_PANEL))
    local userData = serverData.user
    local modelMap = ModelToServerMap.modelToServerMap
    local i = 0
    for i, info in ipairs(modelMap) do
        local key = info.key
        local model = info.model
        if info.key == "user" then
            model.getInstance():initData(userData)
        else
            if not userData[key] then
                userData[key] = {}
            end
            local data = userData[key]
            model.getInstance():initData(data)
        end
    end
    --UserGlobalModel.getInstance():flushGlobalData(self.getCloudGlobalDataResult, self)
    --SoundManager.init()
    --SoundManager.initSwitch()
end

function MainModule:initLoginData()

end

function MainModule:getCloudGlobalDataResult(params)
    UserModel.getInstance():login()
    BannerAdManager.setBannerSwitch()
    self:changeShowMainTask(-1, MainModule.task_onloginResult, "onLoginResult")
end

MainModule.showMainTask = 6;
function MainModule:changeShowMainTask(value, key, tag)
    if tag == nil then
        tag = nil
    end
    MainModule.showMainTask = MainModule.showMainTask + value
    LogsManager.echo("yrc showMainTask", value, MainModule.showMainTask, "tag:", tag)
    -- [ts2lua]self._taskCompMap下标访问可能不正确
    self._taskCompMap[key] = true
    if MainModule.showMainTask == 0 then
        self:showGameMain()
    elseif MainModule.showMainTask < 0 then
        LogsManager.errorTag("mainTaskError", "taskError", MainModule.showMainTask, tag)
    end
end

function MainModule:checkHasTaskComplete(taskKey)
    -- [ts2lua]self._taskCompMap下标访问可能不正确
    return self._taskCompMap[taskKey]
end

function MainModule:showGameMain()
    Message.getInstance():send(FrameWorkEvent.FRAMEWORKEVENT_STARTENTERMAIN)
end

function MainModule:reStartGame()
end
function MainModule:initLayer()
    WindowManager.rootLayer = GlobalEnv.uiRoot
    WindowManager.commonUILayer = UITools.createUICtn("commonUILayer")
    WindowManager.rootLayer:addChild(WindowManager.commonUILayer)
    WindowManager.topUILayer = UITools.createUICtn("topUILayer")
    WindowManager.rootLayer:addChild(WindowManager.topUILayer)
    WindowManager.guideLayer = UITools.createUICtn("guideLayer")
    WindowManager.rootLayer:addChild(WindowManager.guideLayer)
    WindowManager.guideLayer:setViewActive(false)
    WindowManager.highLayer = UITools.createUICtn("highLayer")
    WindowManager.rootLayer:addChild(WindowManager.highLayer)
    WindowManager.toolsLayer = UITools.createUICtn("toolsLayer")
    WindowManager.rootLayer:addChild(WindowManager.toolsLayer)
    WindowManager.maskLayer = UITools.createUICtn("maskLayer")
    WindowManager.rootLayer:addChild(WindowManager.maskLayer)
    WindowManager.tipsLayer = UITools.createUICtn("tipsLayer")
    WindowManager.rootLayer:addChild(WindowManager.tipsLayer)
    WindowManager.debugLayer = UITools.createUICtn("debugLayer")
    WindowManager.rootLayer:addChild(WindowManager.debugLayer)
    LogsManager.initLogPanel()
    local delayShowLoading = function()
        WindowManager.ShowLoadingUI(nil)
    end

    if UserInfo.isWeb() then
        WindowManager.ShowLoadingUI(nil)
    else
        TimerManager.getInstance():add(delayShowLoading, nil, 10, 1)
    end
    if UserInfo.isSystemNative() then
        ScreenAdapterTools.checkFillBorder()
    end
end

function MainModule:onTTShow()
    LogsManager.echo("yrc onTTShow")
    if not UserInfo.platform.isPlayVideo then
        if WindowManager.isUIOpened(WindowCfgs.GameMainUI) then
            LogsManager.echo("yrc have GameMainUI")
            SoundManager.stopMusic()
            SoundManager.playBGM(MusicConst.MUSIC_BGM)
        else
            LogsManager.echo("yrc have not GameMainUI")
            SoundManager.playBGM()
        end
    end
end

function MainModule:gameClose()
end

function MainModule:playBGM()
    SoundManager.playBGM(MusicConst.MUSIC_BGM)
end

function MainModule:stopBGM()
    SoundManager.stopMusic()
end

function MainModule:recvMsg(cmd, data)
end
