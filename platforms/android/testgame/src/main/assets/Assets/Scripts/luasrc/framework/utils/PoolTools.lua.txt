PoolTools = class('PoolTools')
PoolTools._pools = { battle = {}, sys = {}, scene = {} };
function PoolTools.getItems(sign, model)
    if model == nil then
        model = PoolCode.pool_model_battle
    end
    local pools = PoolTools._pools[model][sign]
    return pools
end

function PoolTools.getModelItems(model)
    if model == nil then
        model = PoolCode.pool_model_battle
    end
    return PoolTools._pools[model]
end

function PoolTools.getItem(sign, model)
    if model == nil then
        model = PoolCode.pool_model_battle
    end
    local pools = PoolTools._pools[model][sign]
    if pools ~= nil then
        return table.shiftArray(pools)
    end
    return nil
end

function PoolTools.cacheItem(sign, item, model)
    if model == nil then
        model = PoolCode.pool_model_battle
    end
    local poolModel = PoolTools._pools[model]
    local pools = poolModel[sign]
    if pools == nil then
        pools = { item }
        poolModel[sign] = pools
    else
        table.insert(pools, item)
    end
end

function PoolTools.clearOneModelPool(model)
    if model == nil then
        model = PoolCode.pool_model_battle
    end
    -- [ts2lua]PoolTools._pools下标访问可能不正确
    local poolModel = PoolTools._pools[model]
    for i in pairs(poolModel) do
        PoolTools.clearOnePool(i, model)
    end
end

function PoolTools.clearOnePool(key, model)
    if model == nil then
        model = PoolCode.pool_model_battle
    end
    local poolModel = PoolTools._pools[model]
    local arr = poolModel[key]
    if not arr or #arr == 0 then
        return
    end
    local ii = 0
    repeat
        -- [ts2lua]arr下标访问可能不正确
        local item = arr[ii]
        if item.dispose then
            item:dispose()
        elseif item.removeSelf then
            item:removeSelf()
        end
        ii = ii + 1
    until not (ii < #arr)
    table.spliceArray(arr, 1, #arr)
end
